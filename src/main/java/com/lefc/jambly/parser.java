
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Sep 11 10:39:50 CEST 2014
//----------------------------------------------------

package com.lefc.jambly;

import java.io.*;
import java.util.*;

import com.lefc.jambly.model.Obj;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Thu Sep 11 10:39:50 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\011" +
    "\003\000\002\012\003\000\002\013\003\000\002\130\003" +
    "\000\002\130\003\000\002\130\003\000\002\131\002\000" +
    "\002\130\004\000\002\014\003\000\002\015\003\000\002" +
    "\015\002\000\002\016\003\000\002\016\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\020\002" +
    "\000\002\020\003\000\002\021\003\000\002\021\004\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\006\000\002\132\002\000\002\024" +
    "\006\000\002\026\002\000\002\026\003\000\002\025\003" +
    "\000\002\025\004\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
    "\031\003\000\002\032\003\000\002\032\005\000\002\033" +
    "\003\000\002\033\005\000\002\033\005\000\002\034\003" +
    "\000\002\034\003\000\002\035\004\000\002\036\005\000" +
    "\002\037\006\000\002\040\002\000\002\041\003\000\002" +
    "\041\003\000\002\043\005\000\002\043\004\000\002\044" +
    "\003\000\002\044\005\000\002\133\002\000\002\045\006" +
    "\000\002\046\002\000\002\046\003\000\002\047\003\000" +
    "\002\047\004\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\051\004\000\002\052\004\000\002\052" +
    "\005\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\057\003\000\002\057\003" +
    "\000\002\060\004\000\002\060\004\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\062\007\000\002" +
    "\063\011\000\002\064\011\000\002\065\007\000\002\066" +
    "\007\000\002\067\011\000\002\070\013\000\002\070\007" +
    "\000\002\071\013\000\002\071\007\000\002\072\002\000" +
    "\002\072\003\000\002\073\003\000\002\073\003\000\002" +
    "\074\002\000\002\074\003\000\002\075\003\000\002\076" +
    "\003\000\002\076\005\000\002\077\003\000\002\077\003" +
    "\000\002\100\003\000\002\100\005\000\002\100\003\000" +
    "\002\101\006\000\002\101\006\000\002\102\003\000\002" +
    "\103\005\000\002\104\002\000\002\104\003\000\002\105" +
    "\004\000\002\105\005\000\002\106\006\000\002\107\003" +
    "\000\002\107\003\000\002\107\003\000\002\107\003\000" +
    "\002\110\004\000\002\111\004\000\002\112\003\000\002" +
    "\113\003\000\002\113\003\000\002\114\007\000\002\115" +
    "\003\000\002\115\005\000\002\115\005\000\002\116\003" +
    "\000\002\116\005\000\002\116\005\000\002\117\003\000" +
    "\002\117\005\000\002\117\005\000\002\117\005\000\002" +
    "\117\005\000\002\120\003\000\002\120\005\000\002\120" +
    "\005\000\002\121\003\000\002\121\005\000\002\122\003" +
    "\000\002\122\005\000\002\123\003\000\002\123\003\000" +
    "\002\124\005\000\002\125\003\000\002\125\003\000\002" +
    "\126\002\000\002\126\003\000\002\127\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\022\002\uffe8\003\011\012\006\024\007\025" +
    "\013\026\005\027\017\030\uffe2\001\002\000\022\002\uffe9" +
    "\003\011\012\006\024\007\025\013\026\005\027\017\030" +
    "\uffe2\001\002\000\016\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\001\002\000\022\002\uffe4\003\uffe4\012" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\001\002" +
    "\000\016\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\001\002\000\016\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\001\002\000\022\002\uffe3\003\uffe3\012" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\001\002" +
    "\000\022\002\uffe7\003\uffe7\012\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\001\002\000\016\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\001\002\000\004\002" +
    "\u010d\001\002\000\016\024\007\025\013\026\005\027\017" +
    "\030\uffe1\031\uffe1\001\002\000\004\002\uffea\001\002\000" +
    "\016\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\001\002\000\004\030\023\001\002\000\022\002\uffe5\003" +
    "\uffe5\012\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\001\002\000\004\002\000\001\002\000\004\062\024\001" +
    "\002\000\072\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\001\002\000\004\015\026" +
    "\001\002\000\022\012\uffd9\015\uffd9\016\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\031\uffd9\001\002\000\070\002\uffda" +
    "\003\uffda\004\uffda\005\uffda\006\uffda\012\uffda\014\uffda\015" +
    "\uffda\016\uffda\020\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\032\uffda\034\uffda\035\uffda\036\uffda\037\uffda\055" +
    "\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda" +
    "\001\002\000\022\012\033\015\031\016\uffd7\024\007\025" +
    "\013\026\005\027\017\031\uffe2\001\002\000\066\003\uffbc" +
    "\004\uffbc\005\uffbc\006\uffbc\012\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\020\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\032\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\001\002" +
    "\000\006\012\055\015\031\001\002\000\022\012\uffcf\015" +
    "\uffcf\016\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf" +
    "\001\002\000\022\012\uffd2\015\uffd2\016\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\031\uffd2\001\002\000\022\012\uffd1" +
    "\015\uffd1\016\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\031" +
    "\uffd1\001\002\000\022\012\uffd0\015\uffd0\016\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\031\uffd0\001\002\000\022\012" +
    "\033\015\031\016\uffd6\024\007\025\013\026\005\027\017" +
    "\031\uffe2\001\002\000\022\012\uffd5\015\uffd5\016\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\001\002\000\022" +
    "\012\uffd3\015\uffd3\016\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\031\uffd3\001\002\000\004\031\045\001\002\000\004" +
    "\016\044\001\002\000\070\002\uffd8\003\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\032\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\001\002\000\004\062" +
    "\024\001\002\000\006\012\uffc5\015\uffc5\001\002\000\004" +
    "\020\050\001\002\000\004\021\uffc3\001\002\000\004\021" +
    "\052\001\002\000\006\012\uffc4\015\uffc4\001\002\000\022" +
    "\012\uffd4\015\uffd4\016\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\031\uffd4\001\002\000\022\012\uffc6\015\uffc6\016\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\001\002\000" +
    "\022\012\uffc1\015\uffc1\016\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\031\uffc1\001\002\000\022\012\uffc2\015\uffc2\016" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2\001\002" +
    "\000\066\003\116\004\112\005\067\006\065\012\136\014" +
    "\142\015\031\016\uffba\020\121\024\007\025\013\026\005" +
    "\027\127\030\uffe2\032\107\034\143\035\130\036\072\037" +
    "\115\055\144\056\125\057\076\060\077\061\061\062\024" +
    "\063\106\001\002\000\020\003\uffec\004\uffec\005\uffec\006" +
    "\uffec\011\273\012\275\014\271\001\002\000\062\003\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\016\ufffb\021\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\001\002\000\066\003\uffae" +
    "\004\uffae\005\uffae\006\uffae\012\uffae\014\uffae\015\uffae\016" +
    "\uffae\020\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\032\uffae\034\uffae\035\uffae\036\uffae\037\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\001\002" +
    "\000\004\017\u0109\001\002\000\026\003\uff9d\004\uff9d\005" +
    "\uff9d\006\uff9d\011\uff9d\012\uff9d\014\uff9d\021\uff9d\040\uff78" +
    "\041\uff78\001\002\000\074\003\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2" +
    "\021\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\001" +
    "\002\000\062\003\uff86\004\uff86\005\uff86\006\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\016\uff86\021\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86" +
    "\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\001" +
    "\002\000\074\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\012\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\001\002\000\062" +
    "\003\uff87\004\uff87\005\uff87\006\uff87\010\uff87\011\uff87\012" +
    "\uff87\013\uff87\014\uff87\016\uff87\021\uff87\040\uff87\041\uff87" +
    "\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050" +
    "\uff87\051\uff87\052\uff87\053\uff87\054\uff87\001\002\000\070" +
    "\003\uffa6\004\uffa6\005\uffa6\006\uffa6\012\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\020\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\001\002\000\004\020\u0100\001\002\000\066\003" +
    "\uffab\004\uffab\005\uffab\006\uffab\012\uffab\014\uffab\015\uffab" +
    "\016\uffab\020\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\032\uffab\034\uffab\035\uffab\036\uffab\037\uffab\055\uffab" +
    "\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\001" +
    "\002\000\074\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\012\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6\021\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\001\002\000\066" +
    "\003\uff79\004\uff79\005\uff79\006\uff79\007\210\010\uff79\011" +
    "\uff79\012\uff79\013\uff79\014\uff79\016\uff79\017\uff5b\021\uff79" +
    "\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046" +
    "\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79" +
    "\001\002\000\062\003\ufffd\004\ufffd\005\ufffd\006\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\021\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\001\002\000\062\003\ufffc\004\ufffc\005\ufffc\006\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc\021\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\001\002\000\020\003\uffec\004\uffec\005\uffec\006\uffec\011" +
    "\273\012\275\014\271\001\002\000\070\003\uffa5\004\uffa5" +
    "\005\uffa5\006\uffa5\012\uffa5\014\uffa5\015\uffa5\016\uffa5\020" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\001\002" +
    "\000\074\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\012" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\020\ufff8\021\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\063\ufff8\001\002\000\022\003" +
    "\uff9e\004\uff9e\005\uff9e\006\uff9e\011\uff9e\012\uff9e\014\uff9e" +
    "\021\uff9e\001\002\000\074\003\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\020\ufff5" +
    "\021\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\001" +
    "\002\000\062\003\uff7a\004\uff7a\005\uff7a\006\uff7a\010\uff7a" +
    "\011\uff7a\012\uff7a\013\uff7a\014\uff7a\016\uff7a\021\uff7a\040" +
    "\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a" +
    "\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\001" +
    "\002\000\062\003\ufffa\004\ufffa\005\ufffa\006\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\021\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\001" +
    "\002\000\004\020\320\001\002\000\004\016\317\001\002" +
    "\000\066\003\uffb5\004\uffb5\005\uffb5\006\uffb5\012\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\020\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\032\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\001\002\000\074\003\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\020\ufff7" +
    "\021\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\001" +
    "\002\000\066\003\uffb0\004\uffb0\005\uffb0\006\uffb0\012\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\020\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\032\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\001\002\000\026\003\uff9c\004\uff9c\005\uff9c" +
    "\006\uff9c\011\uff9c\012\uff9c\014\uff9c\021\uff9c\040\uff77\041" +
    "\uff77\001\002\000\012\003\116\004\112\005\067\006\065" +
    "\001\002\000\074\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\001\002\000" +
    "\070\003\uffa3\004\uffa3\005\uffa3\006\uffa3\012\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\020\uffa3\024\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\001\002\000\006\040\241\041\240\001\002" +
    "\000\024\020\166\037\115\055\144\056\125\057\076\060" +
    "\077\061\061\062\024\063\106\001\002\000\070\003\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\012\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\020\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9" +
    "\001\002\000\066\003\uffb4\004\uffb4\005\uffb4\006\uffb4\012" +
    "\uffb4\014\uffb4\015\uffb4\016\uffb4\020\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\032\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\001\002\000\062\003\uff88\004\uff88\005" +
    "\uff88\006\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88" +
    "\016\uff88\021\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044" +
    "\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88" +
    "\053\uff88\054\uff88\001\002\000\062\003\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\016\ufffe\021\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\001\002\000\066\003\uffac\004\uffac\005" +
    "\uffac\006\uffac\012\uffac\014\uffac\015\uffac\016\uffac\020\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\032\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\001\002\000\024\003" +
    "\116\004\112\005\067\006\065\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\001\002\000\004\020\300\001\002\000" +
    "\066\003\uffb6\004\uffb6\005\uffb6\006\uffb6\012\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\020\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\032\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\001\002\000\066\003\uffb8\004\uffb8\005\uffb8\006\uffb8" +
    "\012\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\001\002\000\066\003\uffaf\004\uffaf" +
    "\005\uffaf\006\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf\020" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\032\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\001\002\000\070" +
    "\003\uffa4\004\uffa4\005\uffa4\006\uffa4\012\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\020\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\001\002\000\066\003\116\004\112\005\067\006" +
    "\065\012\136\014\142\015\031\016\uffb9\020\121\024\007" +
    "\025\013\026\005\027\127\030\uffe2\032\107\034\143\035" +
    "\130\036\072\037\115\055\144\056\125\057\076\060\077" +
    "\061\061\062\024\063\106\001\002\000\070\003\uffa1\004" +
    "\uffa1\005\uffa1\006\uffa1\012\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\020\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\001" +
    "\002\000\066\003\uffad\004\uffad\005\uffad\006\uffad\012\uffad" +
    "\014\uffad\015\uffad\016\uffad\020\uffad\024\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\032\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\001\002\000\030\003\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\ufff1\011\273\012\275\014\271\017\ufff1\040" +
    "\ufff1\041\ufff1\001\002\000\064\003\uff84\004\uff84\005\uff84" +
    "\006\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\016" +
    "\uff84\017\uff5a\021\uff84\040\uff84\041\uff84\042\uff84\043\uff84" +
    "\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052" +
    "\uff84\053\uff84\054\uff84\001\002\000\070\003\uffa2\004\uffa2" +
    "\005\uffa2\006\uffa2\012\uffa2\014\uffa2\015\uffa2\016\uffa2\020" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\001\002" +
    "\000\042\012\136\014\142\015\031\020\121\032\107\034" +
    "\143\035\130\036\072\037\115\055\144\056\125\057\076" +
    "\060\077\061\061\062\024\063\106\001\002\000\062\003" +
    "\uffff\004\uffff\005\uffff\006\uffff\010\uffff\011\uffff\012\uffff" +
    "\013\uffff\014\uffff\016\uffff\021\uffff\040\uffff\041\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff" +
    "\051\uffff\052\uffff\053\uffff\054\uffff\001\002\000\004\062" +
    "\024\001\002\000\026\003\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\007\153\011\uffcd\012\uffcd\014\uffcd\017\152\020\154\001" +
    "\002\000\020\003\uffce\004\uffce\005\uffce\006\uffce\011\uffce" +
    "\012\uffce\014\uffce\001\002\000\020\003\uffb2\004\uffb2\005" +
    "\uffb2\006\uffb2\011\uffb2\012\uffb2\014\uffb2\001\002\000\026" +
    "\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\012" +
    "\uffcb\014\uffcb\017\uffcb\020\uffcb\001\002\000\026\015\165" +
    "\020\166\037\115\055\144\056\125\057\076\060\077\061" +
    "\061\062\024\063\106\001\002\000\004\010\156\001\002" +
    "\000\004\021\155\001\002\000\026\003\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\011\uffc9\012\uffc9\014\uffc9\017\uffc9" +
    "\020\uffc9\001\002\000\026\003\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\011\uffca\012\uffca\014\uffca\017\uffca\020\uffca" +
    "\001\002\000\062\003\uff78\004\uff78\005\uff78\006\uff78\010" +
    "\uff78\011\uff78\012\uff78\013\uff78\014\uff78\016\uff78\021\uff78" +
    "\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054\uff78" +
    "\001\002\000\032\003\uff60\004\uff60\005\uff60\006\uff60\010" +
    "\uff60\011\uff60\012\uff60\014\uff60\016\uff60\021\uff60\053\236" +
    "\054\uff60\001\002\000\026\003\uff57\004\uff57\005\uff57\006" +
    "\uff57\010\uff57\011\uff57\012\uff57\014\uff57\016\uff57\021\uff57" +
    "\001\002\000\056\003\uff72\004\uff72\005\uff72\006\uff72\010" +
    "\uff72\011\uff72\012\uff72\013\uff72\014\uff72\016\uff72\021\uff72" +
    "\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050" +
    "\uff72\051\uff72\052\uff72\053\uff72\054\uff72\001\002\000\066" +
    "\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1\021\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1" +
    "\001\002\000\056\003\uff70\004\uff70\005\uff70\006\uff70\010" +
    "\uff70\011\uff70\012\uff70\013\uff70\014\uff70\016\uff70\021\uff70" +
    "\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70\050" +
    "\uff70\051\uff70\052\uff70\053\uff70\054\uff70\001\002\000\030" +
    "\015\165\016\257\020\166\037\115\055\144\056\125\057" +
    "\076\060\077\061\061\062\024\063\106\001\002\000\034" +
    "\003\116\004\112\005\067\006\065\020\166\037\115\055" +
    "\144\056\125\057\076\060\077\061\061\062\024\063\106" +
    "\001\002\000\056\003\uff74\004\uff74\005\uff74\006\uff74\010" +
    "\uff74\011\uff74\012\uff74\013\uff74\014\uff74\016\uff74\021\uff74" +
    "\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050" +
    "\uff74\051\uff74\052\uff74\053\uff74\054\uff74\001\002\000\062" +
    "\003\uff73\004\uff73\005\uff73\006\uff73\010\uff73\011\uff73\012" +
    "\uff73\013\uff73\014\uff73\016\uff73\021\uff73\040\241\041\240" +
    "\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050" +
    "\uff73\051\uff73\052\uff73\053\uff73\054\uff73\001\002\000\062" +
    "\003\uff77\004\uff77\005\uff77\006\uff77\010\uff77\011\uff77\012" +
    "\uff77\013\uff77\014\uff77\016\uff77\021\uff77\040\uff77\041\uff77" +
    "\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050" +
    "\uff77\051\uff77\052\uff77\053\uff77\054\uff77\001\002\000\030" +
    "\003\uff5e\004\uff5e\005\uff5e\006\uff5e\010\uff5e\011\uff5e\012" +
    "\uff5e\014\uff5e\016\uff5e\021\uff5e\054\234\001\002\000\022" +
    "\003\uffc8\004\uffc8\005\uffc8\006\uffc8\011\uffc8\012\uffc8\014" +
    "\uffc8\016\uffc8\001\002\000\052\003\uff6a\004\uff6a\005\uff6a" +
    "\006\uff6a\010\uff6a\011\uff6a\012\uff6a\014\uff6a\016\uff6a\021" +
    "\uff6a\042\224\043\225\045\uff6a\046\uff6a\047\uff6a\050\uff6a" +
    "\051\uff6a\052\uff6a\053\uff6a\054\uff6a\001\002\000\046\003" +
    "\uff65\004\uff65\005\uff65\006\uff65\010\uff65\011\uff65\012\uff65" +
    "\014\uff65\016\uff65\021\uff65\045\217\046\221\047\222\050" +
    "\220\051\uff65\052\uff65\053\uff65\054\uff65\001\002\000\036" +
    "\003\uff62\004\uff62\005\uff62\006\uff62\010\uff62\011\uff62\012" +
    "\uff62\014\uff62\016\uff62\021\uff62\051\215\052\214\053\uff62" +
    "\054\uff62\001\002\000\026\003\uff5d\004\uff5d\005\uff5d\006" +
    "\uff5d\010\uff5d\011\uff5d\012\uff5d\014\uff5d\016\uff5d\021\uff5d" +
    "\001\002\000\022\003\uffc7\004\uffc7\005\uffc7\006\uffc7\011" +
    "\uffc7\012\uffc7\014\uffc7\016\uffc7\001\002\000\056\003\uff6d" +
    "\004\uff6d\005\uff6d\006\uff6d\010\uff6d\011\uff6d\012\uff6d\013" +
    "\204\014\uff6d\016\uff6d\021\uff6d\042\uff6d\043\uff6d\044\203" +
    "\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053" +
    "\uff6d\054\uff6d\001\002\000\020\003\uffcc\004\uffcc\005\uffcc" +
    "\006\uffcc\011\uffcc\012\uffcc\014\uffcc\001\002\000\024\020" +
    "\166\037\115\055\144\056\125\057\076\060\077\061\061" +
    "\062\024\063\106\001\002\000\024\020\166\037\115\055" +
    "\144\056\125\057\076\060\077\061\061\062\024\063\106" +
    "\001\002\000\056\003\uff6f\004\uff6f\005\uff6f\006\uff6f\010" +
    "\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\016\uff6f\021\uff6f" +
    "\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050" +
    "\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\001\002\000\062" +
    "\003\uff84\004\uff84\005\uff84\006\uff84\010\uff84\011\uff84\012" +
    "\uff84\013\uff84\014\uff84\016\uff84\021\uff84\040\uff84\041\uff84" +
    "\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050" +
    "\uff84\051\uff84\052\uff84\053\uff84\054\uff84\001\002\000\064" +
    "\003\uff79\004\uff79\005\uff79\006\uff79\007\210\010\uff79\011" +
    "\uff79\012\uff79\013\uff79\014\uff79\016\uff79\021\uff79\040\uff79" +
    "\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047" +
    "\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\001\002" +
    "\000\024\020\166\037\115\055\144\056\125\057\076\060" +
    "\077\061\061\062\024\063\106\001\002\000\004\010\212" +
    "\001\002\000\064\003\uff7b\004\uff7b\005\uff7b\006\uff7b\010" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\016\uff7b\017\uff7b" +
    "\021\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045" +
    "\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b" +
    "\054\uff7b\001\002\000\056\003\uff6e\004\uff6e\005\uff6e\006" +
    "\uff6e\010\uff6e\011\uff6e\012\uff6e\013\uff6e\014\uff6e\016\uff6e" +
    "\021\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047" +
    "\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\001\002" +
    "\000\024\020\166\037\115\055\144\056\125\057\076\060" +
    "\077\061\061\062\024\063\106\001\002\000\024\020\166" +
    "\037\115\055\144\056\125\057\076\060\077\061\061\062" +
    "\024\063\106\001\002\000\046\003\uff64\004\uff64\005\uff64" +
    "\006\uff64\010\uff64\011\uff64\012\uff64\014\uff64\016\uff64\021" +
    "\uff64\045\217\046\221\047\222\050\220\051\uff64\052\uff64" +
    "\053\uff64\054\uff64\001\002\000\024\020\166\037\115\055" +
    "\144\056\125\057\076\060\077\061\061\062\024\063\106" +
    "\001\002\000\024\020\166\037\115\055\144\056\125\057" +
    "\076\060\077\061\061\062\024\063\106\001\002\000\024" +
    "\020\166\037\115\055\144\056\125\057\076\060\077\061" +
    "\061\062\024\063\106\001\002\000\024\020\166\037\115" +
    "\055\144\056\125\057\076\060\077\061\061\062\024\063" +
    "\106\001\002\000\052\003\uff67\004\uff67\005\uff67\006\uff67" +
    "\010\uff67\011\uff67\012\uff67\014\uff67\016\uff67\021\uff67\042" +
    "\224\043\225\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67" +
    "\052\uff67\053\uff67\054\uff67\001\002\000\024\020\166\037" +
    "\115\055\144\056\125\057\076\060\077\061\061\062\024" +
    "\063\106\001\002\000\024\020\166\037\115\055\144\056" +
    "\125\057\076\060\077\061\061\062\024\063\106\001\002" +
    "\000\056\003\uff6b\004\uff6b\005\uff6b\006\uff6b\010\uff6b\011" +
    "\uff6b\012\uff6b\013\204\014\uff6b\016\uff6b\021\uff6b\042\uff6b" +
    "\043\uff6b\044\203\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051" +
    "\uff6b\052\uff6b\053\uff6b\054\uff6b\001\002\000\056\003\uff6c" +
    "\004\uff6c\005\uff6c\006\uff6c\010\uff6c\011\uff6c\012\uff6c\013" +
    "\204\014\uff6c\016\uff6c\021\uff6c\042\uff6c\043\uff6c\044\203" +
    "\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053" +
    "\uff6c\054\uff6c\001\002\000\052\003\uff68\004\uff68\005\uff68" +
    "\006\uff68\010\uff68\011\uff68\012\uff68\014\uff68\016\uff68\021" +
    "\uff68\042\224\043\225\045\uff68\046\uff68\047\uff68\050\uff68" +
    "\051\uff68\052\uff68\053\uff68\054\uff68\001\002\000\052\003" +
    "\uff66\004\uff66\005\uff66\006\uff66\010\uff66\011\uff66\012\uff66" +
    "\014\uff66\016\uff66\021\uff66\042\224\043\225\045\uff66\046" +
    "\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66\054\uff66" +
    "\001\002\000\052\003\uff69\004\uff69\005\uff69\006\uff69\010" +
    "\uff69\011\uff69\012\uff69\014\uff69\016\uff69\021\uff69\042\224" +
    "\043\225\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052" +
    "\uff69\053\uff69\054\uff69\001\002\000\046\003\uff63\004\uff63" +
    "\005\uff63\006\uff63\010\uff63\011\uff63\012\uff63\014\uff63\016" +
    "\uff63\021\uff63\045\217\046\221\047\222\050\220\051\uff63" +
    "\052\uff63\053\uff63\054\uff63\001\002\000\024\020\166\037" +
    "\115\055\144\056\125\057\076\060\077\061\061\062\024" +
    "\063\106\001\002\000\032\003\uff5f\004\uff5f\005\uff5f\006" +
    "\uff5f\010\uff5f\011\uff5f\012\uff5f\014\uff5f\016\uff5f\021\uff5f" +
    "\053\236\054\uff5f\001\002\000\024\020\166\037\115\055" +
    "\144\056\125\057\076\060\077\061\061\062\024\063\106" +
    "\001\002\000\036\003\uff61\004\uff61\005\uff61\006\uff61\010" +
    "\uff61\011\uff61\012\uff61\014\uff61\016\uff61\021\uff61\051\215" +
    "\052\214\053\uff61\054\uff61\001\002\000\062\003\uff75\004" +
    "\uff75\005\uff75\006\uff75\010\uff75\011\uff75\012\uff75\013\uff75" +
    "\014\uff75\016\uff75\021\uff75\040\uff75\041\uff75\042\uff75\043" +
    "\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75" +
    "\052\uff75\053\uff75\054\uff75\001\002\000\062\003\uff76\004" +
    "\uff76\005\uff76\006\uff76\010\uff76\011\uff76\012\uff76\013\uff76" +
    "\014\uff76\016\uff76\021\uff76\040\uff76\041\uff76\042\uff76\043" +
    "\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76" +
    "\052\uff76\053\uff76\054\uff76\001\002\000\004\021\254\001" +
    "\002\000\006\007\245\021\uff7f\001\002\000\004\021\252" +
    "\001\002\000\004\010\251\001\002\000\064\003\uff7e\004" +
    "\uff7e\005\uff7e\006\uff7e\007\247\010\uff7e\011\uff7e\012\uff7e" +
    "\013\uff7e\014\uff7e\016\uff7e\021\uff7e\040\uff7e\041\uff7e\042" +
    "\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\054\uff7e\001\002\000\004\010" +
    "\250\001\002\000\066\003\uff7c\004\uff7c\005\uff7c\006\uff7c" +
    "\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015" +
    "\uff7c\016\uff7c\021\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052" +
    "\uff7c\053\uff7c\054\uff7c\001\002\000\066\003\uff7d\004\uff7d" +
    "\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013" +
    "\uff7d\014\uff7d\015\uff7d\016\uff7d\021\uff7d\040\uff7d\041\uff7d" +
    "\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050" +
    "\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\001\002\000\024" +
    "\020\166\037\115\055\144\056\125\057\076\060\077\061" +
    "\061\062\024\063\106\001\002\000\056\003\uff71\004\uff71" +
    "\005\uff71\006\uff71\010\uff71\011\uff71\012\uff71\013\uff71\014" +
    "\uff71\016\uff71\021\uff71\042\uff71\043\uff71\044\uff71\045\uff71" +
    "\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054" +
    "\uff71\001\002\000\062\003\uff85\004\uff85\005\uff85\006\uff85" +
    "\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85\016\uff85\021" +
    "\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85" +
    "\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054" +
    "\uff85\001\002\000\006\014\260\016\261\001\002\000\006" +
    "\014\uffbe\016\uffbe\001\002\000\062\003\uffbf\004\uffbf\005" +
    "\uffbf\006\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\016\uffbf\021\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\001\002\000\026\015\165\020\166\037" +
    "\115\055\144\056\125\057\076\060\077\061\061\062\024" +
    "\063\106\001\002\000\062\003\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0" +
    "\021\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\054\uffc0\001\002\000\006\014\uffbd\016\uffbd\001\002\000" +
    "\004\035\264\001\002\000\004\020\265\001\002\000\024" +
    "\020\166\037\115\055\144\056\125\057\076\060\077\061" +
    "\061\062\024\063\106\001\002\000\004\021\267\001\002" +
    "\000\004\012\270\001\002\000\070\003\uff96\004\uff96\005" +
    "\uff96\006\uff96\012\uff96\014\uff96\015\uff96\016\uff96\020\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\032\uff96\033" +
    "\uff96\034\uff96\035\uff96\036\uff96\037\uff96\055\uff96\056\uff96" +
    "\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\001\002\000" +
    "\070\003\uffef\004\uffef\005\uffef\006\uffef\012\uffef\014\uffef" +
    "\015\uffef\016\uffef\020\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062" +
    "\uffef\063\uffef\001\002\000\070\003\uff9f\004\uff9f\005\uff9f" +
    "\006\uff9f\012\uff9f\014\uff9f\015\uff9f\016\uff9f\020\uff9f\024" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\001\002\000\070" +
    "\003\uffee\004\uffee\005\uffee\006\uffee\012\uffee\014\uffee\015" +
    "\uffee\016\uffee\020\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee" +
    "\063\uffee\001\002\000\012\003\116\004\112\005\067\006" +
    "\065\001\002\000\070\003\uffed\004\uffed\005\uffed\006\uffed" +
    "\012\uffed\014\uffed\015\uffed\016\uffed\020\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\055\uffed\056\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\063\uffed\001\002\000\070\003\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\012\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\020\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\001\002\000\066\003\uffb7\004\uffb7\005\uffb7\006\uffb7\012" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\032\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\001\002\000\024\020\166\037\115\055" +
    "\144\056\125\057\076\060\077\061\061\062\024\063\106" +
    "\001\002\000\004\021\302\001\002\000\042\012\136\014" +
    "\142\015\031\020\121\032\107\034\143\035\130\036\072" +
    "\037\115\055\144\056\125\057\076\060\077\061\061\062" +
    "\024\063\106\001\002\000\066\003\uff98\004\uff98\005\uff98" +
    "\006\uff98\012\uff98\014\uff98\015\uff98\016\uff98\020\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\uff98\030\uff98\032\uff98\034\uff98" +
    "\035\uff98\036\uff98\037\uff98\055\uff98\056\uff98\057\uff98\060" +
    "\uff98\061\uff98\062\uff98\063\uff98\001\002\000\004\062\024" +
    "\001\002\000\020\003\uffb1\004\uffb1\005\uffb1\006\uffb1\011" +
    "\uffb1\012\uffb1\014\uffb1\001\002\000\004\007\311\001\002" +
    "\000\064\003\uff81\004\uff81\005\uff81\006\uff81\007\uff81\010" +
    "\uff81\011\uff81\012\uff81\013\uff81\014\uff81\016\uff81\021\uff81" +
    "\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046" +
    "\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81" +
    "\001\002\000\064\003\uff7f\004\uff7f\005\uff7f\006\uff7f\007" +
    "\245\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\016\uff7f" +
    "\021\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045" +
    "\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f" +
    "\054\uff7f\001\002\000\026\010\251\020\166\037\115\055" +
    "\144\056\125\057\076\060\077\061\061\062\024\063\106" +
    "\001\002\000\006\007\247\015\165\001\002\000\062\003" +
    "\uff82\004\uff82\005\uff82\006\uff82\010\uff82\011\uff82\012\uff82" +
    "\013\uff82\014\uff82\016\uff82\021\uff82\040\uff82\041\uff82\042" +
    "\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82" +
    "\051\uff82\052\uff82\053\uff82\054\uff82\001\002\000\004\010" +
    "\315\001\002\000\064\003\uff80\004\uff80\005\uff80\006\uff80" +
    "\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80\016" +
    "\uff80\021\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80" +
    "\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053" +
    "\uff80\054\uff80\001\002\000\062\003\uff83\004\uff83\005\uff83" +
    "\006\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\016" +
    "\uff83\021\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83" +
    "\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053" +
    "\uff83\054\uff83\001\002\000\072\003\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\001\002" +
    "\000\024\020\166\037\115\055\144\056\125\057\076\060" +
    "\077\061\061\062\024\063\106\001\002\000\004\021\322" +
    "\001\002\000\042\012\136\014\142\015\031\020\121\032" +
    "\326\034\143\035\332\036\325\037\115\055\144\056\125" +
    "\057\076\060\077\061\061\062\024\063\106\001\002\000" +
    "\004\033\uffa9\001\002\000\004\033\376\001\002\000\004" +
    "\020\347\001\002\000\004\020\340\001\002\000\004\033" +
    "\uffa7\001\002\000\066\003\uff9b\004\uff9b\005\uff9b\006\uff9b" +
    "\012\uff9b\014\uff9b\015\uff9b\016\uff9b\020\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\032\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\001\002\000\004\033\uffa8\001\002" +
    "\000\004\020\334\001\002\000\070\003\uffaf\004\uffaf\005" +
    "\uffaf\006\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf\020\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\032\uffaf\033" +
    "\uffaa\034\uffaf\035\uffaf\036\uffaf\037\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\001\002\000" +
    "\024\020\166\037\115\055\144\056\125\057\076\060\077" +
    "\061\061\062\024\063\106\001\002\000\004\021\336\001" +
    "\002\000\042\012\136\014\142\015\031\020\121\032\326" +
    "\034\143\035\332\036\325\037\115\055\144\056\125\057" +
    "\076\060\077\061\061\062\024\063\106\001\002\000\004" +
    "\033\uff97\001\002\000\024\020\166\037\115\055\144\056" +
    "\125\057\076\060\077\061\061\062\024\063\106\001\002" +
    "\000\004\021\342\001\002\000\042\012\136\014\142\015" +
    "\031\020\121\032\326\034\143\035\332\036\325\037\115" +
    "\055\144\056\125\057\076\060\077\061\061\062\024\063" +
    "\106\001\002\000\004\033\344\001\002\000\042\012\136" +
    "\014\142\015\031\020\121\032\326\034\143\035\332\036" +
    "\325\037\115\055\144\056\125\057\076\060\077\061\061" +
    "\062\024\063\106\001\002\000\004\033\uff99\001\002\000" +
    "\066\003\uff9a\004\uff9a\005\uff9a\006\uff9a\012\uff9a\014\uff9a" +
    "\015\uff9a\016\uff9a\020\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\032\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a" +
    "\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063" +
    "\uff9a\001\002\000\040\003\353\004\112\005\067\006\065" +
    "\012\uff91\020\121\027\354\037\115\055\144\056\125\057" +
    "\076\060\077\061\061\062\024\063\106\001\002\000\010" +
    "\012\uff8a\014\uff8a\021\uff8a\001\002\000\004\012\uff8e\001" +
    "\002\000\006\012\uff8f\014\366\001\002\000\006\021\373" +
    "\062\ufff4\001\002\000\012\003\116\004\112\005\067\006" +
    "\065\001\002\000\004\012\357\001\002\000\004\012\uff90" +
    "\001\002\000\026\012\uff59\020\166\037\115\055\144\056" +
    "\125\057\076\060\077\061\061\062\024\063\106\001\002" +
    "\000\004\012\362\001\002\000\004\012\uff58\001\002\000" +
    "\026\020\121\021\uff8d\037\115\055\144\056\125\057\076" +
    "\060\077\061\061\062\024\063\106\001\002\000\004\021" +
    "\uff8c\001\002\000\004\021\370\001\002\000\006\014\366" +
    "\021\uff8b\001\002\000\024\020\121\037\115\055\144\056" +
    "\125\057\076\060\077\061\061\062\024\063\106\001\002" +
    "\000\010\012\uff89\014\uff89\021\uff89\001\002\000\042\012" +
    "\136\014\142\015\031\020\121\032\326\034\143\035\332" +
    "\036\325\037\115\055\144\056\125\057\076\060\077\061" +
    "\061\062\024\063\106\001\002\000\004\033\uff93\001\002" +
    "\000\066\003\uff95\004\uff95\005\uff95\006\uff95\012\uff95\014" +
    "\uff95\015\uff95\016\uff95\020\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\032\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95" +
    "\063\uff95\001\002\000\042\012\136\014\142\015\031\020" +
    "\121\032\326\034\143\035\332\036\325\037\115\055\144" +
    "\056\125\057\076\060\077\061\061\062\024\063\106\001" +
    "\002\000\004\033\uff92\001\002\000\066\003\uff94\004\uff94" +
    "\005\uff94\006\uff94\012\uff94\014\uff94\015\uff94\016\uff94\020" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\032\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\055\uff94\056\uff94\057" +
    "\uff94\060\uff94\061\uff94\062\uff94\063\uff94\001\002\000\042" +
    "\012\136\014\142\015\031\020\121\032\107\034\143\035" +
    "\130\036\072\037\115\055\144\056\125\057\076\060\077" +
    "\061\061\062\024\063\106\001\002\000\066\003\uffb3\004" +
    "\uffb3\005\uffb3\006\uffb3\012\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\020\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\032" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\001\002\000" +
    "\040\003\u0101\004\112\005\067\006\065\012\uff91\020\121" +
    "\027\354\037\115\055\144\056\125\057\076\060\077\061" +
    "\061\062\024\063\106\001\002\000\006\021\u0108\062\ufff4" +
    "\001\002\000\004\012\u0103\001\002\000\026\012\uff59\020" +
    "\166\037\115\055\144\056\125\057\076\060\077\061\061" +
    "\062\024\063\106\001\002\000\004\012\u0105\001\002\000" +
    "\026\020\121\021\uff8d\037\115\055\144\056\125\057\076" +
    "\060\077\061\061\062\024\063\106\001\002\000\004\021" +
    "\u0107\001\002\000\042\012\136\014\142\015\031\020\121" +
    "\032\107\034\143\035\130\036\072\037\115\055\144\056" +
    "\125\057\076\060\077\061\061\062\024\063\106\001\002" +
    "\000\042\012\136\014\142\015\031\020\121\032\107\034" +
    "\143\035\130\036\072\037\115\055\144\056\125\057\076" +
    "\060\077\061\061\062\024\063\106\001\002\000\024\020" +
    "\166\037\115\055\144\056\125\057\076\060\077\061\061" +
    "\062\024\063\106\001\002\000\026\003\uff5c\004\uff5c\005" +
    "\uff5c\006\uff5c\010\uff5c\011\uff5c\012\uff5c\014\uff5c\016\uff5c" +
    "\021\uff5c\001\002\000\070\003\uffa0\004\uffa0\005\uffa0\006" +
    "\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\020\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\063\uffa0\001\002\000\016\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\001\002" +
    "\000\004\002\001\001\002\000\022\002\uffe6\003\uffe6\012" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\024\003\013\014\021\015\015\016\003\017" +
    "\011\020\017\021\014\022\007\023\020\001\001\000\014" +
    "\017\u010d\020\017\021\014\022\007\023\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u010b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\024\001\001\000\002" +
    "\001\001\000\004\024\026\001\001\000\004\132\027\001" +
    "\001\000\002\001\001\000\030\020\041\021\014\022\007" +
    "\025\036\026\042\027\037\030\040\035\035\036\031\042" +
    "\033\045\034\001\001\000\004\133\056\001\001\000\006" +
    "\041\053\045\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\020\041" +
    "\021\014\022\007\027\052\030\040\035\035\036\031\042" +
    "\033\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\046\037\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\116\004\065\005\144\006" +
    "\121\007\101\010\073\011\103\012\074\013\137\020\017" +
    "\021\014\022\007\023\122\045\070\046\107\047\134\050" +
    "\131\051\130\052\077\053\110\054\112\056\132\057\100" +
    "\060\133\061\057\062\061\063\136\065\125\067\116\070" +
    "\072\077\104\100\123\101\067\106\140\107\117\110\063" +
    "\111\113\124\102\125\062\001\001\000\006\130\u010a\131" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\130\376\131\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\305\007\101\010\073\011\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\004\065\012\074\013\162\077\104\100\123\101" +
    "\067\106\140\107\167\110\156\111\170\112\163\113\166" +
    "\114\161\115\200\116\173\117\174\120\175\121\157\122" +
    "\171\123\160\124\176\125\062\127\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\303\006\121\007\101" +
    "\010\073\011\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\112\004\065\005\144\006\121\007\101\010\073\011" +
    "\103\012\074\013\137\020\017\021\014\022\007\023\122" +
    "\045\070\050\276\051\130\052\077\053\110\054\112\056" +
    "\132\057\100\060\133\061\057\062\061\063\136\065\125" +
    "\067\116\070\072\077\104\100\123\101\067\106\140\107" +
    "\117\110\063\111\113\124\102\125\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\130\271\131\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\004\065" +
    "\012\074\013\137\045\070\054\262\056\132\057\100\060" +
    "\133\061\057\062\061\063\136\065\125\067\116\070\072" +
    "\077\104\100\123\101\067\106\140\107\117\110\063\111" +
    "\113\124\102\125\062\001\001\000\002\001\001\000\012" +
    "\013\150\031\147\032\146\033\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\004\065\012\074\013\162\034\201\043\177\077" +
    "\104\100\123\101\067\106\140\107\167\110\156\111\170" +
    "\112\163\113\166\114\161\115\200\116\173\117\174\120" +
    "\175\121\157\122\171\123\160\124\176\125\062\127\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\004\065\012\074\013\162\034\255" +
    "\043\177\044\254\077\104\100\123\101\067\106\140\107" +
    "\167\110\156\111\170\112\163\113\166\114\161\115\200" +
    "\116\173\117\174\120\175\121\157\122\171\123\160\124" +
    "\176\125\062\127\172\001\001\000\070\004\065\006\242" +
    "\007\101\010\073\011\103\012\074\013\162\077\104\100" +
    "\123\101\067\106\140\107\167\110\156\111\170\112\163" +
    "\113\166\114\161\115\200\116\173\117\174\120\175\121" +
    "\157\122\171\123\160\124\176\125\062\127\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\065" +
    "\012\206\013\162\077\104\100\123\101\067\106\205\107" +
    "\167\110\156\111\170\112\212\113\166\114\161\001\001" +
    "\000\034\004\065\012\206\013\162\077\104\100\123\101" +
    "\067\106\205\107\167\110\156\111\170\112\204\113\166" +
    "\114\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\004\065\012\074\013\162\077\104" +
    "\100\123\101\067\106\140\107\167\110\156\111\170\112" +
    "\163\113\166\114\161\115\200\116\173\117\174\120\175" +
    "\121\157\122\171\123\160\124\176\125\062\127\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\065\012\206\013\162\077\104\100\123\101" +
    "\067\106\205\107\167\110\156\111\170\112\163\113\166" +
    "\114\161\115\200\116\173\117\232\001\001\000\042\004" +
    "\065\012\206\013\162\077\104\100\123\101\067\106\205" +
    "\107\167\110\156\111\170\112\163\113\166\114\161\115" +
    "\200\116\173\117\215\001\001\000\002\001\001\000\040" +
    "\004\065\012\206\013\162\077\104\100\123\101\067\106" +
    "\205\107\167\110\156\111\170\112\163\113\166\114\161" +
    "\115\200\116\231\001\001\000\040\004\065\012\206\013" +
    "\162\077\104\100\123\101\067\106\205\107\167\110\156" +
    "\111\170\112\163\113\166\114\161\115\200\116\230\001" +
    "\001\000\040\004\065\012\206\013\162\077\104\100\123" +
    "\101\067\106\205\107\167\110\156\111\170\112\163\113" +
    "\166\114\161\115\200\116\227\001\001\000\040\004\065" +
    "\012\206\013\162\077\104\100\123\101\067\106\205\107" +
    "\167\110\156\111\170\112\163\113\166\114\161\115\200" +
    "\116\222\001\001\000\002\001\001\000\036\004\065\012" +
    "\206\013\162\077\104\100\123\101\067\106\205\107\167" +
    "\110\156\111\170\112\163\113\166\114\161\115\226\001" +
    "\001\000\036\004\065\012\206\013\162\077\104\100\123" +
    "\101\067\106\205\107\167\110\156\111\170\112\163\113" +
    "\166\114\161\115\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\065\012\206\013\162" +
    "\077\104\100\123\101\067\106\205\107\167\110\156\111" +
    "\170\112\163\113\166\114\161\115\200\116\173\117\174" +
    "\120\175\121\234\001\001\000\002\001\001\000\044\004" +
    "\065\012\206\013\162\077\104\100\123\101\067\106\205" +
    "\107\167\110\156\111\170\112\163\113\166\114\161\115" +
    "\200\116\173\117\174\120\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\104\243\105\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\065\012\206\013\162" +
    "\077\104\100\123\101\067\106\205\107\167\110\156\111" +
    "\170\112\252\113\166\114\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\004\065\012\074\013\162\034\261" +
    "\043\177\077\104\100\123\101\067\106\140\107\167\110" +
    "\156\111\170\112\163\113\166\114\161\115\200\116\173" +
    "\117\174\120\175\121\157\122\171\123\160\124\176\125" +
    "\062\127\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\004\065\012" +
    "\074\013\162\077\104\100\123\101\067\106\140\107\167" +
    "\110\156\111\170\112\163\113\166\114\161\115\200\116" +
    "\173\117\174\120\175\121\157\122\171\123\160\124\176" +
    "\125\062\127\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\275\006\121\007\101\010" +
    "\073\011\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\004\065\012\074\013\162\077" +
    "\104\100\123\101\067\106\140\107\167\110\156\111\170" +
    "\112\163\113\166\114\161\115\200\116\173\117\174\120" +
    "\175\121\157\122\171\123\160\124\176\125\062\127\300" +
    "\001\001\000\002\001\001\000\060\004\065\012\074\013" +
    "\137\045\070\054\302\056\132\057\100\060\133\061\057" +
    "\062\061\063\136\065\125\067\116\070\072\077\104\100" +
    "\123\101\067\106\140\107\117\110\063\111\113\124\102" +
    "\125\062\001\001\000\002\001\001\000\012\013\150\031" +
    "\304\032\146\033\145\001\001\000\002\001\001\000\010" +
    "\102\307\103\306\105\311\001\001\000\002\001\001\000" +
    "\006\104\315\105\245\001\001\000\060\004\065\012\074" +
    "\013\162\077\104\100\123\101\067\106\140\107\167\110" +
    "\156\111\170\112\163\113\166\114\161\115\200\116\173" +
    "\117\174\120\175\121\157\122\171\123\160\124\176\125" +
    "\062\127\313\001\001\000\004\043\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\004\065\012\074\013\162" +
    "\077\104\100\123\101\067\106\140\107\167\110\156\111" +
    "\170\112\163\113\166\114\161\115\200\116\173\117\174" +
    "\120\175\121\157\122\171\123\160\124\176\125\062\127" +
    "\320\001\001\000\002\001\001\000\070\004\065\012\074" +
    "\013\137\045\070\054\327\055\323\056\332\057\100\060" +
    "\133\061\057\062\061\063\136\064\322\065\125\066\330" +
    "\067\116\070\072\071\326\077\104\100\123\101\067\106" +
    "\140\107\117\110\063\111\113\124\102\125\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\004" +
    "\065\012\074\013\162\077\104\100\123\101\067\106\140" +
    "\107\167\110\156\111\170\112\163\113\166\114\161\115" +
    "\200\116\173\117\174\120\175\121\157\122\171\123\160" +
    "\124\176\125\062\127\334\001\001\000\002\001\001\000" +
    "\070\004\065\012\074\013\137\045\070\054\302\055\336" +
    "\056\332\057\100\060\133\061\057\062\061\063\136\064" +
    "\322\065\125\066\330\067\116\070\072\071\326\077\104" +
    "\100\123\101\067\106\140\107\117\110\063\111\113\124" +
    "\102\125\062\001\001\000\002\001\001\000\060\004\065" +
    "\012\074\013\162\077\104\100\123\101\067\106\140\107" +
    "\167\110\156\111\170\112\163\113\166\114\161\115\200" +
    "\116\173\117\174\120\175\121\157\122\171\123\160\124" +
    "\176\125\062\127\340\001\001\000\002\001\001\000\070" +
    "\004\065\012\074\013\137\045\070\054\327\055\342\056" +
    "\332\057\100\060\133\061\057\062\061\063\136\064\322" +
    "\065\125\066\330\067\116\070\072\071\326\077\104\100" +
    "\123\101\067\106\140\107\117\110\063\111\113\124\102" +
    "\125\062\001\001\000\002\001\001\000\070\004\065\012" +
    "\074\013\137\045\070\054\345\055\344\056\332\057\100" +
    "\060\133\061\057\062\061\063\136\064\322\065\125\066" +
    "\330\067\116\070\072\071\326\077\104\100\123\101\067" +
    "\106\140\107\117\110\063\111\113\124\102\125\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\004\065" +
    "\005\144\006\121\007\101\010\073\011\103\012\074\013" +
    "\162\052\350\061\347\072\354\073\355\076\351\077\104" +
    "\100\123\101\067\106\140\107\117\110\063\111\113\124" +
    "\102\125\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\303\006" +
    "\121\007\101\010\073\011\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\004\065\012\074\013\162\077" +
    "\104\100\123\101\067\106\140\107\167\110\156\111\170" +
    "\112\163\113\166\114\161\115\200\116\173\117\174\120" +
    "\175\121\157\122\171\123\160\124\176\125\062\126\357" +
    "\127\360\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\065\012\074\013\162\061\347\074\363\075\362" +
    "\076\364\077\104\100\123\101\067\106\140\107\117\110" +
    "\063\111\113\124\102\125\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\065\012" +
    "\074\013\162\061\366\077\104\100\123\101\067\106\140" +
    "\107\117\110\063\111\113\124\102\125\062\001\001\000" +
    "\002\001\001\000\070\004\065\012\074\013\137\045\070" +
    "\054\371\055\370\056\332\057\100\060\133\061\057\062" +
    "\061\063\136\064\322\065\125\066\330\067\116\070\072" +
    "\071\326\077\104\100\123\101\067\106\140\107\117\110" +
    "\063\111\113\124\102\125\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\004\065\012\074\013\137\045" +
    "\070\054\374\055\373\056\332\057\100\060\133\061\057" +
    "\062\061\063\136\064\322\065\125\066\330\067\116\070" +
    "\072\071\326\077\104\100\123\101\067\106\140\107\117" +
    "\110\063\111\113\124\102\125\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\004\065\012\074\013\137" +
    "\045\070\054\345\056\132\057\100\060\133\061\057\062" +
    "\061\063\136\065\125\067\116\070\072\077\104\100\123" +
    "\101\067\106\140\107\117\110\063\111\113\124\102\125" +
    "\062\001\001\000\002\001\001\000\056\004\065\005\144" +
    "\006\121\007\101\010\073\011\103\012\074\013\162\052" +
    "\350\061\347\072\u0101\073\355\076\351\077\104\100\123" +
    "\101\067\106\140\107\117\110\063\111\113\124\102\125" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\004\065\012\074\013\162\077\104\100\123\101\067\106" +
    "\140\107\167\110\156\111\170\112\163\113\166\114\161" +
    "\115\200\116\173\117\174\120\175\121\157\122\171\123" +
    "\160\124\176\125\062\126\u0103\127\360\001\001\000\002" +
    "\001\001\000\042\004\065\012\074\013\162\061\347\074" +
    "\u0105\075\362\076\364\077\104\100\123\101\067\106\140" +
    "\107\117\110\063\111\113\124\102\125\062\001\001\000" +
    "\002\001\001\000\060\004\065\012\074\013\137\045\070" +
    "\054\371\056\132\057\100\060\133\061\057\062\061\063" +
    "\136\065\125\067\116\070\072\077\104\100\123\101\067" +
    "\106\140\107\117\110\063\111\113\124\102\125\062\001" +
    "\001\000\060\004\065\012\074\013\137\045\070\054\374" +
    "\056\132\057\100\060\133\061\057\062\061\063\136\065" +
    "\125\067\116\070\072\077\104\100\123\101\067\106\140" +
    "\107\117\110\063\111\113\124\102\125\062\001\001\000" +
    "\056\004\065\012\074\013\162\077\104\100\123\101\067" +
    "\106\140\107\167\110\156\111\170\112\163\113\166\114" +
    "\161\115\200\116\173\117\174\120\175\121\157\122\171" +
    "\123\u0109\124\176\125\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
             StringBuilder buffer;
             PrintText output=new PrintText();           
             public ArrayList<PrintText> error= new ArrayList <PrintText>();
             int cont_errori=0;
             boolean fatal=false;
             Scanner scan= (Scanner)this.getScanner();
            
             
           
           public void print_error() throws IOException
           {
                Iterator<PrintText> err_list=error.iterator();
                
                Support.writeFileErr("ERRORI TROVATI: "+cont_errori+"\n");
                Support.countExit(cont_errori);
                 while(err_list.hasNext())
                {
                     PrintText stampa=err_list.next();
                     Support.writeFileErr("\n"+stampa.getMessage()+"OUTPUT ERROR:\n"+stampa.getString()+"\nRiga n."+stampa.getPos()+"\n");
                                                 
                 }  
           }
          
         public void ordina_list()
         {
             Collections.sort(error);
         }
          public boolean find(PrintText A)
            {
               Iterator<PrintText> I=error.iterator();
               while(I.hasNext())
                {
                     if(I.next().equals_elem(A))
                         return true;
                     
                 }
               return false;
            }

           public int remove()
          {
             int pos=scan.getPos_vir();
              Iterator<PrintText> I=error.iterator();
               while(I.hasNext())
                {
                     if(I.next().getPos()>=pos)
                      {
                       I.remove();
                        return 0;
                        }
                 }
                return 0;
          }

          public void calcola_par()
         {
             int num_par=scan.countBrace2;
             PrintText pt=new PrintText();
             
            if(num_par>0 || num_par<0)
            {
              if(num_par>0)
              {
                pt.setString("Parentesi in difetto");
                if(scan.get_close_par()!=0)
                  pt.setPos(scan.get_close_par());
                else
                    pt.setPos(scan.get_open_par());
               error.add(pt); 
              }
              else
              {
               pt.setString("Parentesi in eccesso");
               pt.setPos(scan.get_open_par());
               
               error.add(pt);
              }
            }
               
                
         }
             public int returnLine()
             {
                return ((Scanner)this.getScanner()).getLine();
             }
              

             public void report_error(String message, int line)
            {
                buffer = new StringBuilder(message);
                buffer.append("Output: \n");
                cont_errori++;
               try { 
               output = scan.text(line); 
                
                output.setMessage(message);
                 error.add(output);
                }catch (IOException ex) {
                        ex.printStackTrace();
                   }

              }


             public void report_error(String message, Object info)
             {
                   buffer = new StringBuilder(message);
                buffer.append("Output: \n");
               cont_errori++;
               int pos=scan.getPos_vir();
                
                   
                if(info==null)
                {
                 
                   try {
                     
                        output = scan.text();
                       
                         if(!fatal)
                         {
                           output.setMessage(message);
                            error.add(output);      
                         }
                         else
                         {
                           output.setMessage(message);
                          if(output.getPos()>=pos)
                             output.setString("");
                           fatal=false;
                           error.add(output);

                           
                         }
                        
                   }catch (IOException ex) {
                        ex.printStackTrace();
                   }
                   
                }else{
                   if(info instanceof Obj)
                   {
                     
                     
                    try {
                           output = scan.text();
                      
                            output.setMessage(message);
                           error.add(output);   
                                                 
                    }catch(IOException ex)
                       {
                        ex.printStackTrace();
                       }
                    }
                  
                      }          
               
               
                    
             }
             
            public void syntax_error(Symbol cur_token)
            {
               report_error("ERRORE LESSICALE/SINTATTICO \n",null);              
            }
            
            
            public void warning(String message,Obj check) throws IOException
            {
                  report_error(message,check);
            }

         public void report_fatal_error(String message, Object info)
         {

            fatal=true;            
            report_error("FATAL ERROR: IMPOSSIBILE COMPLETARE L'ESECUZIONE, POICHE' E' STATA RAGGIUNTA LA FINE DEL FILE PREMATURAMENTE!",null);
            CUP$parser$actions.FlagSyn = true;
         }
         public void report_fatal_error(String message)
        {
           report_error(message,null);
            
        }           


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



String ArrActTStore = "";
String ArrActTemp = "";
String TRAD = "";
String STArr = "";
static String RegFP;
boolean flagP1 = true;
boolean flagP2 = true;
static boolean flagWarn = false;
int livP = 0;
static String Err_War = "";
static boolean checkFlag = false;
static boolean FlagSyn = false;
String typeDeclErr; //variabile che ci permette di recuperare il tipo in caso di errori sintattici
boolean sintErr = false; // flag che ci permette di capire se si Ã¨ verificato o meno un errore sintattico


static int countReg = 0;
static int countRegFP = 0;
static int countRTemp = 0;
int countCl = 1;

ArrayList <String> vTrad = new ArrayList();
ArrayList <String> dichRecup = new ArrayList(); //struttura che permette di recuperare una dichiarazione
                                                //nel caso in cui, in precedenza, ci sia stato un errore sintattico
                                                //legato alla mancanza del ";"
HashMap <String,String> TabTrad = new HashMap();


public void structProg(int levP, boolean flag, String trad) throws IOException{

   if(levP == 1){

      if(flag == true){
        Support.writeFile(true,"\n.data\n\n");        
      }
        Support.writeFile(true,trad+"\n");
        ListIterator lsT = dichRecup.listIterator();
          while(lsT.hasNext()){
            Support.writeFile(true,lsT.next().toString()+"\n");            
          } 
        flagP1 = false;
        
   }else if(levP == 2){

      if(flag == true){
          Support.writeFile(true,"\n.code\n\n");
              
          ListIterator lsT = vTrad.listIterator();
          while(lsT.hasNext()){
            Support.writeFile(true,lsT.next().toString()+"\n");            
          }   
      }
    Support.writeFile(true,trad);    
    flagP2 = false;
   }else{
    Support.writeFile(false,"\n\nend\n");   
   }   
}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expression ::= assignment_expression 
            {
              Obj RESULT = null;
		int assexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj assex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = assex; 
              CUP$parser$result = new java_cup.runtime.Symbol(85/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expression_opt ::= expression 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = espr; 
              CUP$parser$result = new java_cup.runtime.Symbol(84/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expression_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(84/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // left_hand_side ::= array_access 
            {
              Obj RESULT = null;
		int arraccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int arraccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj arracc = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                      String T = "";
                                      if(arracc.tipo.equals("INTEGER")){
                                         T = "SW"; 
                                      }else if(arracc.tipo.equals("DOUBLE")){
                                         T = "S.D"; 
                                      }else{
                                        
                                         parser.report_error("ERROR: tipo non supportato!",arracc);
                                      }
                                      
                                      String D = arracc.testo.substring(0, arracc.testo.indexOf("["));
                                      Record rec = SymbolTable.checkVScope(D);

                                      if(rec.getTabRegArr().containsKey(arracc.testo)){                                         
                                            STArr = T+" "+"REGT "+"0("+rec.getTabRegArr().get(arracc.testo)+")";                                       
                                      }else{ 
                                        
                                            if(TabTrad.containsKey("ARRAY_ACCESS_I")){
                                         
                                                TRAD = T+" "+TabTrad.get("ARRAY_ACCESS_I");
                                                TabTrad.put("ARRAY_ACCESS_ASS",TRAD);
                                                TabTrad.remove("ARRAY_ACCESS_I");
                                                arracc.genere = "ARRAY_ACCESS_I";

                                            }else if(TabTrad.containsKey("ARRAY_ACCESS")){
                                        
                                                TRAD = TabTrad.get("ARRAY_ACCESS");
                                                if(arracc.tipo.equals("DOUBLE")){
                                                    TRAD = TRAD.replace(TRAD.substring(TRAD.lastIndexOf("\n$f")+1,TRAD.length()),
                                                                    T+" "+TRAD.substring(TRAD.lastIndexOf("\n$f")+1,TRAD.length()));
                                                }else{
                                                    TRAD = TRAD.replace(TRAD.substring(TRAD.lastIndexOf("\n$t")+1,TRAD.length()),
                                                                    T+" "+TRAD.substring(TRAD.lastIndexOf("\n$t")+1,TRAD.length()));
                                                }                                    
                                        
                                            TabTrad.put("ARRAY_ACCESS_ASS",TRAD);
                                            arracc.genere = "ARRAY_ACCESS";
                                            }
                                      }

                                      RESULT = new Obj(arracc.testo,arracc.tipo,arracc.genere); 
                                     
              CUP$parser$result = new java_cup.runtime.Symbol(83/*left_hand_side*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // left_hand_side ::= name 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                            if(sintErr == true){
                                    SymbolTable.addTb(nome.testo);
                            }
                            Record rec = SymbolTable.checkVScope(nome.testo); 

                            if(checkFlag == true){ 
                                
                                parser.report_error(Err_War,nome);
                                checkFlag = false;                               
                                
                                String regRandom = "$s"+countReg;                                
                                SymbolTable.getTable().put(nome.testo,new Record("INTEGER",nome.testo,regRandom,0));
                                rec = SymbolTable.checkVScope(nome.testo);
                                countReg++;

                            }
                           
                            nome.tipo = rec.getType();
                                                        
                            RESULT = new Obj(nome.testo,nome.tipo,"VARIABILE"); 
                            RESULT = nome;
                           
              CUP$parser$result = new java_cup.runtime.Symbol(83/*left_hand_side*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // assignment ::= left_hand_side EQ assignment_expression 
            {
              Obj RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj lhs = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int assesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj assespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                        String TR;
                                                                        String valueErr;
                                                                        if(sintErr == true){                                                                                                                                                          
                                                                              Record rec = SymbolTable.checkVScope(lhs.testo);
                                                                              rec.setValue(assespr.testo);

                                                                              lhs.tipo = CheckClass.checkTypeA(typeDeclErr,assespr.tipo,lhs.testo);

                                                                              if(checkFlag == true ){                                                                
                                                                                    parser.report_error(Err_War,lhs);
                                                                                    checkFlag = false;

                                                                                    if(lhs.tipo.equals("INTEGER")){
                                                                                        valueErr = assespr.testo.substring(assespr.testo.indexOf("=")+2,assespr.testo.indexOf("."));
                                                                                        rec.setValue(valueErr);                                                                     
                                                                                    }else{
                                                                                        //CAPIRE COSA FARE IN CASI COME QUESTI
                                                                                    }

                                                                              }else if(flagWarn == true){
                                                                                    parser.report_error(Err_War,lhs);
                                                                                    flagWarn = false;
                                                                              }
                                                                              
                                                                              rec.setType(lhs.tipo);
                                                                              TR = Traduzione.createReg(lhs.tipo,lhs.testo);
                                                                              vTrad.add(TR);
                                                                              
                                                                              TRAD = Traduzione.tradDecl(lhs.tipo,lhs.testo);
                                                                              dichRecup.add(TRAD); 
                                                                              RESULT = new Obj("");
                                                                        }else{
                                                                                                    
                                                                       if(lhs.testo.contains("[") && lhs.testo.contains("]")){
                                                                                               
                                                                         String var = lhs.testo.substring(0,lhs.testo.indexOf("["));
                                                                                                
                                                                         Record rec = SymbolTable.checkVScope(var);

                                                                         int n1 = lhs.testo.indexOf("[");
                                                                         int n2 = lhs.testo.indexOf("]");
                                                                                                
                                                                         String num = lhs.testo.substring(n1+1,n2);
                                                                                                                                                                                        
                                                                         CheckClass.checkTypeA(lhs.tipo,assespr.tipo,assespr.testo);
                                                                         if(checkFlag == true){   
                                                                          
                                                                               parser.report_error(Err_War,lhs);
                                                                               checkFlag = false;
                                                                         }
                                                                         
                                                                                                    
                                                                         if(lhs.genere.equals("ARRAY_ACCESS_I")){                                                                                                  
                                                                             int ind = Support.changeStrInt(num);
                                                                             boolean fg = rec.setArrayList(assespr.testo, ind);

                                                                             if(flagWarn == true){                                                                                                                                                                        
                                                                                    parser.warning(Err_War,lhs);
                                                                                    flagWarn = false;
                                                                             }
  
                                                                             if(fg==true){
                                                                                rec.remElem(ind+1);
                                                                             }
                                                                         }
                                                                          
                                                                         if(rec.getTabRegArr().containsKey(lhs.testo)){                                                                             
                                                                              
                                                                             if(lhs.tipo.equals("INTEGER")){
                                                                                
                                                                                if(assespr.genere.equals("ESPRESSIONE")){                                                                                  
                                                                                  String  T = "$t"+countRTemp;                   
                                                                                  assespr.testo = assespr.testo.replace("RIS",T);                                                                                  
                                                                                  TRAD = assespr.testo+"\n"+STArr.replace("REGT",T);                                                                                  
                                                                                  countRTemp++;              
                                                                                }else if(assespr.genere.equals("VARIABILE")){ 
                 
                                                                                  Record rec2 = SymbolTable.checkVScope(assespr.testo);
                                                                                  TRAD = STArr.replace("REGT",rec2.getRegister());  
                                                                                             
                                                                                }else if(assespr.genere.equals("ARRAY_ACCESS")){
                                                                                  
                                                                                    if(rec.getTabRegArr().containsValue(assespr.testo)){
                                                                                       TRAD = STArr.replace("REGT",assespr.testo);                                                                                       
                                                                                    }else{                   
                                                                                      int m = assespr.testo.lastIndexOf(" $t");
                                                                                      String MT = assespr.testo.substring(m+1,m+4);
                                                                                      TRAD = assespr.testo+"\n"+STArr.replace("REGT",MT);                                                                                      
                                                                                    }
                                                                                }else{
                                                                                      TRAD = STArr.replace("REGT",assespr.testo);                                                                                      
                                                                                }

                                                                              }else{

                                                                                if(assespr.genere.equals("ESPRESSIONE")){
                                                                                                     
                                                                                  String  T = "$f"+countRegFP;                   
                                                                                  assespr.testo = assespr.testo.replace("RIS",T);                                                                                  
                                                                                  TRAD = assespr.testo+"\n"+STArr.replace("REGT",T);
                                                                                  countRegFP+=2;
                                                                                                
                                                                                }else if(assespr.genere.equals("VARIABILE")){
                                                                                                     
                                                                                  Record rec2 = SymbolTable.getCurrRec(assespr.testo);
                                                                                  TRAD = STArr.replace("REGT",rec2.getRegister());
                                                                                                
                                                                                }else if(assespr.genere.equals("ARRAY_ACCESS")){
                                                                                                     
                                                                                  if(rec.getTabRegArr().containsValue(assespr.testo)){
                                                                                     TRAD = STArr.replace("REGT",assespr.testo);
                                                                                  }else{                   
                                                                                     int m = assespr.testo.lastIndexOf(" $f");
                                                                                     String MT = assespr.testo.substring(m+1,m+4);
                                                                                     TRAD = assespr.testo+"\n"+STArr.replace("REGT",MT);
                                                                                  }
                                                                                }else{
                                                                                 TRAD = STArr.replace("REGT",assespr.testo);
                                                                                }

                                                                              } 
                                                                              
                                                                          }else{ 
                                                                                
                                                                                String vett = lhs.testo;
                                                                                String UT;
                                                                                int l;
                                                                                lhs.testo = TabTrad.get("ARRAY_ACCESS_ASS");
                                                                                if(lhs.tipo.equals("DOUBLE")){
                                                                                    l = lhs.testo.lastIndexOf(" $f");                                                                                    
                                                                                }else{
                                                                                    l = lhs.testo.lastIndexOf(" $t");
                                                                                }
                   
                                                                                ArrActTStore = lhs.testo.substring(lhs.testo.indexOf("(")+1, lhs.testo.length()-1);  
                                                                                UT = lhs.testo.substring(l+1,l+4);
                                                                                rec.getTabRegArr().put(vett, ArrActTStore);
                                                                                
                                                                                if(flagWarn == true){
                                                                                    parser.warning(Err_War,lhs);

                                                                                    String APP = Traduzione.funct(assespr.genere,assespr.testo);
                                                                                    if(assespr.genere.equals("ESPRESSIONE")){                                                                                                           
                                                                                        assespr.testo = assespr.testo.replace("RIS",UT);                               
                                                                                        int nh = lhs.testo.lastIndexOf("S");
                                                                                        TRAD = lhs.testo.substring(0,nh)+assespr.testo+"\n"+lhs.testo.substring(nh,lhs.testo.length());                                                              
                                                                                    }else if (assespr.genere.equals("ARRAY_ACCESS")){
                                                                                        if(assespr.testo.startsWith("$t")){
                                                                                            TRAD = lhs.testo.substring(0,l-3)+"\n"+APP+lhs.testo.substring(l-3,lhs.testo.length()).replace(UT,Traduzione.getRegFP()); 
                                                                                        }else{ 
                                                                                            TRAD = lhs.testo.substring(0,l-3)+assespr.testo+"\n"+APP+lhs.testo.substring(l-3,lhs.testo.length()).replace(UT,Traduzione.getRegFP()); 
                                                                                        }
                                                                                    }else{
                                                                                        TRAD = lhs.testo.substring(0,l-3)+"\n"+APP+lhs.testo.substring(l-3,lhs.testo.length()).replace(UT,Traduzione.getRegFP()); 
                                                                                    }

                                                                                    flagWarn = false;  
                                                                                }else{
                                                                            
                                                                                    if(lhs.tipo.equals("INTEGER")){
                                                                                    
                                                                                        if(assespr.genere.equals("ESPRESSIONE")){
                                                                                                     
                                                                                            assespr.testo = assespr.testo.replace("RIS",UT);
                                                                                            int nh = lhs.testo.lastIndexOf("S");
                                                                                            TRAD = lhs.testo.substring(0,nh)+assespr.testo+"\n"+lhs.testo.substring(nh,lhs.testo.length());
                                                                                                
                                                                                        }else if(assespr.genere.equals("VARIABILE")){
                                                                                                     
                                                                                            Record rec2 = SymbolTable.checkVScope(assespr.testo);
                                                                                            TRAD = lhs.testo.substring(0,l-2)+lhs.testo.substring(l-2,lhs.testo.length()).replace(UT,rec2.getRegister());
                                                                                                
                                                                                        }else if(assespr.genere.equals("ARRAY_ACCESS")){
                                                                                            if(assespr.testo.startsWith("$t")){
                                                                                                TRAD = lhs.testo.replace(UT,assespr.testo);
                                                                                            }else{       
                                                                                                int m = assespr.testo.lastIndexOf(" $t");
                                                                                                String MT = assespr.testo.substring(m+1,m+4);
                                                                                                TRAD = lhs.testo.substring(0,l-2)+assespr.testo+"\n"+lhs.testo.substring(l-2,lhs.testo.length()).replace(UT,MT);
                                                                                            }
                                                                                        }else{
                                                                                            TRAD = lhs.testo.replace(UT,assespr.testo);
                                                                                        }
                                                                                    }else{

                                                                                        if(assespr.genere.equals("ESPRESSIONE")){
                                                                                                     
                                                                                            assespr.testo = assespr.testo.replace("RIS",UT);
                                                                                            int nh = lhs.testo.lastIndexOf("S");
                                                                                            TRAD = lhs.testo.substring(0,nh)+assespr.testo+"\n"+lhs.testo.substring(nh,lhs.testo.length());
                                                                                                
                                                                                        }else if(assespr.genere.equals("VARIABILE")){
                                                                                                     
                                                                                            Record rec2 = SymbolTable.getCurrRec(assespr.testo);
                                                                                            TRAD = lhs.testo.substring(0,l-2)+lhs.testo.substring(l-2,lhs.testo.length()).replace(UT,rec2.getRegister());
                                                                                                
                                                                                        }else if(assespr.genere.equals("ARRAY_ACCESS")){
                                                                                            if(assespr.testo.startsWith("$f")){
                                                                                                TRAD = lhs.testo.replace(UT,assespr.testo);
                                                                                            }else{         
                                                                                                int m = assespr.testo.lastIndexOf(" $f");
                                                                                                String MT = assespr.testo.substring(m+1,m+4);
                                                                                                TRAD = lhs.testo.substring(0,l-2)+assespr.testo+"\n"+lhs.testo.substring(l-2,lhs.testo.length()).replace(UT,MT);
                                                                                            }
                                                                                        }else{
                                                                                            TRAD = lhs.testo.replace(UT,assespr.testo);
                                                                                        }
                                                                                    }                                                  
                                                                                } 
                                                                              }
                                                                           }else{                                                                                                  
                                                                                Record rec = SymbolTable.checkVScope(lhs.testo);
                                                                       
                                                                                if(rec.getModifier().equals("null")){
                                                                                                    
                                                                                    String str = CheckClass.checkTypeA(lhs.tipo,assespr.tipo,assespr.testo);
                                                                                    if(checkFlag == true){ 
                                                                                       
                                                                                        parser.report_error(Err_War,lhs);
                                                                                        checkFlag = false;
                                                                                    }

                                                                                    if(flagWarn == true){
                                                                                        parser.warning(Err_War,lhs);

                                                                                        String APP = Traduzione.funct(assespr.genere,assespr.testo);
                                                                                        if(assespr.genere.equals("ESPRESSIONE")){                                                                                                           
                                                                                            // T.substring(T.indexOf("RIS")-4, T.indexOf("RIS"));
                                                                                            // TRAD = APP. 
                                                                                            // TRAD = APP.replace("RIS",rec.getRegister());                                                                                            
                                                                                        }else if (assespr.genere.equals("ARRAY_ACCESS")){ 
                                                                                            if(assespr.testo.startsWith("$t")){
                                                                                                TRAD = APP+Traduzione.OpEspr(3,rec.getType())+" "+
                                                                                                                rec.getRegister()+", $zero"+", "+Traduzione.getRegFP();
                                                                                            }else{
                                                                                                TRAD = assespr.testo+"\n"+APP+Traduzione.OpEspr(3,rec.getType())+" "+
                                                                                                                rec.getRegister()+", $zero"+", "+Traduzione.getRegFP();
                                                                                            }
                                                                                        }else{
                                                                                            TRAD = APP+Traduzione.OpEspr(3,rec.getType())+" "+rec.getRegister()+
                                                                                                                                ", $zero"+", "+Traduzione.getRegFP();
                                                                                        }
                                                                                        flagWarn = false;
                                                                                    }else{
                                                                                        if(lhs.tipo.equals("INTEGER")){

                                                                                            if(assespr.genere.equals("ESPRESSIONE")){  
                                                                                                         
                                                                                                TRAD = assespr.testo.replace("RIS",rec.getRegister()); 
                             
                                                                                            }else if (assespr.genere.equals("VARIABILE")){

                                                                                                Record rec2 = SymbolTable.checkVScope(assespr.testo);
                                                                                                TRAD = Traduzione.OpEspr(3,rec.getType())+" "+rec.getRegister()+
                                                                                                                                ", $zero"+", "+rec2.getRegister();

                                                                                            }else if (assespr.genere.equals("ARRAY_ACCESS")){
                                                                               
                                                                                                if(assespr.testo.startsWith("$t")){
                                                                                                    TRAD = Traduzione.OpEspr(3,rec.getType())+" "+
                                                                                                            rec.getRegister()+", $zero"+", "+assespr.testo;
                                                                                                }else{
                                                                                                    int l = assespr.testo.lastIndexOf(" $t");
                                                                                                    String UT = assespr.testo.substring(l+1,l+4);
                                                                                                    TRAD = assespr.testo+"\n"+Traduzione.OpEspr(3,rec.getType())+" "+
                                                                                                                                    rec.getRegister()+", $zero"+", "+UT;
                                                                                                }

                                                                                            }else{
                                                                                                rec.setValue(assespr.testo);
                                                                                                TRAD = Traduzione.OpEspr(3,rec.getType())+"I"+" "+rec.getRegister()+
                                                                                                                                        ", $zero"+", "+assespr.testo;
                                                                                            }
                                                                                        }else{

                                                                                            if(assespr.genere.equals("ESPRESSIONE")){                                                                                                           
                                                                                                TRAD = assespr.testo.replace("RIS",rec.getRegister());                              
                                                                                            }else if (assespr.genere.equals("VARIABILE")){
                                                                                                 Record rec2 = SymbolTable.getCurrRec(assespr.testo);
                                                                                                 TRAD = Traduzione.OpEspr(3,rec.getType())+" "+rec.getRegister()+
                                                                                                                                ", $zero"+", "+rec2.getRegister();
                                                                                            }else if (assespr.genere.equals("ARRAY_ACCESS")){ 
                                                                              
                                                                                                if(assespr.testo.startsWith("$f")){
                                                                                                    TRAD = Traduzione.OpEspr(3,rec.getType())+" "+
                                                                                                           rec.getRegister()+", $zero"+", "+assespr.testo;
                                                                                                }else{                                                                                         
                                                                                                    int l = assespr.testo.lastIndexOf(" $f");
                                                                                                    String UT = assespr.testo.substring(l+1,l+4);
                                                                                                    TRAD = assespr.testo+"\n"+Traduzione.OpEspr(3,rec.getType())+" "+
                                                                                                                                    rec.getRegister()+", $zero"+", "+UT;
                                                                                                }

                                                                                            }else{
                                                                                                rec.setValue(assespr.testo);
                                                                                                TRAD = Traduzione.OpEspr(3,rec.getType())+"I"+" "+rec.getRegister()+
                                                                                                                                  ", $zero"+", "+assespr.testo;
                                                                                            }
                                                                                        }
                                                                                    }  
                                                                                }else{
                                                                                  
                                                                                    parser.report_error("ERROR: NON E' POSSIBILE ASSEGNARE UN VALORE AD UNA VARIABILE CON MODIFICATORE FINAL!\n",lhs);
                                                                                }                                                                                
                                                                            } 
                                                                             RESULT = new Obj(TRAD,lhs.tipo);
                                                                            }                  
                                                                          
                                                                        
              CUP$parser$result = new java_cup.runtime.Symbol(82/*assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // assignment_expression ::= assignment 
            {
              Obj RESULT = null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj ass = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ass; 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // assignment_expression ::= conditional_or_expression 
            {
              Obj RESULT = null;
		int condorexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int condorexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj condorex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = condorex; 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // conditional_or_expression ::= conditional_or_expression OROR conditional_and_expression 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(80/*conditional_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // conditional_or_expression ::= conditional_and_expression 
            {
              Obj RESULT = null;
		int condandexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int condandexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj condandex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = condandex; 
              CUP$parser$result = new java_cup.runtime.Symbol(80/*conditional_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // conditional_and_expression ::= conditional_and_expression ANDAND equality_expression 
            {
              Obj RESULT = null;
		int eqexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eqexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj eqex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(79/*conditional_and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // conditional_and_expression ::= equality_expression 
            {
              Obj RESULT = null;
		int eqexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eqexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj eqex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = eqex; 
              CUP$parser$result = new java_cup.runtime.Symbol(79/*conditional_and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // equality_expression ::= equality_expression NOTEQ relational_expression 
            {
              Obj RESULT = null;
		int eqesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eqesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj eqespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                                CheckClass.checkEQNEQ(eqespr.tipo,relespr.tipo);

                                                                                if(checkFlag == true){
                                                                                    
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;

                                                                                    RESULT = new Obj("","BOOLEAN");
                                                                                }else{

                                                                                    if(eqespr.tipo.equals("INTEGER") && relespr.tipo.equals("INTEGER")){
                                                                                        TRAD = Traduzione.tradEQNEQ(eqespr.genere,relespr.genere,
                                                                                                                     eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,2);
                                                                                    }else if(eqespr.tipo.equals("DOUBLE") && relespr.tipo.equals("DOUBLE")){
                                                                                        TRAD = Traduzione.tradEQNEQ(eqespr.genere,relespr.genere,
                                                                                                                     eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,2);
                                                                                    }else{
                                                                                        TRAD = Traduzione.tradEQNEQFPI(eqespr.genere,relespr.genere,
                                                                                                 eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,2);
                                                                                    }
    
                                                                                    RESULT = new Obj(TRAD,"BOOLEAN");
                                                                                }  
                                                                                
              CUP$parser$result = new java_cup.runtime.Symbol(78/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // equality_expression ::= equality_expression EQEQ relational_expression 
            {
              Obj RESULT = null;
		int eqesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eqesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj eqespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                                CheckClass.checkEQNEQ(eqespr.tipo,relespr.tipo); 

                                                                                if(checkFlag == true){
                                                                                    
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;

                                                                                    RESULT = new Obj("","BOOLEAN");
                                                                                }else{

                                                                                    if(eqespr.tipo.equals("INTEGER") && relespr.tipo.equals("INTEGER")){
                                                                                        TRAD = Traduzione.tradEQNEQ(eqespr.genere,relespr.genere,
                                                                                                                     eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,1);
                                                                                    }else if(eqespr.tipo.equals("DOUBLE") && relespr.tipo.equals("DOUBLE")){
                                                                                        TRAD = Traduzione.tradEQNEQ(eqespr.genere,relespr.genere,
                                                                                                                     eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,1);
                                                                                    }else{
                                                                                        TRAD = Traduzione.tradEQNEQFPI(eqespr.genere,relespr.genere,
                                                                                                 eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,1);
                                                                                    }
                                                                                 
                                                                                    RESULT = new Obj(TRAD,"BOOLEAN");
                                                                                }
                                                                              
              CUP$parser$result = new java_cup.runtime.Symbol(78/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // equality_expression ::= relational_expression 
            {
              Obj RESULT = null;
		int relexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj relex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = relex; 
              CUP$parser$result = new java_cup.runtime.Symbol(78/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // relational_expression ::= relational_expression GTEQ additive_expression 
            {
              Obj RESULT = null;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                                CheckClass.checkOpCond(relespr.tipo,addespr.tipo);
                                                                                
                                                                                if(checkFlag == true){ 
                                                                                    
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;

                                                                                    RESULT = new Obj("","BOOLEAN");
                                                                                }else{

                                                                                    if(relespr.tipo.equals("INTEGER") && addespr.tipo.equals("INTEGER")){
                                                                                        String RTemp = "$t"+countRTemp;
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,RTemp,4,relespr.tipo,addespr.tipo);
                                                                                        countRTemp++;
                                                                                    }else if(relespr.tipo.equals("DOUBLE") && addespr.tipo.equals("DOUBLE")){
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,3,relespr.tipo);          
                                                                                    }else{
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                  relespr.testo,addespr.testo,relespr.tipo,addespr.tipo,3); 
                                                                                    } 
                                                                                
                                                                                    RESULT = new Obj(TRAD,"BOOLEAN"); 
                                                                                }
                                                                                
              CUP$parser$result = new java_cup.runtime.Symbol(77/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // relational_expression ::= relational_expression LTEQ additive_expression 
            {
              Obj RESULT = null;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                                                                CheckClass.checkOpCond(relespr.tipo,addespr.tipo);

                                                                                if(checkFlag == true){
                                                                                    
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;

                                                                                    RESULT = new Obj("","BOOLEAN");
                                                                                }else{

                                                                                    if(relespr.tipo.equals("INTEGER") && addespr.tipo.equals("INTEGER")){
                                                                                        String RTemp = "$t"+countRTemp;
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,RTemp,3,relespr.tipo,addespr.tipo);
                                                                                        countRTemp++;
                                                                                    }else if(relespr.tipo.equals("DOUBLE") && addespr.tipo.equals("DOUBLE")){
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,4,relespr.tipo);          
                                                                                    }else{
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                  relespr.testo,addespr.testo,relespr.tipo,addespr.tipo,4); 
                                                                                    } 
                                                                               
                                                                                    RESULT = new Obj(TRAD,"BOOLEAN");
                                                                                }   
                                                                                
              CUP$parser$result = new java_cup.runtime.Symbol(77/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // relational_expression ::= relational_expression GT additive_expression 
            {
              Obj RESULT = null;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                                CheckClass.checkOpCond(relespr.tipo,addespr.tipo);
                                                                                
                                                                                if(checkFlag == true){
                                                                                                                                                                                                                                                       
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;

                                                                                    RESULT = new Obj("","BOOLEAN");
                                                                                }else{

                                                                                    if(relespr.tipo.equals("INTEGER") && addespr.tipo.equals("INTEGER")){
                                                                                        String RTemp = "$t"+countRTemp;
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,RTemp,2,relespr.tipo,addespr.tipo);
                                                                                        countRTemp++;
                                                                                    }else if(relespr.tipo.equals("DOUBLE") && addespr.tipo.equals("DOUBLE")){
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,1,relespr.tipo);          
                                                                                    }else{
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                  relespr.testo,addespr.testo,relespr.tipo,addespr.tipo,1); 
                                                                                    } 
                                                                                
                                                                                    RESULT = new Obj(TRAD,"BOOLEAN"); 
                                                                                }
                                                                              
              CUP$parser$result = new java_cup.runtime.Symbol(77/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // relational_expression ::= relational_expression LT additive_expression 
            {
              Obj RESULT = null;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		CheckClass.checkOpCond(relespr.tipo,addespr.tipo); 

                                                                               if(checkFlag == true){ 
                                                                                                                                                                                                                                                     
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;
                                                                                                                                                                        
                                                                                    RESULT = new Obj("","BOOLEAN"); 

                                                                                }else{

                                                                                    if(relespr.tipo.equals("INTEGER") && addespr.tipo.equals("INTEGER")){
                                                                                        String RTemp = "$t"+countRTemp;
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,RTemp,1,relespr.tipo,addespr.tipo);
                                                                                        countRTemp++;
                                                                                    }else if(relespr.tipo.equals("DOUBLE") && addespr.tipo.equals("DOUBLE")){
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,2,relespr.tipo);          
                                                                                    }else{
                                                                                        TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                  relespr.testo,addespr.testo,relespr.tipo,addespr.tipo,2); 
                                                                                    } 
                                                                               
                                                                                    RESULT = new Obj(TRAD,"BOOLEAN");  
                                                                                }
                                                                              
              CUP$parser$result = new java_cup.runtime.Symbol(77/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // relational_expression ::= additive_expression 
            {
              Obj RESULT = null;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = addespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(77/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // additive_expression ::= additive_expression MENO multiplicative_expression 
            {
              Obj RESULT = null;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int multesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj multespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 String dfT = CheckClass.checkTypeMD(addespr.tipo,multespr.tipo); 
                                                                                       
                                                                                       if(checkFlag == true){ 
                                                                                                                                                                                                                                                        
                                                                                         parser.report_error(Err_War,multespr);
                                                                                         checkFlag = false;    

                                                                                         RESULT = new Obj(" ","ESPRESSIONE",parser.returnLine());
                                                                                       }else{

                                                                                       if(flagWarn == true){
                                                                                         Traduzione.castFP(addespr.tipo,addespr.genere,addespr.testo,multespr.genere,multespr.testo);
                                                                                         TRAD = Traduzione.tradEspr(4,addespr.genere, multespr.genere,
                                                                                                             addespr.testo,multespr.testo,dfT);
                                                                                         parser.warning(Err_War,multespr);                                                                                        
                                                                                         flagWarn = false;
                                                                                       }else{
                                                                                         if(dfT.equals("DOUBLE")){
                                                                                            TRAD = Traduzione.tradEspr(addespr.genere,multespr.genere,
                                                                                                                      addespr.testo,multespr.testo,dfT,4);
                                                                                         }else{
                                                                                            TRAD = Traduzione.tradEspr(addespr.genere,multespr.genere,
                                                                                                                       addespr.testo,multespr.testo,4,dfT);
                                                                                         }
                                                                                       }
                                                                                                                                                                              
                                                                                      RESULT = new Obj(TRAD,dfT,"ESPRESSIONE",parser.returnLine());
                                                                                      }
                                                                                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // additive_expression ::= additive_expression PIU multiplicative_expression 
            {
              Obj RESULT = null;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int multesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj multespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 String smT = CheckClass.checkTypeMD(addespr.tipo,multespr.tipo); 
                                                                                      
                                                                                      if(checkFlag == true){   
                                                                                                                                                                                                                                                     
                                                                                         parser.report_error(Err_War,multespr);
                                                                                         checkFlag = false;
                                                                                         
                                                                                         RESULT = new Obj(" ","ESPRESSIONE",parser.returnLine());
                                                                                      }else{

                                                                                      if(flagWarn == true){
                                                                                         Traduzione.castFP(addespr.tipo,addespr.genere,addespr.testo,multespr.genere,multespr.testo);
                                                                                         TRAD = Traduzione.tradEspr(3,addespr.genere, multespr.genere,
                                                                                                             addespr.testo,multespr.testo,smT);
                                                                                         parser.warning(Err_War,multespr);
                                                                                         flagWarn = false;
                                                                                      }else{
                                                                                         if(smT.equals("DOUBLE")){
                                                                                            TRAD = Traduzione.tradEspr(addespr.genere,multespr.genere,
                                                                                                                      addespr.testo,multespr.testo,smT,3);
                                                                                         }else{
                                                                                            TRAD = Traduzione.tradEspr(addespr.genere,multespr.genere,
                                                                                                                       addespr.testo,multespr.testo,3,smT);
                                                                                         }
                                                                                      }
                                                                                                                                                                 
                                                                                      RESULT = new Obj(TRAD,smT,"ESPRESSIONE",parser.returnLine());
                                                                                      }
                                                                                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // additive_expression ::= multiplicative_expression 
            {
              Obj RESULT = null;
		int multexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj multex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = multex; 
              CUP$parser$result = new java_cup.runtime.Symbol(76/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // multiplicative_expression ::= multiplicative_expression DIVISO unary_expression 
            {
              Obj RESULT = null;
		int multesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int multesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj multespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int unexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj unex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                                   if(unex.genere.equals("NUMERO")){
                                                                                        if(Integer.parseInt(unex.testo) == 0){  
                                                                                                                                                                          
                                                                                            parser.report_fatal_error("FATAL ERROR: NON E' POSSIBILE EFFETTUARE LA DIVISIONE PER 0!\n");
                                                                                            FlagSyn = true;
                                                                                            //USCIRE DAL PROGRAMMA!!!!
                                                                                        }
                                                                                   }else{
                                                                                     Record rec = SymbolTable.getCurrRec(unex.testo);  
                                                                                     if(rec.getValue().equals("0")){
                                                                                        parser.report_fatal_error("FATAL ERROR: NON E' POSSIBILE EFFETTUARE LA DIVISIONE PER 0!\n");
                                                                                        FlagSyn = true;
                                                                                            //USCIRE DAL PROGRAMMA!!!!
                                                                                     }
                                                                                   
                                                                                   }

                                                                                   String dvT = CheckClass.checkTypeMD(multespr.tipo,unex.tipo); 
                                                                                     
                                                                                   if(checkFlag == true){   
                                                                                                                                                                                                                                                    
                                                                                    parser.report_error(Err_War,multespr);
                                                                                    checkFlag = false; 
                                                                                    RESULT = new Obj(" ","ESPRESSIONE",parser.returnLine());
                                                                                  }else{

                                                                                    if(flagWarn == true){
                                                                                        Traduzione.castFP(multespr.tipo,multespr.genere,multespr.testo,unex.genere,unex.testo);
                                                                                        TRAD = Traduzione.tradEspr(2,multespr.genere, unex.genere,
                                                                                                             multespr.testo,unex.testo,dvT);
                                                                                        parser.warning(Err_War,multespr);
                                                                                        flagWarn = false;
                                                                                    }else{
                                                                                        if(dvT.equals("DOUBLE")){
                                                                                            TRAD = Traduzione.tradEspr(multespr.genere, unex.genere,
                                                                                                                      multespr.testo,unex.testo,dvT,2);
                                                                                        }else{
                                                                                            TRAD = Traduzione.tradEspr(multespr.genere, unex.genere,
                                                                                                                      multespr.testo,unex.testo,2,dvT);
                                                                                        
                                                                                        }
                                                                                    }
                                                                                                                                                                         
                                                                                   RESULT = new Obj(TRAD,dvT,"ESPRESSIONE",parser.returnLine());
                                                                                  }
                                                                                  
              CUP$parser$result = new java_cup.runtime.Symbol(75/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // multiplicative_expression ::= multiplicative_expression PER unary_expression 
            {
              Obj RESULT = null;
		int multesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int multesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj multespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int unexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj unex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  String mlT = CheckClass.checkTypeMD(multespr.tipo,unex.tipo); 

                                                                                  if(checkFlag == true){  
                                                                                                                                                                                                                                                                                                                                      
                                                                                    parser.report_error(Err_War,multespr);
                                                                                    checkFlag = false;
                                                                                  
                                                                                    RESULT = new Obj(" ","ESPRESSIONE",parser.returnLine());
                                                                                  }else{

                                                                                    if(flagWarn == true){
                                                                                        Traduzione.castFP(multespr.tipo,multespr.genere,multespr.testo,unex.genere,unex.testo);
                                                                                        TRAD = Traduzione.tradEspr(1,multespr.genere, unex.genere,
                                                                                                             multespr.testo,unex.testo,mlT);
                                                                                     
                                                                                        parser.warning(Err_War,multespr);
                                                                                        flagWarn = false;
                                                                                    }else{
                                                                                        if(mlT.equals("DOUBLE")){
                                                                                            TRAD = Traduzione.tradEspr(multespr.genere, unex.genere,
                                                                                                                      multespr.testo,unex.testo,mlT,1);
                                                                                        }else{
                                                                                            TRAD = Traduzione.tradEspr(multespr.genere, unex.genere,
                                                                                                                      multespr.testo,unex.testo,1,mlT);
                                                                                        }
                                                                                    }
                                                                                                                               
                                                                                    RESULT = new Obj(TRAD,mlT,"ESPRESSIONE",parser.returnLine()); 
                                                                                  }
                                                                                 
              CUP$parser$result = new java_cup.runtime.Symbol(75/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // multiplicative_expression ::= unary_expression 
            {
              Obj RESULT = null;
		int unexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj unex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = unex; 
              CUP$parser$result = new java_cup.runtime.Symbol(75/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // cast_expression ::= TONDA_APERTA primitive_type dims_opt TONDA_CHIUSA unary_expression 
            {
              Obj RESULT = null;
		int primtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Obj primtype = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int unesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj unespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(74/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // unary_expression_not_plus_minus ::= cast_expression 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(73/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // unary_expression_not_plus_minus ::= postfix_expression 
            {
              Obj RESULT = null;
		int postexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj postex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = postex; 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // unary_expression ::= unary_expression_not_plus_minus 
            {
              Obj RESULT = null;
		int uenpmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uenpmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj uenpm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = uenpm; 
              CUP$parser$result = new java_cup.runtime.Symbol(72/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // postdecrement_expression ::= postfix_expression MINUSMINUS 
            {
              Obj RESULT = null;
		int postesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int postesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj postespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                                 if(!postespr.tipo.equals("INTEGER")){  
                                                                                                    
                                                    parser.report_error("ERROR: IL TIPO DI TALE VARIABILE DEVE ESSERE NECESSARIAMENTE UN INTERO!\n",postespr);
                                                    
                                                 } 
                                                   
                                                Record rec = SymbolTable.getCurrRec(postespr.testo);   
                                                TRAD = "ADDI"+" "+rec.getRegister()+", "+rec.getRegister()+", "+"-1";

                                                RESULT = new Obj(TRAD,postespr.tipo);
                                               
              CUP$parser$result = new java_cup.runtime.Symbol(71/*postdecrement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // postincrement_expression ::= postfix_expression PLUSPLUS 
            {
              Obj RESULT = null;
		int postesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int postesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj postespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                               if(!postespr.tipo.equals("INTEGER")){    
                                                                                                 
                                                    parser.report_error("ERROR: IL TIPO DI TALE VARIABILE DEVE ESSERE NECESSARIAMENTE UN INTERO!\n",postespr);
                                               } 
                                                
                                                Record rec = SymbolTable.getCurrRec(postespr.testo);   
                                                TRAD = "ADDI"+" "+rec.getRegister()+", "+rec.getRegister()+", "+"1";

                                               RESULT = new Obj(TRAD,postespr.tipo);
                                            
              CUP$parser$result = new java_cup.runtime.Symbol(70/*postincrement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // postfix_expression ::= postdecrement_expression 
            {
              Obj RESULT = null;
		int postdecesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postdecesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj postdecespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = postdecespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(69/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // postfix_expression ::= postincrement_expression 
            {
              Obj RESULT = null;
		int postinesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postinesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj postinespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = postinespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(69/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // postfix_expression ::= name 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
                             Record rec = SymbolTable.checkVScope(nome.testo);

                             if(checkFlag == true){
                                                                                                                                                                                                                                  
                                parser.report_error(Err_War,nome);
                                checkFlag = false;   

                                String regRandom = "$s"+countReg;                                
                                SymbolTable.getTable().put(nome.testo,new Record("INTEGER",nome.testo,regRandom,0));
                                rec = SymbolTable.checkVScope(nome.testo);
                                countReg++;
                             }
  
                             nome.tipo = rec.getType();
                             
                             RESULT = new Obj(nome.testo,nome.tipo,"VARIABILE"); 
                          
              CUP$parser$result = new java_cup.runtime.Symbol(69/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // postfix_expression ::= primary 
            {
              Obj RESULT = null;
		int primleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int primright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj prim = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prim; 
              CUP$parser$result = new java_cup.runtime.Symbol(69/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // array_access ::= name LBRACK expression RBRACK 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                         int I1,I2;
                                                         Record recE;
                                                         String indice;
                                                         ArrayList listvalue = new ArrayList();

                                                         Record rec = SymbolTable.checkVScope(nome.testo);

                                                         if(checkFlag == true){ 
                                                                                                                                                                                                                                                                                         
                                                              parser.report_error(Err_War,nome);
                                                              checkFlag = false;
                                                              String regRandom = "$s"+countReg;

                                                              for(int i = 0; i < 10; i++){
                                                                listvalue.add("0");
                                                              }

                                                              SymbolTable.getTable().put(nome.testo,new Record("INTEGER",listvalue,100,nome.testo,regRandom));
                                                              rec = SymbolTable.checkVScope(nome.testo);
                                                              countReg++;
                                                         }
   
                                                        nome.tipo = rec.getType();
                                                         
                                                        if(!espr.tipo.equals("INTEGER")){  
                                                            
                                                            checkFlag = true;                                                         
                                                            parser.report_error("ERROR: LA DIMENSIONE DEL VETTORE DEVE ESSERE UN NUMERO INTERO!\n",espr);
                                                            checkFlag = false;
                                                            
                                                            if(espr.genere.equals("NUMERO")){
                                                                espr.testo = espr.testo.substring(0,espr.testo.indexOf("."));
                                                                I1 = Support.changeStrInt(espr.testo);
                                                                I2 = Support.changeStrInt(rec.getValue().toString());
                                                            }else{
                                                                recE = SymbolTable.getCurrRec(espr.testo);
                                                                indice = recE.getValue().toString().substring(0,recE.getValue().toString().indexOf("."));
                                                                I1 = Support.changeStrInt(indice);
                                                                I2 = Support.changeStrInt(rec.getValue().toString());
                                                            }
                                                         
                                                        }else{ 
                                                             
                                                            if(espr.genere.equals("NUMERO")){
                                                                I1 = Support.changeStrInt(espr.testo);
                                                                I2 = Support.changeStrInt(rec.getValue().toString());                                                            
                                                            }else{
                                                                recE = SymbolTable.checkVScope(espr.testo);                                                                    
                                                                I1 = Support.changeStrInt(recE.getValue().toString());
                                                                I2 = Support.changeStrInt(rec.getValue().toString());                                                                    
                                                            }                                            
                                                        }
                                                         
                                                        if(I1 > I2){                                                                     
                                                                  parser.report_fatal_error("FATAL ERROR: L'INDICE SUPERA LA DIMENSIONE MASSIMA DEL VETTORE!\n");
                                                                  FlagSyn = true;
                                                                  //SARÃ NECESSARIO USCIRE DAL PROGRAMMA!!!
                                                        } 
                                                         
                                                        
                                                         String prod = nome.testo+"["+espr.testo+"]";
                                                         if(!rec.getTabRegArr().containsKey(prod)){

                                                         if(espr.genere.equals("NUMERO")){

                                                           if(nome.tipo.equals("DOUBLE")){
                                                              TRAD = "$f"+countRegFP+", "+Support.calcOffset(espr.testo,nome.tipo)+
                                                                                                              "("+rec.getRegister()+")";
                                                              TabTrad.put("ARRAY_ACCESS_I",TRAD);
                                                              ArrActTemp = "$f"+countRegFP;
                                                              countRegFP = countRegFP + 2;
                                                           }else{
                                                              TRAD = "$t"+countRTemp+", "+Support.calcOffset(espr.testo,nome.tipo)+
                                                                                                              "("+rec.getRegister()+")";
                                                              TabTrad.put("ARRAY_ACCESS_I",TRAD);
                                                              ArrActTemp ="$t"+countRTemp;
                                                              countRTemp++;
                                                           } 
                                                                                                                      
                                                          }else if(espr.genere.equals("VARIABILE")){
                                                            recE = SymbolTable.getCurrRec(espr.testo);                                                            
                                                            
                                                            if(nome.tipo.equals("INTEGER")){                                                              
                                                               int countRTempS = countRTemp+1;

                                                               TRAD = "MULT "+"$t"+countRTempS+", "+recE.getRegister()+", "+4+"\n"+
                                                                   "ADD "+"$t"+countRTempS+", "+"$t"+countRTempS+", "+rec.getRegister()+"\n"+
                                                                   "$t"+countRTemp+", "+"0("+"$t"+countRTempS+")";

                                                               TabTrad.put("ARRAY_ACCESS",TRAD);
                                                               ArrActTemp ="$t"+countRTemp;                                                               
                                                               countRTemp = countRTemp+2;

                                                            }else if(nome.tipo.equals("DOUBLE")){
                                                             
                                                                TRAD = "MULT "+"$t"+countRTemp+", "+recE.getRegister()+", "+8+"\n"+
                                                                       "MTC1 "+"$t"+countRTemp+", "+"$f"+countRegFP+"\n"+ 
                                                                       "ADD.D "+"$f"+countRegFP+", "+"$f"+countRegFP+", "+rec.getRegister()+"\n"+
                                                                       "TEMP"+", "+"0("+"$f"+countRegFP+")";                                                                   
                                                                countRegFP = countRegFP + 2;
                                                                TRAD = TRAD.replace("TEMP","$f"+Integer.toString(countRegFP));

                                                                TabTrad.put("ARRAY_ACCESS",TRAD);
                                                                ArrActTemp ="$f"+Integer.toString(countRegFP);
                                                                countRTemp++;
                                                                countRegFP = countRegFP + 2;
                                                            }else{ 
                                                              
                                                              checkFlag = true;                                                               
                                                              parser.report_error("ERROR: tipo non supportato!\n",espr); 
                                                              checkFlag = true; 
                                                            } 
                                                           
                                                            espr.genere = "";
                                                          }else{      
                                                                                                                
                                                              parser.report_error("ERROR!",espr);                                                              
                                                          }
                                                        }  
                                                        
                                                        RESULT = new Obj(nome.testo+"["+espr.testo+"]", nome.tipo,espr.genere);
                                                       
              CUP$parser$result = new java_cup.runtime.Symbol(68/*array_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // dims ::= dims LBRACK RBRACK 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(67/*dims*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // dims ::= LBRACK RBRACK 
            {
              Obj RESULT = null;
		 RESULT = new Obj("["+"]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*dims*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // dims_opt ::= dims 
            {
              Obj RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(66/*dims_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // dims_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*dims_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // dim_expr ::= LBRACK expression RBRACK 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                               if(!espr.tipo.equals("INTEGER")){  
                                                  //VERIFICARE L'EFFETTIVA UTILITÃ
                                                  checkFlag = true;                                                
                                                  parser.report_error("ERROR: la dimensione del vettore deve essere un numero intero!\n",espr);
                                                  checkFlag = false;
                                               }else{  
                                                   RESULT = new Obj("["+espr.testo+"]",espr.tipo);
                                               }
                                              
              CUP$parser$result = new java_cup.runtime.Symbol(65/*dim_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // dim_exprs ::= dim_expr 
            {
              Obj RESULT = null;
		int desprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int desprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj despr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = despr; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*dim_exprs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // array_creation_expression ::= NEW primitive_type dims array_initializer 
            {
              Obj RESULT = null;
		int primtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int primtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj primtype = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrinitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int arrinitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj arrinit = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj("new "+primtype.testo+" "+d.testo+arrinit.testo, primtype.tipo); 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // array_creation_expression ::= NEW primitive_type dim_exprs dims_opt 
            {
              Obj RESULT = null;
		int primtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int primtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj primtype = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int essdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int essdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj essd = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj("new "+primtype.testo+" "+essd.testo, primtype.tipo); 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // primary_no_new_array ::= array_access 
            {
              Obj RESULT = null;
		int arraccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int arraccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj arracc = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                      String T = "";
                                      String D = arracc.testo.substring(0, arracc.testo.indexOf("["));
                                      Record rec = SymbolTable.checkVScope(D);

                                      if(rec.getTabRegArr().containsKey(arracc.testo)){
                                         TRAD = (String) rec.getTabRegArr().get(arracc.testo);                                       
                                      }else{
                                        rec.getTabRegArr().put(arracc.testo,ArrActTemp);

                                      if(arracc.tipo.equals("INTEGER")){
                                         T = "LW"; 
                                      }else if(arracc.tipo.equals("DOUBLE")){
                                         T = "L.D"; 
                                      }else{
                                         parser.report_error("ERROR: tipo non supportato!",arracc);
                                      }
                                      
                                      if(TabTrad.containsKey("ARRAY_ACCESS_I")){
                                         TRAD = T+" "+TabTrad.get("ARRAY_ACCESS_I");
                                         TabTrad.remove("ARRAY_ACCESS_I");
                                      }else if(TabTrad.containsKey("ARRAY_ACCESS")){
                                        
                                        TRAD = TabTrad.get("ARRAY_ACCESS");
                                          
                                        if(arracc.tipo.equals("DOUBLE")){
                                           TRAD = TRAD.replace(TRAD.substring(TRAD.lastIndexOf("\n$f")+1,TRAD.length()),
                                                  T+" "+TRAD.substring(TRAD.lastIndexOf("\n$f")+1,TRAD.length()));  
                                        }else{
                                           TRAD = TRAD.replace(TRAD.substring(TRAD.lastIndexOf("\n$t")+1,TRAD.length()),
                                                  T+" "+TRAD.substring(TRAD.lastIndexOf("\n$t")+1,TRAD.length()));
                                        }                                  
                                                                                
                                      } 
                                      }
                                      RESULT = new Obj(TRAD,arracc.tipo,"ARRAY_ACCESS"); 
                             
              CUP$parser$result = new java_cup.runtime.Symbol(62/*primary_no_new_array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // primary_no_new_array ::= TONDA_APERTA expression TONDA_CHIUSA 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj("( "+espr.testo+" )", espr.tipo); 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*primary_no_new_array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // primary_no_new_array ::= literal 
            {
              Obj RESULT = null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj numero = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = numero; 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*primary_no_new_array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // primary ::= array_creation_expression 
            {
              Obj RESULT = null;
		int arrcresprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int arrcresprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj arrcrespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = arrcrespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // primary ::= primary_no_new_array 
            {
              Obj RESULT = null;
		int pnnaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pnnaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj pnna = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = pnna; 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // statement_expression_list ::= statement_expression_list VIRGOLA statement_expression 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(60/*statement_expression_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // statement_expression_list ::= statement_expression 
            {
              Obj RESULT = null;
		int stesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj stespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = stespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*statement_expression_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_update ::= statement_expression_list 
            {
              Obj RESULT = null;
		int stesprlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stesprlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj stesprl = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = stesprl; 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*for_update*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_update_opt ::= for_update 
            {
              Obj RESULT = null;
		int forupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int forupright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj forup = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = forup; 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*for_update_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_update_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*for_update_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // for_init ::= local_variable_declaration 
            {
              Obj RESULT = null;
		int locvardecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int locvardecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj locvardec = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = locvardec; 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*for_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for_init ::= statement_expression_list 
            {
              Obj RESULT = null;
		int stesprlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stesprlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj stesprl = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = stesprl; 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*for_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // for_init_opt ::= for_init 
            {
              Obj RESULT = null;
		int forinizleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int forinizright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj foriniz = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = foriniz; 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*for_init_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // for_init_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*for_init_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // for_statement_no_short_if ::= FOR TONDA_APERTA error TONDA_CHIUSA statement_no_short_if 
            {
              Obj RESULT = null;
		int statmnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statmnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                                    String esc = "ESCI"+countCl;
                                                                                    TRAD = "CICLO"+countCl+": "+" "+"SLT \nBEQ "+esc+"\n\t"+statmnosif.testo+"\n\t"+"\nCICLO"+countCl+"\n"+esc+":\n";
                                                                                    countCl++;
                                                                                    
                                                                                    RESULT = new Obj(TRAD);
                                                                                
              CUP$parser$result = new java_cup.runtime.Symbol(55/*for_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // for_statement_no_short_if ::= FOR TONDA_APERTA for_init_opt PUNTO_E_VIRGOLA expression_opt PUNTO_E_VIRGOLA for_update_opt TONDA_CHIUSA statement_no_short_if 
            {
              Obj RESULT = null;
		int finoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int finoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Obj fino = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fupoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fuporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj fupo = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statmnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                            String esc = "ESCI"+countCl;

                                            if(!espr.tipo.equals("BOOLEAN")){  

                                                checkFlag = true;
                                                parser.report_error("ERROR: IL COSTRUTTO FOR ACCETTA ESCLUSIVAMENTE IL TIPO BOOLEAN!",espr.linea);
                                                checkFlag = false;

                                                TRAD = fino.testo+"\n"+"CICLO"+countCl+": "+" "+"SLT \nBEQ "+esc+"\n\t"+statmnosif.testo+"\n\t"+fupo.testo+"\nCICLO"+countCl+"\n"+esc+":\n";
                                              
                                            }else{ 

                                                if(espr.testo.contains(".D")){
                                                    espr.testo = espr.testo.concat(", "+esc);
                                                }else{
                                                    espr.testo = espr.testo.replaceAll("OFFSET",esc);
                                                }
                                             
                                                TRAD = fino.testo+"\n"+"CICLO"+countCl+": "+" "+espr.testo+"\n\t"+statmnosif.testo+"\n\t"+fupo.testo+"\nCICLO"+countCl+"\n"+esc+":\n";
                                            }
                                            countCl++;

                                            RESULT = new Obj(TRAD);
                                        
              CUP$parser$result = new java_cup.runtime.Symbol(55/*for_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_statement ::= FOR TONDA_APERTA error TONDA_CHIUSA statement 
            {
              Obj RESULT = null;
		int statmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                    String esc = "ESCI"+countCl;
                                                                    TRAD = "CICLO"+countCl+": "+" "+"SLT \nBEQ "+esc+"\n\t"+statm.testo+"\n\t"+"\nCICLO"+countCl+"\n"+esc+":\n";
                                                                    countCl++;

                                                                    RESULT = new Obj(TRAD);
                                                                   
              CUP$parser$result = new java_cup.runtime.Symbol(54/*for_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // for_statement ::= FOR TONDA_APERTA for_init_opt PUNTO_E_VIRGOLA expression_opt PUNTO_E_VIRGOLA for_update_opt TONDA_CHIUSA statement 
            {
              Obj RESULT = null;
		int finoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int finoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Obj fino = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fupoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fuporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj fupo = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                            String esc = "ESCI"+countCl;

                                            if(!espr.tipo.equals("BOOLEAN")){

                                               checkFlag = true;
                                               parser.report_error("ERROR: IL COSTRUTTO FOR ACCETTA ESCLUSIVAMENTE IL TIPO BOOLEAN!",espr.linea);
                                               checkFlag = false;

                                               TRAD = fino.testo+"\n"+"CICLO"+countCl+": "+" "+"SLT \nBEQ "+esc+"\n\t"+statm.testo+"\n\t"+fupo.testo+"\nCICLO"+countCl+"\n"+esc+":\n";
                                               
                                            }else{ 

                                                if(espr.testo.contains(".D")){
                                                    espr.testo = espr.testo.concat(", "+esc); 
                                                }else{
                                                    espr.testo = espr.testo.replaceAll("OFFSET",esc);
                                                }
                                               
                                                TRAD = fino.testo+"\n"+"CICLO"+countCl+": "+" "+espr.testo+"\n\t"+statm.testo+"\n\t"+fupo.testo+"\nCICLO"+countCl+"\n"+esc+":\n"; 
                                            }
                                            countCl++;

                                            RESULT = new Obj(TRAD);
                                          
              CUP$parser$result = new java_cup.runtime.Symbol(54/*for_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // do_statement ::= DO statement WHILE TONDA_APERTA expression TONDA_CHIUSA PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                            /*if(!espr.tipo.equals("BOOLEAN")){
                                               
                                               checkFlag = true;                                               
                                               parser.report_error("ERROR: IL COSTRUTTO WHILE ACCETTA ESCLUSIVAMENTE IL TIPO BOOLEAN!\n",null);
                                               checkFlag = false;
                                            }*/ 



                                          
              CUP$parser$result = new java_cup.runtime.Symbol(53/*do_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // while_statement_no_short_if ::= WHILE TONDA_APERTA expression TONDA_CHIUSA statement_no_short_if 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statmnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                           String esc = "ESCI"+countCl;

                                           if(!espr.tipo.equals("BOOLEAN")){

                                               checkFlag = true;                                             
                                               parser.report_error("ERROR: IL COSTRUTTO WHILE ACCETTA ESCLUSIVAMENTE IL TIPO BOOLEAN!",espr.linea);
                                               checkFlag = false;

                                               TRAD = "CICLO"+countCl+": "+" "+"SLT \nBEQ "+esc+"\n"+statmnosif.testo+"\nCICLO"+countCl+"\n"+esc+":\n";
                                               
                                            }else{ 

                                                if(espr.testo.contains(".D")){
                                                    espr.testo = espr.testo.concat(", "+esc); 
                                                }else{
                                                    espr.testo = espr.testo.replaceAll("OFFSET",esc); 
                                                }

                                                TRAD = "CICLO"+countCl+": "+" "+espr.testo+"\n"+statmnosif.testo+"\nCICLO"+countCl+"\n"+esc+":\n";
                                            }
                                            countCl++;  

                                            RESULT = new Obj(TRAD);
                                          
              CUP$parser$result = new java_cup.runtime.Symbol(52/*while_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // while_statement ::= WHILE TONDA_APERTA expression TONDA_CHIUSA statement 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                            String esc = "ESCI"+countCl;

                                            if(!espr.tipo.equals("BOOLEAN")){  
                                               
                                               checkFlag = true;                                             
                                               parser.report_error("ERROR: IL COSTRUTTO WHILE ACCETTA ESCLUSIVAMENTE IL TIPO BOOLEAN!\n",espr.linea);
                                               checkFlag = false;

                                               TRAD = "CICLO"+countCl+": "+" "+"SLT \nBEQ "+esc+"\n"+statm.testo+"\nCICLO"+countCl+"\n"+esc+":\n";
                                               
                                            }else{ 

                                                if(espr.testo.contains(".D")){
                                                    espr.testo = espr.testo.concat(", "+esc);
                                                }else{
                                                    espr.testo = espr.testo.replaceAll("OFFSET",esc);
                                                }
                                              
                                                TRAD = "CICLO"+countCl+": "+" "+espr.testo+"\n"+statm.testo+"\nCICLO"+countCl+"\n"+esc+":\n";
                                            }
                                            countCl++;

                                            RESULT = new Obj(TRAD); 
                                          
              CUP$parser$result = new java_cup.runtime.Symbol(51/*while_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if_then_else_statement_no_short_if ::= IF TONDA_APERTA expression TONDA_CHIUSA statement_no_short_if ELSE statement_no_short_if 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statnosif1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statnosif1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj statnosif1 = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statnosif2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statnosif2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statnosif2 = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                            String el = "ELSE"+countCl;

                                            if(!espr.tipo.equals("BOOLEAN")){ 

                                               checkFlag = true;                                              
                                               parser.report_error("ERROR: IL BLOCCO DI SELEZIONE ACCETTA ESCLUSIVAMENTE IL TIPO BOOLEAN!\n",espr.linea);
                                               checkFlag = false;

                                               TRAD = "SLT \nBEQ "+el+"\n"+statnosif1.testo+"\n ESCI"+countCl+"\n"+el+": "+statnosif2.testo+"\nESCI:\n";   
                                               
                                            }else{ 

                                                if(espr.testo.contains(".D")){
                                                    espr.testo = espr.testo.concat(", "+el); 
                                                }else{
                                                    espr.testo = espr.testo.replaceAll("OFFSET",el);
                                                }

                                                TRAD = espr.testo+"\n"+statnosif1.testo+"\n ESCI"+countCl+"\n"+el+": "+statnosif2.testo+"\nESCI:\n";
                                            }                                            
                                            countCl++;

                                            RESULT = new Obj(TRAD);
                                          
              CUP$parser$result = new java_cup.runtime.Symbol(50/*if_then_else_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_then_else_statement ::= IF TONDA_APERTA expression TONDA_CHIUSA statement_no_short_if ELSE statement 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj statnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                            String el = "ELSE"+countCl;

                                            if(!espr.tipo.equals("BOOLEAN")){  

                                               checkFlag = true;                                           
                                               parser.report_error("ERROR: IL BLOCCO DI SELEZIONE ACCETTA ESCLUSIVAMENTE IL TIPO BOOLEAN!\n",espr.linea);
                                               checkFlag = false;
                                               
                                               TRAD = "SLT \nBEQ "+el+"\n"+statnosif.testo+"\n ESCI"+countCl+"\n"+el+": "+
                                                                                     statm.testo+"\nESCI"+countCl+":"+"\n";
                                            }else{                                             

                                                if(espr.testo.contains(".D")){
                                                    espr.testo = espr.testo.concat(", "+el);
                                                }else{
                                                    espr.testo = espr.testo.replaceAll("OFFSET",el);
                                                }
                                             
                                                TRAD = espr.testo+"\n"+statnosif.testo+"\n ESCI"+countCl+"\n"+el+": "+
                                                                                    statm.testo+"\nESCI"+countCl+":"+"\n";                                            
                                            }
                                            countCl++;

                                            RESULT = new Obj(TRAD);
                                          
              CUP$parser$result = new java_cup.runtime.Symbol(49/*if_then_else_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_then_statement ::= IF TONDA_APERTA expression TONDA_CHIUSA statement 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                          String esc = "ESCI"+countCl;

                                                                          if(!espr.tipo.equals("BOOLEAN")){  
                                                                            
                                                                            checkFlag = true;                                                                        
                                                                            parser.report_error("ERROR: IL BLOCCO DI SELEZIONE ACCETTA ESCLUSIVAMENTE IL TIPO BOOLEAN!\n",espr.linea);
                                                                            checkFlag = false;                                                                            
                                                                            
                                                                            TRAD = "SLT\nBEQ "+esc+"\n"+statm.testo+"\n"+esc+":\n"; 

                                                                          }else{ 

                                                                            if(espr.testo.contains(".D")){                                                                              
                                                                              espr.testo = espr.testo.concat(", "+esc);  
                                                                            }else{
                                                                              espr.testo = espr.testo.replaceAll("OFFSET",esc); 
                                                                            }

                                                                            TRAD = espr.testo+"\n"+statm.testo+"\n"+esc+":\n";
                                                                          }
                                                                          countCl++;
                                                                          
                                                                          RESULT = new Obj(TRAD);                                                                          
                                                                        
              CUP$parser$result = new java_cup.runtime.Symbol(48/*if_then_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // statement_expression ::= postdecrement_expression 
            {
              Obj RESULT = null;
		int postdeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj postde = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = postde; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // statement_expression ::= postincrement_expression 
            {
              Obj RESULT = null;
		int postinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postinright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj postin = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = postin; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // statement_expression ::= assignment 
            {
              Obj RESULT = null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj ass = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ass; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression_statement ::= simple_name punteggiatura 
            {
              Obj RESULT = null;
		int simnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj simname = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                                if(sintErr == true){
                                                    String TR;
                                                    SymbolTable.addTb(simname.testo);
                                                    Record rec = SymbolTable.getCurrRec(simname.testo);
                                                                                                    
                                                    rec.setType(typeDeclErr);
                                                    rec.setValue("null"); 
                                                    simname.tipo = typeDeclErr;

                                                    TR = Traduzione.createReg(simname.tipo,simname.testo);
                                                    vTrad.add(TR);
                                                    
                                                    TRAD = Traduzione.tradDecl(simname.tipo,simname.testo);
                                                    dichRecup.add(TRAD);

                                                    sintErr = false;
                                                }else{
                                                    parser.report_error("PRESENZA DI UNA STRINGA PRIVA DI SENSO!\n",simname);
                                                }
                                                
                                                RESULT = new Obj("");
                                               
              CUP$parser$result = new java_cup.runtime.Symbol(46/*expression_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression_statement ::= statement_expression punteggiatura 
            {
              Obj RESULT = null;
		int statesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj statespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = statespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*expression_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // empty_statement ::= PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;
		 RESULT = new Obj(";"); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*empty_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // empty_statement ::= VIRGOLA 
            {
              Obj RESULT = null;
		 parser.report_error("UTILIZZO IMPROPRIO DELLA VIRGOLA!",null);
              CUP$parser$result = new java_cup.runtime.Symbol(45/*empty_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // statement_without_trailing_substatement ::= do_statement 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statement_without_trailing_substatement ::= expression_statement 
            {
              Obj RESULT = null;
		int esprstatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int esprstatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj esprstat = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = esprstat; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statement_without_trailing_substatement ::= empty_statement 
            {
              Obj RESULT = null;
		int emstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int emstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj emstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = emstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement_without_trailing_substatement ::= block 
            {
              Obj RESULT = null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj bl = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = bl; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statement_no_short_if ::= for_statement_no_short_if 
            {
              Obj RESULT = null;
		int fstatmnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fstatmnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj fstatmnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = fstatmnosif; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement_no_short_if ::= while_statement_no_short_if 
            {
              Obj RESULT = null;
		int whstatmnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int whstatmnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj whstatmnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = whstatmnosif; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statement_no_short_if ::= if_then_else_statement_no_short_if 
            {
              Obj RESULT = null;
		int ifTEstatnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ifTEstatnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj ifTEstatnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ifTEstatnosif; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement_no_short_if ::= statement_without_trailing_substatement 
            {
              Obj RESULT = null;
		int swtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int swtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj swts = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = swts; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= for_statement 
            {
              Obj RESULT = null;
		int fstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj fstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = fstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= while_statement 
            {
              Obj RESULT = null;
		int whstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int whstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj whstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = whstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= if_then_else_statement 
            {
              Obj RESULT = null;
		int ifTEstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ifTEstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj ifTEstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ifTEstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= if_then_statement 
            {
              Obj RESULT = null;
		int ifTstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ifTstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj ifTstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ifTstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= statement_without_trailing_substatement 
            {
              Obj RESULT = null;
		int swtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int swtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj swts = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = swts; 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // section_two ::= statement 
            {
              Obj RESULT = null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj stat = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                 if(sintErr == true){
                                    livP = 1;
                                    flagP2 = false;
                                    sintErr = false;
                                 }else{
                                    livP = 2;
                                    flagP2 = true;
                                 } 
                                 RESULT = stat;
                               
              CUP$parser$result = new java_cup.runtime.Symbol(41/*section_two*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // local_variable_declaration ::= FINAL type variable_declarators 
            {
              Obj RESULT = null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj tipo = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj vard = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                                      String Rg;
                                                      String TR;
                                                      String valueErr;
                                                      String number = vard.testo.substring(vard.testo.indexOf("=")+2,vard.testo.length());
                                                      vard.testo = Support.getVar(vard.testo);

                                                      Record rec = SymbolTable.getCurrRec(vard.testo);
                                                      rec.setModifier("final");
                                                      rec.setValue(number);

                                                      CheckClass.checkTypeA(tipo.tipo,vard.tipo,vard.testo);

                                                      if(checkFlag == true){                                                                                                                                                                                                                          
                                                         parser.report_error(Err_War,vard);
                                                         checkFlag = false;  

                                                         if(tipo.tipo.equals("INTEGER")){
                                                                valueErr = vard.testo.substring(vard.testo.indexOf("=")+2,vard.testo.indexOf("."));
                                                                rec.setValue(valueErr);  
                                                         }else{
                                                                    //CAPIRE COSA FARE IN CASI COME QUESTI
                                                         }
                                                      
                                                      }else if(flagWarn == true){
                                                         parser.report_error(Err_War,vard);
                                                         flagWarn = false;
                                                      }                                                      
                                                                                                       
                                                      rec.setType(vard.tipo);                                                      
                                                      
                                                      
                                                      if(vard.tipo.equals("DOUBLE")){
                                                            Rg = "$f"+countRegFP;
                                                            TR = "MOVE.D"+" "+vard.testo+","+" "+Rg;
                                                            countRegFP = countRegFP + 2;
                                                      }else{
                                                            Rg = "$s"+countReg;
                                                            TR = "MOVE"+" "+vard.testo+","+" "+Rg;
                                                            countReg++;
                                                      }
                                                          
                                                          rec.setRegister(Rg);                                
                                                          vTrad.add(TR);

                                                      TRAD = vard.testo+" EQU "+number;
                                                                 
                                                      RESULT = new Obj(TRAD);                                                                                                                               
                                                     
              CUP$parser$result = new java_cup.runtime.Symbol(40/*local_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // local_variable_declaration ::= type variable_declarators 
            {
              Obj RESULT = null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj tipo = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj vard = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
                                                        Record rec;
                                                        String Rg;
                                                        String TR;
                                                        String VAR;
                                                        String valueErr; //variabile utilizzata nel caso ci sia un errore di tipo ( INTEGER-DOUBLE )
                                                        if(vard.tipo.equals("IDENTIFICATORE")){
                                                          
                                                            if(tipo.tipo.equals("ERRORE")){
                                                                vard.tipo = "INTEGER";  //sono tipi di default assegnati senza alcun criterio                                                                
                                                                tipo.tipo = "INTEGER";  //sono tipi di default assegnati senza alcun criterio
                                                                tipo.testo = "int";     //sono tipi di default assegnati senza alcun criterio
                                                            }else{
                                                                vard.tipo = tipo.tipo;
                                                            }
                                                          rec = SymbolTable.getCurrRec(vard.testo);
                                                          rec.setType(vard.tipo);

                                                          TR = Traduzione.createReg(vard.tipo,vard.testo);                                                          
                                                          vTrad.add(TR);
                                                          
                                                        }else{
                                                         
                                                          if(tipo.tipo.equals("ERRORE")){
                                                                tipo.tipo = vard.tipo;  //non avendo riconosciuto il tipo, essendoci un errore sintattico,                                                                
                                                                                        //viene assegnato quello dell'espressione
                                                                if(vard.tipo.equals("INTEGER")){
                                                                    tipo.testo = "int";
                                                                }else {
                                                                    tipo.testo = "double";
                                                                }
                                                          } 

                                                          VAR = Support.getVar(vard.testo);
                                                          rec = SymbolTable.checkVScope(VAR);

                                                          vard.tipo = CheckClass.checkTypeA(tipo.tipo,vard.tipo,vard.testo);

                                                          if(checkFlag == true ){                                                                
                                                                parser.report_error(Err_War,tipo);
                                                                checkFlag = false;

                                                                if(tipo.tipo.equals("INTEGER")){
                                                                    valueErr = vard.testo.substring(vard.testo.indexOf("=")+2,vard.testo.indexOf("."));
                                                                    rec.setValue(valueErr);  
                                                                    
                                                                }else{
                                                                    //CAPIRE COSA FARE IN CASI COME QUESTI
                                                                }

                                                          }else if(flagWarn == true){
                                                               parser.report_error(Err_War,tipo);
                                                               flagWarn = false;
                                                          }

                                                          
                                                          rec.setType(vard.tipo);
                                                          
                                                          if(vard.testo.contains("[]")){                                                    
                                                                
                                                            Rg = "$s"+countReg;
                                                            rec.setRegDim(Rg);
                                                            TR = "MOVE "+"dim"+", "+Rg;
                                                            vTrad.add(TR);    
                                                            countReg++;
                                                                                                                   
                                                            TR = Traduzione.createReg(vard.tipo,VAR);                                                       

                                                          }else{                                                           
                                                                                                                                                                                
                                                             TR = Traduzione.createReg(vard.tipo,VAR);
                                                          }
                                                                                                                     
                                                           vTrad.add(TR);
                                                            
                                                        }
                                                                                                  
                                                       TRAD = Traduzione.tradDecl(tipo.tipo, vard.testo);
                                                       
                                                       RESULT = new Obj(TRAD);
                                                       
                                                     
              CUP$parser$result = new java_cup.runtime.Symbol(40/*local_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // local_variable_declaration_statement ::= local_variable_declaration punteggiatura 
            {
              Obj RESULT = null;
		int lvdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj lvd = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                                                                  
                                                                 livP = 1;                                                                 
                                                                 RESULT = lvd; 
                                                               
              CUP$parser$result = new java_cup.runtime.Symbol(39/*local_variable_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // block_statement ::= class_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*block_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // block_statement ::= section_two 
            {
              Obj RESULT = null;
		int sectwoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sectworight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj sectwo = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = sectwo; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*block_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // block_statement ::= local_variable_declaration_statement 
            {
              Obj RESULT = null;
		int lvdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lvdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj lvds = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                            structProg(livP,flagP1,lvds.testo);
                                                            RESULT = new Obj("");
                                                          
              CUP$parser$result = new java_cup.runtime.Symbol(38/*block_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // block_statements ::= block_statements block_statement 
            {
              Obj RESULT = null;
		int blstatmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blstatmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj blstatms = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj blstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(blstatms.testo+"\n"+blstatm.testo); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*block_statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // block_statements ::= block_statement 
            {
              Obj RESULT = null;
		int blstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj blstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = blstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*block_statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // block_statements_opt ::= block_statements 
            {
              Obj RESULT = null;
		int blstatmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blstatmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj blstatms = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = blstatms; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*block_statements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // block_statements_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*block_statements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // block ::= LBRACE NT$2 block_statements_opt RBRACE 
            {
              Obj RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blstatmsoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blstatmsoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj blstatmso = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = blstatmso;
                                                                                       UtilParser.delScope();
                                                                                     
              CUP$parser$result = new java_cup.runtime.Symbol(35/*block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$2 ::= 
            {
              Object RESULT = null;
 UtilParser.newScope(); 
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variable_initializers ::= variable_initializers VIRGOLA variable_initializer 
            {
              Obj RESULT = null;
		int varinitsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varinitsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj varinits = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj varinit = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                                                                      if(varinits.tipo.equals(varinit.tipo)){
                                                                                         varinits.tipo = varinits.tipo;
                                                                                      }else{
                                                                                         varinits.tipo="DOUBLE";
                                                                                      }
                                                                                                                                                                            
                                                                                      RESULT = new Obj(varinits.testo+", "+varinit.testo,varinits.tipo); 
                                                                                     
              CUP$parser$result = new java_cup.runtime.Symbol(34/*variable_initializers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variable_initializers ::= variable_initializer 
            {
              Obj RESULT = null;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj varinit = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = varinit; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*variable_initializers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // array_initializer ::= LBRACE RBRACE 
            {
              Obj RESULT = null;
		 RESULT = new Obj("{"+"}"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*array_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // array_initializer ::= LBRACE variable_initializers RBRACE 
            {
              Obj RESULT = null;
		int varinitsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varinitsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj varinits = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj(varinits.testo,varinits.tipo); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*array_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // method_body ::= PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;
		int pevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(pev.toString()); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*method_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // method_body ::= block 
            {
              Obj RESULT = null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj bl = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 structProg(livP,flagP2,bl.testo); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*method_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // formal_parameter_list_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*formal_parameter_list_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // method_declarator ::= simple_name TONDA_APERTA formal_parameter_list_opt TONDA_CHIUSA 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fparloptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fparloptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj fparlopt = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj(nome.testo+"("+fparlopt.testo+")");                                                                                                                                                                                                  
                                                                                               
              CUP$parser$result = new java_cup.runtime.Symbol(29/*method_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // method_header ::= modifiers_opt VOID method_declarator 
            {
              Obj RESULT = null;
		int modoptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int modoptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj modopt = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int methdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int methdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj methdecl = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(modopt.testo+" "+"void"+" "+methdecl.testo); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*method_header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // method_declaration ::= method_header method_body 
            {
              Obj RESULT = null;
		int metheadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int metheadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj methead = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int methbodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int methbodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj methbod = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*method_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable_initializer ::= array_initializer 
            {
              Obj RESULT = null;
		int arrinitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int arrinitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj arrinit = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = arrinit; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*variable_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable_initializer ::= expression 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = espr; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*variable_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable_declarator_id ::= variable_declarator_id TONDA_APERTA TONDA_CHIUSA 
            {
              Obj RESULT = null;
		int vardidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vardidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj vardid = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("ERRORE NELLE PARENTESI DEGLI ARRAY!!!\n",null); 
                                                                            RESULT = new Obj(vardid.testo+"["+"]","ARRAY");
                                                                         
              CUP$parser$result = new java_cup.runtime.Symbol(25/*variable_declarator_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable_declarator_id ::= variable_declarator_id LBRACK RBRACK 
            {
              Obj RESULT = null;
		int vardidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vardidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj vardid = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Obj(vardid.testo+"["+"]","ARRAY"); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*variable_declarator_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variable_declarator_id ::= simple_name 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                   SymbolTable.addTb(nome.testo);
                                   
                                    if(checkFlag == true){                                                                                                                                                                                                         
                                        parser.report_error(Err_War,nome);
                                        checkFlag = false;                                                                                 
                                    }
                                                
                                   RESULT = nome; 
                                  
              CUP$parser$result = new java_cup.runtime.Symbol(25/*variable_declarator_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable_declarator ::= variable_declarator_id EQ variable_initializer 
            {
              Obj RESULT = null;
		int vdileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj vdi = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj vi = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                        if(vdi.tipo.equals("ARRAY")){
                                                                          ProdParser.declArr(vdi.testo, vi.testo);
                                                                        }else{
                                                                          Record rec = SymbolTable.getCurrRec(vdi.testo);
                                                                          rec.setValue(vi.testo); 
                                                                        }
                                                                        
                                                                        RESULT = new Obj(vdi.testo+" = "+vi.testo, vi.tipo);                           
                                                                       
              CUP$parser$result = new java_cup.runtime.Symbol(24/*variable_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable_declarator ::= variable_declarator_id 
            {
              Obj RESULT = null;
		int vdileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vdiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj vdi = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                             if(vdi.tipo.equals("ARRAY")){
                                               vdi.testo = vdi.testo.replace("[]", "");
                                               Record rec = SymbolTable.getCurrRec(vdi.testo);
                                               rec.setValue("null");
                                             }else{
                                                Record rec = SymbolTable.getCurrRec(vdi.testo);
                                                rec.setValue("null"); 
                                             }

                                             RESULT = vdi; 
                                            
              CUP$parser$result = new java_cup.runtime.Symbol(24/*variable_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_declarators ::= variable_declarator 
            {
              Obj RESULT = null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj vard = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		                                            
                                            RESULT = new Obj(vard.testo,vard.tipo); 
                                           
              CUP$parser$result = new java_cup.runtime.Symbol(23/*variable_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // class_member_declaration ::= PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*class_member_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // class_member_declaration ::= method_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*class_member_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // class_body_declaration ::= block 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*class_body_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // class_body_declaration ::= constructor_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*class_body_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // class_body_declaration ::= class_member_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*class_body_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // class_body_declarations ::= class_body_declarations class_body_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*class_body_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // class_body_declarations ::= class_body_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*class_body_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // class_body_declarations_opt ::= class_body_declarations 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*class_body_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // class_body_declarations_opt ::= 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*class_body_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // class_body ::= LBRACE NT$1 class_body_declarations_opt RBRACE 
            {
              Obj RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                                                                          UtilParser.delScope();
                                                                                          livP=3; 
                                                                                          structProg(livP,flagP2,"");
                                                                                        
              CUP$parser$result = new java_cup.runtime.Symbol(18/*class_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$1 ::= 
            {
              Object RESULT = null;
 UtilParser.newScope(); 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // class_declaration ::= modifiers_opt CLASS simple_name class_body 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*class_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // modifier ::= FINAL 
            {
              Obj RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(f.toString(),"FINAL"); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // modifier ::= STATIC 
            {
              Obj RESULT = null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(stat.toString(),"STATIC"); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // modifier ::= PRIVATE 
            {
              Obj RESULT = null;
		int privleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object priv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(priv.toString(),"PRIVATE"); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // modifier ::= PUBLIC 
            {
              Obj RESULT = null;
		int publeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pubright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pub = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(pub.toString(),"PUBLIC"); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // modifiers ::= modifiers modifier 
            {
              Obj RESULT = null;
		int modsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int modsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj mods = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj mod = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(mods.testo+" "+mod.testo); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*modifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // modifiers ::= modifier 
            {
              Obj RESULT = null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj mod = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = mod; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*modifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // modifiers_opt ::= modifiers 
            {
              Obj RESULT = null;
		int mod_optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mod_optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj mod_opt = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
                                   ProdParser.mods(mod_opt.testo);  
                                    
                                    if(checkFlag == true){ 
                                       flagWarn = true;                                      
                                       parser.report_error(Err_War, mod_opt);  
                                       flagWarn = false; 
                                       checkFlag = false;
                                    }

                                    RESULT = mod_opt; 
                                   
              CUP$parser$result = new java_cup.runtime.Symbol(14/*modifiers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // modifiers_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*modifiers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_declaration ::= error 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_declaration ::= PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_declaration ::= class_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_declarations ::= type_declarations type_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_declarations ::= type_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_declarations_opt ::= 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*type_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_declarations_opt ::= type_declarations 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*type_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compilation_unit ::= type_declarations_opt 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*compilation_unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // punteggiatura ::= NT$0 type 
            {
              Obj RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj tipo = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                typeDeclErr = tipo.tipo; //capire se Ã¨ necessario anche tipo.testo
                                sintErr = true;                                
                                
              CUP$parser$result = new java_cup.runtime.Symbol(86/*punteggiatura*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$0 ::= 
            {
              Object RESULT = null;
  parser.report_error("PUNTO E VIRGOLA MANCANTE!!!\n", null);
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // punteggiatura ::= PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(86/*punteggiatura*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // punteggiatura ::= PUNTO 
            {
              Obj RESULT = null;
		 parser.report_error("SOSTITUZIONE PUNTO E VIRGOLA CON PUNTO!!!\n",null); 
              CUP$parser$result = new java_cup.runtime.Symbol(86/*punteggiatura*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // punteggiatura ::= VIRGOLA 
            {
              Obj RESULT = null;
		 parser.report_error("SOSTITUZIONE PUNTO E VIRGOLA CON VIRGOLA!!!\n",null); 
              CUP$parser$result = new java_cup.runtime.Symbol(86/*punteggiatura*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simple_name ::= IDENTIFICATORE 
            {
              Obj RESULT = null;
		int indleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.String ind = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(ind.toString(),"IDENTIFICATORE"); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*simple_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // name ::= simple_name 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = nome; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // floating_point_type ::= DOUBLE 
            {
              Obj RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(d.toString(),"DOUBLE"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*floating_point_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // integral_type ::= INT 
            {
              Obj RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(i.toString(),"INTEGER"); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*integral_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // numeric_type ::= error 
            {
              Obj RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                        RESULT = new Obj("errore","ERRORE");
                       
              CUP$parser$result = new java_cup.runtime.Symbol(5/*numeric_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numeric_type ::= floating_point_type 
            {
              Obj RESULT = null;
		int tipo_decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tipo_decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj tipo_dec = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tipo_dec; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*numeric_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // numeric_type ::= integral_type 
            {
              Obj RESULT = null;
		int tipo_interoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tipo_interoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj tipo_intero = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tipo_intero; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*numeric_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primitive_type ::= BOOLEAN 
            {
              Obj RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(b.toString(),"BOOLEAN"); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // primitive_type ::= numeric_type 
            {
              Obj RESULT = null;
		int tipo_numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tipo_numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj tipo_num = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tipo_num; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= primitive_type 
            {
              Obj RESULT = null;
		int tipo_primleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tipo_primright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj tipo_prim = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tipo_prim; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literal ::= NULL_LITERAL 
            {
              Obj RESULT = null;
		 RESULT = new Obj("null",""); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal ::= STRING_LITERAL 
            {
              Obj RESULT = null;
		int strlitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int strlitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.String strlit = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(strlit.replace("\"","\\\""),"STRING"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal ::= CHARACTER_LITERAL 
            {
              Obj RESULT = null;
		int chlitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int chlitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.Character chlit = (java.lang.Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(chlit.toString());  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literal ::= BOOLEAN_LITERAL 
            {
              Obj RESULT = null;
		int boolitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int boolitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.Boolean boolit = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(boolit?"true":"false", "BOOLEAN"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literal ::= FLOATING_POINT_LITERAL 
            {
              Obj RESULT = null;
		int fplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.Number fpl = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(Double.toString((Double)fpl),"DOUBLE", "NUMERO"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literal ::= INTEGER_LITERAL 
            {
              Obj RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.Number il = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(Integer.toString((Integer)il),"INTEGER", "NUMERO"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= compilation_unit 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*goal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj start_val = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

