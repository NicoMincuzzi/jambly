/* The following code was generated by JFlex 1.4.3 on 28/08/14 15.30 */

package com.lefc.jambly;

import java_cup.runtime.*;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/08/14 15.30 from the specification file
 * <tt>Expr.lex</tt>
 */
final class ExprLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\57"+
    "\1\17\1\0\1\6\1\0\1\60\1\20\1\44\1\45\1\5\1\62"+
    "\1\53\1\16\1\14\1\4\1\10\1\64\1\63\1\70\1\65\1\11"+
    "\1\71\1\66\1\67\1\11\1\0\1\52\1\56\1\54\1\55\2\0"+
    "\1\24\1\22\1\26\1\30\1\15\1\13\1\41\1\43\1\32\1\6"+
    "\1\40\1\12\1\34\1\25\1\23\1\35\1\6\1\33\1\27\1\36"+
    "\1\31\1\42\1\37\3\6\1\50\1\21\1\51\1\0\1\6\1\0"+
    "\1\24\1\22\1\26\1\30\1\15\1\13\1\41\1\43\1\32\1\6"+
    "\1\40\1\12\1\34\1\25\1\23\1\35\1\6\1\33\1\27\1\36"+
    "\1\31\1\42\1\37\3\6\1\46\1\61\1\47\1\0\41\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6"+
    "\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6"+
    "\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6"+
    "\7\0\47\6\11\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\1\7\10\0\33\6\5\0\3\6\15\0\4\7\7\0\1\6"+
    "\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0"+
    "\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7"+
    "\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0"+
    "\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6"+
    "\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0"+
    "\31\6\3\7\244\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7"+
    "\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"+
    "\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0"+
    "\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6"+
    "\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0"+
    "\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6"+
    "\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6"+
    "\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0"+
    "\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0"+
    "\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6"+
    "\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0"+
    "\46\6\12\0\53\6\1\0\1\6\3\0\u0149\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0"+
    "\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0"+
    "\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6"+
    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7"+
    "\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7"+
    "\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6"+
    "\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0"+
    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6"+
    "\4\0\12\7\21\0\11\7\14\0\3\7\36\6\12\7\3\0\2\6"+
    "\12\7\6\0\46\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0"+
    "\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\1\7\15\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0"+
    "\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0"+
    "\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0"+
    "\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6\23\0"+
    "\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6\20\0"+
    "\15\6\3\0\32\6\26\0\15\7\4\0\1\7\3\0\14\7\21\0"+
    "\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0"+
    "\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0"+
    "\57\6\1\0\205\6\6\0\4\6\3\7\16\0\46\6\12\0\66\6"+
    "\11\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6"+
    "\65\0\20\6\u0200\0\u19b6\6\112\0\u51cc\6\64\0\u048d\6\103\0\56\6"+
    "\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\14\0"+
    "\2\7\1\0\31\6\10\0\120\6\2\7\45\0\11\6\2\0\147\6"+
    "\2\0\4\6\1\0\2\6\16\0\12\6\120\0\10\6\1\7\3\6"+
    "\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0"+
    "\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6"+
    "\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0"+
    "\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0"+
    "\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6"+
    "\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7"+
    "\1\6\1\7\1\6\30\0\3\6\43\0\6\6\2\0\6\6\2\0"+
    "\6\6\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7"+
    "\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u012e\6"+
    "\2\0\76\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6"+
    "\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6"+
    "\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0\3\6"+
    "\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6"+
    "\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6"+
    "\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6"+
    "\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\5"+
    "\1\7\1\5\1\10\1\11\1\12\12\5\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\3\1\1\26\1\27\2\30\1\31\2\1\2\32"+
    "\1\1\1\2\1\0\1\33\1\34\1\35\1\33\1\0"+
    "\1\36\4\5\1\37\1\0\5\5\1\40\1\41\10\5"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\10\51\1\0\1\33\1\0\1\63\3\5\1\0"+
    "\1\5\1\64\4\5\1\65\7\5\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\2\5\1\76\1\0"+
    "\1\5\1\77\7\5\1\100\1\5\1\101\1\102\1\103"+
    "\1\0\1\5\1\104\6\5\1\105\1\0\1\5\1\106"+
    "\1\107\1\110\1\5\1\111\1\5\1\0\1\112\1\113"+
    "\1\114\3\0\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\256\0\u0122\0\256"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\256"+
    "\0\256\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\256\0\256\0\u0740\0\u077a"+
    "\0\u07b4\0\256\0\u07ee\0\u0828\0\u0862\0\u089c\0\256\0\256"+
    "\0\u08d6\0\u0910\0\256\0\u094a\0\u0984\0\u09be\0\u09f8\0\256"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u015c"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u015c\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u015c\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u015c"+
    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\256"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\u13b6"+
    "\0\u13f0\0\u015c\0\u142a\0\u1464\0\u015c\0\u149e\0\u14d8\0\u1512"+
    "\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u015c\0\u1634\0\u015c\0\u015c"+
    "\0\u015c\0\u166e\0\u16a8\0\u015c\0\u16e2\0\u171c\0\u1756\0\u1790"+
    "\0\u17ca\0\u1804\0\u015c\0\u183e\0\u1878\0\u015c\0\u015c\0\u015c"+
    "\0\u18b2\0\u015c\0\u18ec\0\u1926\0\u015c\0\u015c\0\u015c\0\u1960"+
    "\0\u199a\0\u19d4\0\256";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\11\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\4\1\22\2\11\1\23\1\24\1\25\1\26\1\11"+
    "\1\27\2\11\1\30\1\31\1\32\2\11\1\33\1\11"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\7\13"+
    "\1\53\1\54\1\55\14\53\1\56\1\53\1\57\50\53"+
    "\1\60\1\61\1\62\15\60\1\4\1\63\50\60\74\0"+
    "\1\6\73\0\1\64\1\65\72\0\6\11\1\0\1\11"+
    "\4\0\22\11\17\0\7\11\10\0\2\66\1\67\1\70"+
    "\1\71\1\72\12\0\1\73\32\0\7\66\10\0\2\13"+
    "\1\67\1\70\1\71\1\72\12\0\1\73\32\0\7\13"+
    "\6\0\6\11\1\0\1\11\4\0\1\11\1\74\1\75"+
    "\5\11\1\76\11\11\17\0\7\11\10\0\2\71\51\0"+
    "\7\71\6\0\4\11\1\77\1\11\1\0\1\11\4\0"+
    "\22\11\17\0\7\11\16\0\1\100\44\0\1\101\14\0"+
    "\6\11\1\0\1\11\4\0\1\11\1\102\20\11\17\0"+
    "\7\11\6\0\6\11\1\0\1\103\4\0\7\11\1\104"+
    "\12\11\17\0\7\11\6\0\4\11\1\105\1\11\1\0"+
    "\1\11\4\0\22\11\17\0\7\11\6\0\6\11\1\0"+
    "\1\11\4\0\14\11\1\106\5\11\17\0\7\11\6\0"+
    "\6\11\1\0\1\11\4\0\1\11\1\107\20\11\17\0"+
    "\7\11\6\0\5\11\1\110\1\0\1\11\4\0\3\11"+
    "\1\111\6\11\1\112\7\11\17\0\7\11\6\0\6\11"+
    "\1\0\1\11\4\0\2\11\1\113\4\11\1\114\1\11"+
    "\1\115\10\11\17\0\7\11\6\0\6\11\1\0\1\11"+
    "\4\0\11\11\1\116\10\11\17\0\7\11\6\0\6\11"+
    "\1\0\1\11\4\0\21\11\1\117\17\0\7\11\6\0"+
    "\6\11\1\0\1\11\4\0\1\11\1\120\20\11\17\0"+
    "\7\11\54\0\1\121\71\0\1\122\71\0\1\123\71\0"+
    "\1\124\75\0\1\125\72\0\1\126\72\0\1\127\7\0"+
    "\1\53\2\0\14\53\1\0\1\53\1\0\50\53\2\0"+
    "\1\55\67\0\2\130\1\0\10\130\1\131\3\130\1\132"+
    "\1\133\1\134\1\135\2\130\1\136\5\130\1\137\2\130"+
    "\1\140\33\130\20\0\1\141\53\0\1\62\67\0\2\130"+
    "\1\0\10\130\1\142\3\130\1\143\1\144\1\145\1\146"+
    "\2\130\1\147\5\130\1\150\2\130\1\151\33\130\1\64"+
    "\1\5\1\6\67\64\5\65\1\152\64\65\10\0\2\66"+
    "\1\0\1\70\1\71\1\72\12\0\1\73\32\0\7\66"+
    "\10\0\2\71\1\0\1\70\1\0\1\72\12\0\1\73"+
    "\32\0\7\71\10\0\2\153\4\0\1\154\43\0\1\154"+
    "\7\153\6\0\6\11\1\0\1\11\4\0\11\11\1\155"+
    "\10\11\17\0\7\11\6\0\4\11\1\156\1\11\1\0"+
    "\1\11\4\0\22\11\17\0\7\11\6\0\6\11\1\0"+
    "\1\11\4\0\3\11\1\157\16\11\17\0\7\11\6\0"+
    "\6\11\1\0\1\11\4\0\5\11\1\160\14\11\17\0"+
    "\7\11\64\0\1\161\13\0\6\11\1\0\1\11\4\0"+
    "\1\11\1\162\20\11\17\0\7\11\6\0\6\11\1\0"+
    "\1\11\4\0\15\11\1\163\4\11\17\0\7\11\6\0"+
    "\4\11\1\164\1\11\1\0\1\11\4\0\22\11\17\0"+
    "\7\11\6\0\6\11\1\0\1\11\4\0\2\11\1\165"+
    "\17\11\17\0\7\11\6\0\6\11\1\0\1\11\4\0"+
    "\2\11\1\166\17\11\17\0\7\11\6\0\6\11\1\0"+
    "\1\11\4\0\7\11\1\167\12\11\17\0\7\11\6\0"+
    "\6\11\1\0\1\11\4\0\14\11\1\170\5\11\17\0"+
    "\7\11\6\0\6\11\1\0\1\11\4\0\13\11\1\171"+
    "\6\11\17\0\7\11\6\0\6\11\1\0\1\11\4\0"+
    "\4\11\1\172\15\11\17\0\7\11\6\0\6\11\1\0"+
    "\1\11\4\0\1\173\21\11\17\0\7\11\6\0\6\11"+
    "\1\0\1\11\4\0\10\11\1\174\11\11\17\0\7\11"+
    "\6\0\6\11\1\0\1\11\4\0\7\11\1\175\12\11"+
    "\17\0\7\11\6\0\6\11\1\0\1\11\4\0\10\11"+
    "\1\176\11\11\17\0\7\11\6\0\6\11\1\0\1\11"+
    "\4\0\10\11\1\177\11\11\17\0\7\11\20\0\1\200"+
    "\71\0\1\201\71\0\1\202\71\0\1\203\71\0\1\204"+
    "\71\0\1\205\71\0\1\206\71\0\1\207\51\0\4\65"+
    "\1\6\1\152\64\65\10\0\2\153\1\0\1\70\14\0"+
    "\1\73\32\0\7\153\10\0\2\153\51\0\7\153\6\0"+
    "\6\11\1\0\1\11\4\0\5\11\1\210\14\11\17\0"+
    "\7\11\6\0\6\11\1\0\1\11\4\0\2\11\1\211"+
    "\17\11\17\0\7\11\6\0\6\11\1\0\1\212\4\0"+
    "\22\11\17\0\7\11\65\0\1\213\12\0\4\11\1\214"+
    "\1\11\1\0\1\11\4\0\22\11\17\0\7\11\6\0"+
    "\4\11\1\215\1\11\1\0\1\11\4\0\22\11\17\0"+
    "\7\11\6\0\6\11\1\0\1\11\4\0\5\11\1\216"+
    "\14\11\17\0\7\11\6\0\6\11\1\0\1\11\4\0"+
    "\14\11\1\217\5\11\17\0\7\11\6\0\6\11\1\0"+
    "\1\11\4\0\1\220\21\11\17\0\7\11\6\0\6\11"+
    "\1\0\1\11\4\0\1\11\1\221\20\11\17\0\7\11"+
    "\6\0\6\11\1\0\1\11\4\0\16\11\1\222\3\11"+
    "\17\0\7\11\6\0\4\11\1\223\1\11\1\0\1\11"+
    "\4\0\22\11\17\0\7\11\6\0\6\11\1\0\1\11"+
    "\4\0\20\11\1\224\1\11\17\0\7\11\6\0\6\11"+
    "\1\0\1\225\4\0\22\11\17\0\7\11\6\0\4\11"+
    "\1\226\1\11\1\0\1\11\4\0\22\11\17\0\7\11"+
    "\6\0\6\11\1\0\1\11\4\0\6\11\1\227\13\11"+
    "\17\0\7\11\6\0\6\11\1\0\1\230\4\0\22\11"+
    "\17\0\7\11\6\0\4\11\1\231\1\11\1\0\1\11"+
    "\4\0\22\11\17\0\7\11\66\0\1\232\11\0\6\11"+
    "\1\0\1\233\4\0\22\11\17\0\7\11\6\0\6\11"+
    "\1\0\1\11\4\0\5\11\1\234\14\11\17\0\7\11"+
    "\6\0\6\11\1\0\1\11\4\0\10\11\1\235\11\11"+
    "\17\0\7\11\6\0\4\11\1\236\1\11\1\0\1\11"+
    "\4\0\22\11\17\0\7\11\6\0\6\11\1\0\1\11"+
    "\4\0\11\11\1\237\10\11\17\0\7\11\6\0\6\11"+
    "\1\0\1\11\4\0\2\11\1\240\17\11\17\0\7\11"+
    "\6\0\6\11\1\0\1\11\4\0\10\11\1\241\11\11"+
    "\17\0\7\11\6\0\6\11\1\0\1\11\4\0\2\11"+
    "\1\242\17\11\17\0\7\11\6\0\6\11\1\0\1\243"+
    "\4\0\22\11\17\0\7\11\65\0\1\244\12\0\6\11"+
    "\1\0\1\11\4\0\2\11\1\245\17\11\17\0\7\11"+
    "\6\0\6\11\1\0\1\11\4\0\4\11\1\246\15\11"+
    "\17\0\7\11\6\0\6\11\1\0\1\247\4\0\22\11"+
    "\17\0\7\11\6\0\6\11\1\0\1\11\4\0\14\11"+
    "\1\250\5\11\17\0\7\11\6\0\6\11\1\0\1\11"+
    "\4\0\17\11\1\251\2\11\17\0\7\11\6\0\6\11"+
    "\1\0\1\11\4\0\4\11\1\252\15\11\17\0\7\11"+
    "\6\0\6\11\1\0\1\11\4\0\14\11\1\253\5\11"+
    "\17\0\7\11\67\0\1\254\10\0\6\11\1\0\1\11"+
    "\4\0\3\11\1\255\16\11\17\0\7\11\6\0\6\11"+
    "\1\0\1\256\4\0\22\11\17\0\7\11\6\0\6\11"+
    "\1\0\1\257\4\0\22\11\17\0\7\11\70\0\1\260"+
    "\72\0\1\261\65\0\1\262\73\0\1\263\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6670];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\7\1\2\11"+
    "\12\1\10\11\11\1\2\11\3\1\1\11\2\1\1\0"+
    "\1\1\2\11\1\1\1\0\1\11\4\1\1\11\1\0"+
    "\17\1\21\11\10\1\1\0\1\1\1\0\4\1\1\0"+
    "\16\1\10\11\3\1\1\0\16\1\1\0\11\1\1\0"+
    "\7\1\1\0\3\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   StringBuilder string = new StringBuilder();
 
   private Symbol sym(int type)
   {
     return sym(type, yytext());
   }

   private Symbol sym(int type, Object value)
   {
     return new Symbol(type, yyline, yycolumn, value);
   }

   public int getLine()
   {
     return yyline+1;
   }
   
   public int getCurrentPos()
   {
      return zzCurrentPos;
   }
   
   public int getColumn()
   {
     return yycolumn;
   }

   
     
   public char[] getBuffer()
   {
     return zzBuffer;
   }

   public PrintText text(int linea) throws IOException
   {
     PrintText pt=new PrintText();
     pt.textAndLine(linea,zzBuffer);
          
     return pt;
   }
     
   public PrintText text() throws IOException
   {
     PrintText pt=new PrintText();
     pt.textAndLine(getCurrentPos(), getColumn(), getLine(),zzBuffer);
          
     return pt;
   } 
 
public int countBrace2=0;
public int pos_par_open=0;
public int pos_par_close=0;
public int pos_vir=0;
public int get_brace()
{
  return countBrace2;
}
public int get_open_par()
{
   return pos_par_open;
}
public int get_close_par()
{
    return pos_par_close;

}
public int getPos_vir()
{

  return pos_vir;
}  
 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ExprLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ExprLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 73: 
          { return sym(sym.PUBLIC);
          }
        case 78: break;
        case 9: 
          { yybegin(STRING); string.setLength(0);
          }
        case 79: break;
        case 37: 
          { return sym(sym.NOTEQ);
          }
        case 80: break;
        case 69: 
          { return sym(sym.WHILE);
          }
        case 81: break;
        case 60: 
          { yybegin(YYINITIAL); return new Symbol(sym.CHARACTER_LITERAL, '\r');
          }
        case 82: break;
        case 34: 
          { return sym(sym.EQEQ);
          }
        case 83: break;
        case 56: 
          { yybegin(YYINITIAL); return new Symbol(sym.CHARACTER_LITERAL, '\'');
          }
        case 84: break;
        case 61: 
          { yybegin(YYINITIAL); return new Symbol(sym.CHARACTER_LITERAL, '\t');
          }
        case 85: break;
        case 11: 
          { return sym(sym.TONDA_APERTA);
          }
        case 86: break;
        case 49: 
          { string.append( '\t' );
          }
        case 87: break;
        case 14: 
          { countBrace2--;  
                                                                     
                                     pos_par_close=yyline+1; 
                                    return sym(sym.RBRACE);
          }
        case 88: break;
        case 3: 
          { return sym(sym.DIVISO);
          }
        case 89: break;
        case 66: 
          { return new Symbol(sym.BOOLEAN_LITERAL, false);
          }
        case 90: break;
        case 25: 
          { yybegin(YYINITIAL); return new Symbol(sym.STRING_LITERAL, string.toString());
          }
        case 91: break;
        case 77: 
          { return new Symbol(sym.INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
          }
        case 92: break;
        case 10: 
          { yybegin(CHARLITERAL);
          }
        case 93: break;
        case 47: 
          { string.append( '\n' );
          }
        case 94: break;
        case 7: 
          { return sym(sym.PUNTO);
          }
        case 95: break;
        case 20: 
          { return sym(sym.GT);
          }
        case 96: break;
        case 71: 
          { return sym(sym.DOUBLE);
          }
        case 97: break;
        case 19: 
          { return sym(sym.EQ);
          }
        case 98: break;
        case 32: 
          { return sym(sym.DO);
          }
        case 99: break;
        case 13: 
          { countBrace2++;
                                  
                                  pos_par_open=yyline+1;
                                  
                                    return sym(sym.LBRACE);
          }
        case 100: break;
        case 74: 
          { return sym(sym.BOOLEAN);
          }
        case 101: break;
        case 27: 
          { return new Symbol(sym.FLOATING_POINT_LITERAL, new Double(yytext()));
          }
        case 102: break;
        case 18: 
          { return sym(sym.VIRGOLA);
          }
        case 103: break;
        case 21: 
          { return sym(sym.LT);
          }
        case 104: break;
        case 4: 
          { return sym(sym.PER);
          }
        case 105: break;
        case 22: 
          { return sym(sym.PIU);
          }
        case 106: break;
        case 76: 
          { return sym(sym.PRIVATE);
          }
        case 107: break;
        case 68: 
          { return sym(sym.CLASS);
          }
        case 108: break;
        case 6: 
          { return new Symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
          }
        case 109: break;
        case 57: 
          { yybegin(YYINITIAL); return new Symbol(sym.CHARACTER_LITERAL, '\\');
          }
        case 110: break;
        case 16: 
          { return sym(sym.RBRACK);
          }
        case 111: break;
        case 41: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 112: break;
        case 72: 
          { return sym(sym.IMPORT);
          }
        case 113: break;
        case 63: 
          { return sym(sym.NULL_LITERAL);
          }
        case 114: break;
        case 64: 
          { return new Symbol(sym.BOOLEAN_LITERAL, true);
          }
        case 115: break;
        case 48: 
          { string.append( '\r' );
          }
        case 116: break;
        case 46: 
          { string.append( '\b' );
          }
        case 117: break;
        case 12: 
          { return sym(sym.TONDA_CHIUSA);
          }
        case 118: break;
        case 30: 
          { return new Symbol(sym.FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
          }
        case 119: break;
        case 51: 
          { return sym(sym.FOR);
          }
        case 120: break;
        case 24: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 121: break;
        case 36: 
          { return sym(sym.LTEQ);
          }
        case 122: break;
        case 43: 
          { string.append( '\"' );
          }
        case 123: break;
        case 75: 
          { return sym(sym.PACKAGE);
          }
        case 124: break;
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
          }
        case 125: break;
        case 65: 
          { return sym(sym.VOID);
          }
        case 126: break;
        case 58: 
          { yybegin(YYINITIAL); return new Symbol(sym.CHARACTER_LITERAL, '\b');
          }
        case 127: break;
        case 28: 
          { return new Symbol(sym.INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
          }
        case 128: break;
        case 52: 
          { return sym(sym.NEW);
          }
        case 129: break;
        case 44: 
          { string.append( '\'' );
          }
        case 130: break;
        case 45: 
          { string.append( '\\' );
          }
        case 131: break;
        case 39: 
          { return sym(sym.OROR);
          }
        case 132: break;
        case 31: 
          { return sym(sym.MINUSMINUS);
          }
        case 133: break;
        case 15: 
          { return sym(sym.LBRACK);
          }
        case 134: break;
        case 38: 
          { return sym(sym.ANDAND);
          }
        case 135: break;
        case 54: 
          { yybegin(YYINITIAL); return new Symbol(sym.CHARACTER_LITERAL, '\f');
          }
        case 136: break;
        case 62: 
          { return sym(sym.ELSE);
          }
        case 137: break;
        case 50: 
          { yybegin(YYINITIAL); return new Symbol(sym.CHARACTER_LITERAL, yytext().charAt(0));
          }
        case 138: break;
        case 67: 
          { return sym(sym.FINAL);
          }
        case 139: break;
        case 42: 
          { string.append( '\f' );
          }
        case 140: break;
        case 33: 
          { return sym(sym.IF);
          }
        case 141: break;
        case 29: 
          { return new Symbol(sym.FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
          }
        case 142: break;
        case 35: 
          { return sym(sym.GTEQ);
          }
        case 143: break;
        case 17: 
          { pos_vir=yyline+1; return sym(sym.PUNTO_E_VIRGOLA);
          }
        case 144: break;
        case 40: 
          { return sym(sym.PLUSPLUS);
          }
        case 145: break;
        case 23: 
          { string.append( yytext() );
          }
        case 146: break;
        case 8: 
          { return sym(sym.MENO);
          }
        case 147: break;
        case 26: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 148: break;
        case 70: 
          { return sym(sym.STATIC);
          }
        case 149: break;
        case 53: 
          { return sym(sym.INT);
          }
        case 150: break;
        case 5: 
          { return new Symbol(sym.IDENTIFICATORE, yytext());
          }
        case 151: break;
        case 59: 
          { yybegin(YYINITIAL); return new Symbol(sym.CHARACTER_LITERAL, '\n');
          }
        case 152: break;
        case 55: 
          { yybegin(YYINITIAL); return new Symbol(sym.CHARACTER_LITERAL, '\"');
          }
        case 153: break;
        case 2: 
          { 
          }
        case 154: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol(sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface compilatore.sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ExprLex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        ExprLex scanner = null;
        try {
          scanner = new ExprLex( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
