
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jun 17 16:48:27 CEST 2014
//----------------------------------------------------

package compilatore;

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import compilatore.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/** CUP v0.10k generated parser.
  * @version Tue Jun 17 16:48:27 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\011\003\000\002\012" +
    "\003\000\002\013\003\000\002\014\005\000\002\015\003" +
    "\000\002\015\002\000\002\017\003\000\002\017\002\000" +
    "\002\021\003\000\002\021\002\000\002\020\003\000\002" +
    "\020\004\000\002\022\003\000\002\022\004\000\002\016" +
    "\005\000\002\023\003\000\002\023\003\000\002\024\005" +
    "\000\002\025\007\000\002\026\003\000\002\026\003\000" +
    "\002\027\002\000\002\027\003\000\002\030\003\000\002" +
    "\030\004\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\006\000\002\140\002" +
    "\000\002\033\006\000\002\035\002\000\002\035\003\000" +
    "\002\034\003\000\002\034\004\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\006\000\002\041\003" +
    "\000\002\041\005\000\002\042\003\000\002\042\005\000" +
    "\002\043\003\000\002\043\005\000\002\044\003\000\002" +
    "\044\003\000\002\045\004\000\002\046\005\000\002\047" +
    "\006\000\002\050\002\000\002\051\003\000\002\051\003" +
    "\000\002\053\006\000\002\053\005\000\002\053\005\000" +
    "\002\053\004\000\002\054\003\000\002\054\005\000\002" +
    "\141\002\000\002\055\006\000\002\056\002\000\002\056" +
    "\003\000\002\057\003\000\002\057\004\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\061\004\000" +
    "\002\062\004\000\002\062\005\000\002\063\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\067\003\000\002\070\004\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\072\007\000\002\073\011" +
    "\000\002\074\011\000\002\075\007\000\002\076\007\000" +
    "\002\077\011\000\002\100\013\000\002\101\013\000\002" +
    "\102\002\000\002\102\003\000\002\103\003\000\002\103" +
    "\003\000\002\104\002\000\002\104\003\000\002\105\003" +
    "\000\002\106\003\000\002\106\005\000\002\107\003\000" +
    "\002\107\003\000\002\110\003\000\002\110\005\000\002" +
    "\110\003\000\002\111\006\000\002\111\006\000\002\112" +
    "\003\000\002\113\005\000\002\114\002\000\002\114\003" +
    "\000\002\115\004\000\002\115\005\000\002\116\006\000" +
    "\002\117\003\000\002\117\003\000\002\117\003\000\002" +
    "\117\003\000\002\120\004\000\002\121\004\000\002\122" +
    "\003\000\002\123\003\000\002\123\003\000\002\124\007" +
    "\000\002\125\003\000\002\125\005\000\002\125\005\000" +
    "\002\126\003\000\002\126\005\000\002\126\005\000\002" +
    "\127\003\000\002\127\005\000\002\127\005\000\002\127" +
    "\005\000\002\127\005\000\002\130\003\000\002\130\005" +
    "\000\002\130\005\000\002\131\003\000\002\131\005\000" +
    "\002\132\003\000\002\132\005\000\002\133\003\000\002" +
    "\133\003\000\002\134\005\000\002\135\003\000\002\135" +
    "\003\000\002\136\002\000\002\136\003\000\002\137\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\024\002\uffee\012\uffee\022\006\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\030\uffee\001\002\000\022" +
    "\002\uffec\012\uffec\023\020\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\001\002\000\004\002\015\001\002\000\004" +
    "\062\012\001\002\000\022\002\uffef\012\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\001\002\000\004" +
    "\002\000\001\002\000\004\012\014\001\002\000\062\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\001\002\000\056\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2" +
    "\017\ufff2\021\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\001\002\000\022\002\uffe5\012\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\001\002" +
    "\000\004\002\001\001\002\000\022\002\uffe3\012\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\001\002" +
    "\000\022\002\uffe9\012\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\001\002\000\004\062\012\001\002" +
    "\000\022\002\uffed\012\uffed\023\020\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\001\002\000\020\002\uffea\012\026" +
    "\024\027\025\032\026\025\027\035\030\uffde\001\002\000" +
    "\022\002\uffe4\012\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\001\002\000\020\002\uffeb\012\026\024" +
    "\027\025\032\026\025\027\035\030\uffde\001\002\000\024" +
    "\004\uffd8\005\uffd8\006\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\001\002\000\020\002\uffdf\012\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\001\002\000" +
    "\024\004\uffda\005\uffda\006\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\001\002\000\024\004\uffdc\005" +
    "\uffdc\006\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\001\002\000\020\002\uffe7\012\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\001\002\000\024\004\uffd9" +
    "\005\uffd9\006\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\001\002\000\024\004\uffdd\005\uffdd\006\uffdd" +
    "\024\027\025\032\026\025\027\035\030\uffdd\031\uffdd\001" +
    "\002\000\004\002\ufff0\001\002\000\024\004\uffd7\005\uffd7" +
    "\006\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\001\002\000\020\002\uffe0\012\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\001\002\000\004\030\040\001" +
    "\002\000\004\062\012\001\002\000\004\015\042\001\002" +
    "\000\030\004\uffd5\005\uffd5\006\uffd5\012\uffd5\015\uffd5\016" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\001\002" +
    "\000\064\002\uffd6\004\uffd6\005\uffd6\006\uffd6\012\uffd6\015" +
    "\uffd6\016\uffd6\020\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\032\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\001\002\000\030\004\uffde\005\uffde\006\uffde\012\047\015" +
    "\051\016\uffd3\024\027\025\032\026\025\027\035\031\uffde" +
    "\001\002\000\030\004\uffce\005\uffce\006\uffce\012\uffce\015" +
    "\uffce\016\uffce\024\uffce\025\uffce\026\uffce\027\uffce\031\uffce" +
    "\001\002\000\030\004\uffcb\005\uffcb\006\uffcb\012\uffcb\015" +
    "\uffcb\016\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb" +
    "\001\002\000\030\004\uffca\005\uffca\006\uffca\012\uffca\015" +
    "\uffca\016\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca" +
    "\001\002\000\030\004\uffcd\005\uffcd\006\uffcd\012\uffcd\015" +
    "\uffcd\016\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\031\uffcd" +
    "\001\002\000\062\004\uffb4\005\uffb4\006\uffb4\012\uffb4\015" +
    "\uffb4\016\uffb4\020\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\001\002\000\006\012\254\015\051\001\002\000\004\016" +
    "\251\001\002\000\030\004\uffd1\005\uffd1\006\uffd1\012\uffd1" +
    "\015\uffd1\016\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\031" +
    "\uffd1\001\002\000\030\004\uffde\005\uffde\006\uffde\012\047" +
    "\015\051\016\uffd2\024\027\025\032\026\025\027\035\031" +
    "\uffde\001\002\000\012\004\063\005\061\006\066\031\064" +
    "\001\002\000\030\004\uffcc\005\uffcc\006\uffcc\012\uffcc\015" +
    "\uffcc\016\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc" +
    "\001\002\000\030\004\uffcf\005\uffcf\006\uffcf\012\uffcf\015" +
    "\uffcf\016\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf" +
    "\001\002\000\010\007\ufff4\021\ufff4\062\ufff4\001\002\000" +
    "\010\007\ufff6\021\ufff6\062\ufff6\001\002\000\010\007\ufff7" +
    "\021\ufff7\062\ufff7\001\002\000\004\062\012\001\002\000" +
    "\010\007\ufff5\021\ufff5\062\ufff5\001\002\000\010\007\ufff3" +
    "\021\ufff3\062\ufff3\001\002\000\004\062\ufff9\001\002\000" +
    "\010\007\ufff8\021\ufff8\062\ufff8\001\002\000\004\062\012" +
    "\001\002\000\012\007\102\012\uffc6\014\uffc6\017\101\001" +
    "\002\000\006\012\uffc8\014\uffc8\001\002\000\006\012\077" +
    "\014\076\001\002\000\012\007\uffc4\012\uffc4\014\uffc4\017" +
    "\uffc4\001\002\000\004\062\012\001\002\000\030\004\uffc9" +
    "\005\uffc9\006\uffc9\012\uffc9\015\uffc9\016\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\031\uffc9\001\002\000\006\012\uffc7" +
    "\014\uffc7\001\002\000\026\015\113\020\115\037\135\055" +
    "\136\056\132\057\111\060\140\061\117\062\012\063\143" +
    "\001\002\000\004\010\103\001\002\000\012\007\uffc3\012" +
    "\uffc3\014\uffc3\017\uffc3\001\002\000\004\017\241\001\002" +
    "\000\050\010\uff74\012\uff74\013\uff74\014\uff74\016\uff74\021" +
    "\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74" +
    "\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74\054" +
    "\uff74\001\002\000\020\010\uff5c\012\uff5c\014\uff5c\016\uff5c" +
    "\021\uff5c\053\216\054\uff5c\001\002\000\014\010\uff53\012" +
    "\uff53\014\uff53\016\uff53\021\uff53\001\002\000\044\010\uff6e" +
    "\012\uff6e\013\uff6e\014\uff6e\016\uff6e\021\uff6e\042\uff6e\043" +
    "\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e" +
    "\052\uff6e\053\uff6e\054\uff6e\001\002\000\050\010\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\016\ufffd\021\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\001\002\000\044" +
    "\010\uff6c\012\uff6c\013\uff6c\014\uff6c\016\uff6c\021\uff6c\042" +
    "\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c" +
    "\051\uff6c\052\uff6c\053\uff6c\054\uff6c\001\002\000\032\014" +
    "\233\015\113\016\232\020\115\037\135\055\136\056\132" +
    "\057\111\060\140\061\117\062\012\063\143\001\002\000" +
    "\044\010\uff70\012\uff70\013\uff70\014\uff70\016\uff70\021\uff70" +
    "\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70\050" +
    "\uff70\051\uff70\052\uff70\053\uff70\054\uff70\001\002\000\032" +
    "\004\063\005\061\006\066\020\115\037\135\055\136\056" +
    "\132\057\111\060\140\061\117\062\012\063\143\001\002" +
    "\000\050\010\uff6f\012\uff6f\013\uff6f\014\uff6f\016\uff6f\021" +
    "\uff6f\040\221\041\220\042\uff6f\043\uff6f\044\uff6f\045\uff6f" +
    "\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054" +
    "\uff6f\001\002\000\050\010\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\016\ufffb\021\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\001\002\000\016\010\uff5a\012\uff5a\014" +
    "\uff5a\016\uff5a\021\uff5a\054\214\001\002\000\050\010\uff73" +
    "\012\uff73\013\uff73\014\uff73\016\uff73\021\uff73\040\uff73\041" +
    "\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73" +
    "\050\uff73\051\uff73\052\uff73\053\uff73\054\uff73\001\002\000" +
    "\010\012\uffc2\014\uffc2\016\uffc2\001\002\000\040\010\uff66" +
    "\012\uff66\014\uff66\016\uff66\021\uff66\042\204\043\205\045" +
    "\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66" +
    "\054\uff66\001\002\000\034\010\uff61\012\uff61\014\uff61\016" +
    "\uff61\021\uff61\045\177\046\200\047\202\050\201\051\uff61" +
    "\052\uff61\053\uff61\054\uff61\001\002\000\024\010\uff5e\012" +
    "\uff5e\014\uff5e\016\uff5e\021\uff5e\051\175\052\174\053\uff5e" +
    "\054\uff5e\001\002\000\050\010\uff84\012\uff84\013\uff84\014" +
    "\uff84\016\uff84\021\uff84\040\uff84\041\uff84\042\uff84\043\uff84" +
    "\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052" +
    "\uff84\053\uff84\054\uff84\001\002\000\050\010\uff76\012\uff76" +
    "\013\uff76\014\uff76\016\uff76\021\uff76\040\uff76\041\uff76\042" +
    "\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76" +
    "\051\uff76\052\uff76\053\uff76\054\uff76\001\002\000\014\010" +
    "\uff59\012\uff59\014\uff59\016\uff59\021\uff59\001\002\000\050" +
    "\010\uff83\012\uff83\013\uff83\014\uff83\016\uff83\021\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83" +
    "\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83\001" +
    "\002\000\050\010\ufffe\012\ufffe\013\ufffe\014\ufffe\016\ufffe" +
    "\021\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe" +
    "\054\ufffe\001\002\000\010\012\uffc1\014\uffc1\016\uffc1\001" +
    "\002\000\050\010\uff82\012\uff82\013\uff82\014\uff82\016\uff82" +
    "\021\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82" +
    "\054\uff82\001\002\000\010\004\063\005\061\006\066\001" +
    "\002\000\050\010\uffff\012\uffff\013\uffff\014\uffff\016\uffff" +
    "\021\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045" +
    "\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff" +
    "\054\uffff\001\002\000\044\010\uff69\012\uff69\013\151\014" +
    "\uff69\016\uff69\021\uff69\042\uff69\043\uff69\044\150\045\uff69" +
    "\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69\054" +
    "\uff69\001\002\000\050\010\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\016\ufffc\021\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\001\002\000\052\010\uff80\012\uff80\013" +
    "\uff80\014\uff80\016\uff80\017\uff56\021\uff80\040\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\001\002\000\006" +
    "\012\uffc5\014\uffc5\001\002\000\050\010\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\016\ufffa\021\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\001\002\000\054\007\145" +
    "\010\uff75\012\uff75\013\uff75\014\uff75\016\uff75\017\uff57\021" +
    "\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75" +
    "\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054" +
    "\uff75\001\002\000\024\020\115\037\135\055\136\056\132" +
    "\057\111\060\140\061\117\062\012\063\143\001\002\000" +
    "\004\010\147\001\002\000\052\010\uff77\012\uff77\013\uff77" +
    "\014\uff77\016\uff77\017\uff77\021\uff77\040\uff77\041\uff77\042" +
    "\uff77\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77" +
    "\051\uff77\052\uff77\053\uff77\054\uff77\001\002\000\024\020" +
    "\115\037\135\055\136\056\132\057\111\060\140\061\117" +
    "\062\012\063\143\001\002\000\024\020\115\037\135\055" +
    "\136\056\132\057\111\060\140\061\117\062\012\063\143" +
    "\001\002\000\044\010\uff6b\012\uff6b\013\uff6b\014\uff6b\016" +
    "\uff6b\021\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b" +
    "\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\001" +
    "\002\000\050\010\uff80\012\uff80\013\uff80\014\uff80\016\uff80" +
    "\021\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045" +
    "\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80" +
    "\054\uff80\001\002\000\052\007\145\010\uff75\012\uff75\013" +
    "\uff75\014\uff75\016\uff75\021\uff75\040\uff75\041\uff75\042\uff75" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\053\uff75\054\uff75\001\002\000\044\010\uff6a" +
    "\012\uff6a\013\uff6a\014\uff6a\016\uff6a\021\uff6a\042\uff6a\043" +
    "\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a" +
    "\052\uff6a\053\uff6a\054\uff6a\001\002\000\004\007\161\001" +
    "\002\000\052\007\uff7d\010\uff7d\012\uff7d\013\uff7d\014\uff7d" +
    "\016\uff7d\021\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044" +
    "\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d" +
    "\053\uff7d\054\uff7d\001\002\000\052\007\172\010\uff7b\012" +
    "\uff7b\013\uff7b\014\uff7b\016\uff7b\021\uff7b\040\uff7b\041\uff7b" +
    "\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050" +
    "\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\001\002\000\026" +
    "\010\166\020\115\037\135\055\136\056\132\057\111\060" +
    "\140\061\117\062\012\063\143\001\002\000\006\007\164" +
    "\015\113\001\002\000\050\010\uff7e\012\uff7e\013\uff7e\014" +
    "\uff7e\016\uff7e\021\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e" +
    "\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052" +
    "\uff7e\053\uff7e\054\uff7e\001\002\000\004\010\165\001\002" +
    "\000\054\007\uff78\010\uff78\012\uff78\013\uff78\014\uff78\015" +
    "\uff78\016\uff78\021\uff78\040\uff78\041\uff78\042\uff78\043\uff78" +
    "\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052" +
    "\uff78\053\uff78\054\uff78\001\002\000\054\007\uff79\010\uff79" +
    "\012\uff79\013\uff79\014\uff79\015\uff79\016\uff79\021\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79" +
    "\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\001" +
    "\002\000\004\010\170\001\002\000\052\007\uff7c\010\uff7c" +
    "\012\uff7c\013\uff7c\014\uff7c\016\uff7c\021\uff7c\040\uff7c\041" +
    "\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c" +
    "\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\001\002\000" +
    "\050\010\uff7f\012\uff7f\013\uff7f\014\uff7f\016\uff7f\021\uff7f" +
    "\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046" +
    "\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f" +
    "\001\002\000\004\010\166\001\002\000\052\007\164\010" +
    "\uff7a\012\uff7a\013\uff7a\014\uff7a\016\uff7a\021\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047" +
    "\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\001\002" +
    "\000\024\020\115\037\135\055\136\056\132\057\111\060" +
    "\140\061\117\062\012\063\143\001\002\000\024\020\115" +
    "\037\135\055\136\056\132\057\111\060\140\061\117\062" +
    "\012\063\143\001\002\000\034\010\uff60\012\uff60\014\uff60" +
    "\016\uff60\021\uff60\045\177\046\200\047\202\050\201\051" +
    "\uff60\052\uff60\053\uff60\054\uff60\001\002\000\024\020\115" +
    "\037\135\055\136\056\132\057\111\060\140\061\117\062" +
    "\012\063\143\001\002\000\024\020\115\037\135\055\136" +
    "\056\132\057\111\060\140\061\117\062\012\063\143\001" +
    "\002\000\024\020\115\037\135\055\136\056\132\057\111" +
    "\060\140\061\117\062\012\063\143\001\002\000\024\020" +
    "\115\037\135\055\136\056\132\057\111\060\140\061\117" +
    "\062\012\063\143\001\002\000\040\010\uff63\012\uff63\014" +
    "\uff63\016\uff63\021\uff63\042\204\043\205\045\uff63\046\uff63" +
    "\047\uff63\050\uff63\051\uff63\052\uff63\053\uff63\054\uff63\001" +
    "\002\000\024\020\115\037\135\055\136\056\132\057\111" +
    "\060\140\061\117\062\012\063\143\001\002\000\024\020" +
    "\115\037\135\055\136\056\132\057\111\060\140\061\117" +
    "\062\012\063\143\001\002\000\044\010\uff67\012\uff67\013" +
    "\151\014\uff67\016\uff67\021\uff67\042\uff67\043\uff67\044\150" +
    "\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053" +
    "\uff67\054\uff67\001\002\000\044\010\uff68\012\uff68\013\151" +
    "\014\uff68\016\uff68\021\uff68\042\uff68\043\uff68\044\150\045" +
    "\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68" +
    "\054\uff68\001\002\000\040\010\uff62\012\uff62\014\uff62\016" +
    "\uff62\021\uff62\042\204\043\205\045\uff62\046\uff62\047\uff62" +
    "\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\001\002\000" +
    "\040\010\uff64\012\uff64\014\uff64\016\uff64\021\uff64\042\204" +
    "\043\205\045\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052" +
    "\uff64\053\uff64\054\uff64\001\002\000\040\010\uff65\012\uff65" +
    "\014\uff65\016\uff65\021\uff65\042\204\043\205\045\uff65\046" +
    "\uff65\047\uff65\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65" +
    "\001\002\000\034\010\uff5f\012\uff5f\014\uff5f\016\uff5f\021" +
    "\uff5f\045\177\046\200\047\202\050\201\051\uff5f\052\uff5f" +
    "\053\uff5f\054\uff5f\001\002\000\024\020\115\037\135\055" +
    "\136\056\132\057\111\060\140\061\117\062\012\063\143" +
    "\001\002\000\020\010\uff5b\012\uff5b\014\uff5b\016\uff5b\021" +
    "\uff5b\053\216\054\uff5b\001\002\000\024\020\115\037\135" +
    "\055\136\056\132\057\111\060\140\061\117\062\012\063" +
    "\143\001\002\000\024\010\uff5d\012\uff5d\014\uff5d\016\uff5d" +
    "\021\uff5d\051\175\052\174\053\uff5d\054\uff5d\001\002\000" +
    "\050\010\uff71\012\uff71\013\uff71\014\uff71\016\uff71\021\uff71" +
    "\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046" +
    "\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054\uff71" +
    "\001\002\000\050\010\uff72\012\uff72\013\uff72\014\uff72\016" +
    "\uff72\021\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72" +
    "\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053" +
    "\uff72\054\uff72\001\002\000\004\021\227\001\002\000\006" +
    "\007\172\021\uff7b\001\002\000\004\021\225\001\002\000" +
    "\024\020\115\037\135\055\136\056\132\057\111\060\140" +
    "\061\117\062\012\063\143\001\002\000\044\010\uff6d\012" +
    "\uff6d\013\uff6d\014\uff6d\016\uff6d\021\uff6d\042\uff6d\043\uff6d" +
    "\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052" +
    "\uff6d\053\uff6d\054\uff6d\001\002\000\050\010\uff81\012\uff81" +
    "\013\uff81\014\uff81\016\uff81\021\uff81\040\uff81\041\uff81\042" +
    "\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81" +
    "\051\uff81\052\uff81\053\uff81\054\uff81\001\002\000\006\014" +
    "\235\016\236\001\002\000\006\014\uffb6\016\uffb6\001\002" +
    "\000\050\010\uffb7\012\uffb7\013\uffb7\014\uffb7\016\uffb7\021" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\001\002\000\004\016\234\001\002\000\050\010\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\016\uffb8\021\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\001\002\000" +
    "\030\015\113\016\240\020\115\037\135\055\136\056\132" +
    "\057\111\060\140\061\117\062\012\063\143\001\002\000" +
    "\050\010\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\021\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\001\002\000\006\014\uffb5\016\uffb5\001\002\000\050\010" +
    "\uffba\012\uffba\013\uffba\014\uffba\016\uffba\021\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\001\002" +
    "\000\024\020\115\037\135\055\136\056\132\057\111\060" +
    "\140\061\117\062\012\063\143\001\002\000\014\010\uff58" +
    "\012\uff58\014\uff58\016\uff58\021\uff58\001\002\000\006\012" +
    "\uffbf\015\uffbf\001\002\000\004\020\245\001\002\000\004" +
    "\021\uffbd\001\002\000\004\021\247\001\002\000\006\012" +
    "\uffbe\015\uffbe\001\002\000\030\004\uffd0\005\uffd0\006\uffd0" +
    "\012\uffd0\015\uffd0\016\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\031\uffd0\001\002\000\064\002\uffd4\004\uffd4\005\uffd4" +
    "\006\uffd4\012\uffd4\015\uffd4\016\uffd4\020\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\032\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061" +
    "\uffd4\062\uffd4\063\uffd4\001\002\000\030\004\uffc0\005\uffc0" +
    "\006\uffc0\012\uffc0\015\uffc0\016\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\031\uffc0\001\002\000\030\004\uffbc\005\uffbc" +
    "\006\uffbc\012\uffbc\015\uffbc\016\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\031\uffbc\001\002\000\030\004\uffbb\005\uffbb" +
    "\006\uffbb\012\uffbb\015\uffbb\016\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\031\uffbb\001\002\000\062\004\063\005\061" +
    "\006\066\012\310\015\051\016\uffb2\020\276\024\027\025" +
    "\032\026\025\027\302\030\uffde\032\267\034\312\035\301" +
    "\036\262\037\135\055\136\056\132\057\111\060\140\061" +
    "\117\062\012\063\143\001\002\000\004\012\u010e\001\002" +
    "\000\062\004\uffa6\005\uffa6\006\uffa6\012\uffa6\015\uffa6\016" +
    "\uffa6\020\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\032\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\055\uffa6\056" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\001\002" +
    "\000\014\012\uff97\014\uff97\021\uff97\040\uff74\041\uff74\001" +
    "\002\000\064\004\uff9e\005\uff9e\006\uff9e\012\uff9e\015\uff9e" +
    "\016\uff9e\020\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\001\002\000\004\020\u0107\001\002\000\062\004\uffa3" +
    "\005\uffa3\006\uffa3\012\uffa3\015\uffa3\016\uffa3\020\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\032\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\055\uffa3\056\uffa3\057\uffa3\060" +
    "\uffa3\061\uffa3\062\uffa3\063\uffa3\001\002\000\004\012\u0106" +
    "\001\002\000\064\004\uff9d\005\uff9d\006\uff9d\012\uff9d\015" +
    "\uff9d\016\uff9d\020\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\001\002\000\010\012\uff98\014\uff98\021\uff98\001" +
    "\002\000\004\020\333\001\002\000\004\016\332\001\002" +
    "\000\062\004\uffad\005\uffad\006\uffad\012\uffad\015\uffad\016" +
    "\uffad\020\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad" +
    "\032\uffad\034\uffad\035\uffad\036\uffad\037\uffad\055\uffad\056" +
    "\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\001\002" +
    "\000\062\004\uffa8\005\uffa8\006\uffa8\012\uffa8\015\uffa8\016" +
    "\uffa8\020\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\032\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\055\uffa8\056" +
    "\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\001\002" +
    "\000\014\012\uff96\014\uff96\021\uff96\040\uff73\041\uff73\001" +
    "\002\000\064\004\uff9b\005\uff9b\006\uff9b\012\uff9b\015\uff9b" +
    "\016\uff9b\020\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\001\002\000\006\040\221\041\220\001\002\000\024" +
    "\020\115\037\135\055\136\056\132\057\111\060\140\061" +
    "\117\062\012\063\143\001\002\000\062\004\uffac\005\uffac" +
    "\006\uffac\012\uffac\015\uffac\016\uffac\020\uffac\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\030\uffac\032\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061" +
    "\uffac\062\uffac\063\uffac\001\002\000\062\004\uffa4\005\uffa4" +
    "\006\uffa4\012\uffa4\015\uffa4\016\uffa4\020\uffa4\024\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\032\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\001\002\000\004\020\326\001\002" +
    "\000\022\004\063\005\061\006\066\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\001\002\000\062\004\uffb0\005\uffb0" +
    "\006\uffb0\012\uffb0\015\uffb0\016\uffb0\020\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\032\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\001\002\000\062\004\uffae\005\uffae" +
    "\006\uffae\012\uffae\015\uffae\016\uffae\020\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\032\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\001\002\000\062\004\uffa7\005\uffa7" +
    "\006\uffa7\012\uffa7\015\uffa7\016\uffa7\020\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\032\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061" +
    "\uffa7\062\uffa7\063\uffa7\001\002\000\064\004\uff9c\005\uff9c" +
    "\006\uff9c\012\uff9c\015\uff9c\016\uff9c\020\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\055\uff9c\056\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\001\002\000\062\004\063" +
    "\005\061\006\066\012\310\015\051\016\uffb1\020\276\024" +
    "\027\025\032\026\025\027\302\030\uffde\032\267\034\312" +
    "\035\301\036\262\037\135\055\136\056\132\057\111\060" +
    "\140\061\117\062\012\063\143\001\002\000\064\004\uff9a" +
    "\005\uff9a\006\uff9a\012\uff9a\015\uff9a\016\uff9a\020\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\032\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\055\uff9a\056\uff9a\057" +
    "\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\001\002\000\062" +
    "\004\uffa5\005\uffa5\006\uffa5\012\uffa5\015\uffa5\016\uffa5\020" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\001\002\000\040" +
    "\012\310\015\051\020\276\032\267\034\312\035\301\036" +
    "\262\037\135\055\136\056\132\057\111\060\140\061\117" +
    "\062\012\063\143\001\002\000\004\062\012\001\002\000" +
    "\006\012\uffaa\014\076\001\002\000\004\035\316\001\002" +
    "\000\004\020\317\001\002\000\024\020\115\037\135\055" +
    "\136\056\132\057\111\060\140\061\117\062\012\063\143" +
    "\001\002\000\004\021\321\001\002\000\004\012\322\001" +
    "\002\000\064\004\uff90\005\uff90\006\uff90\012\uff90\015\uff90" +
    "\016\uff90\020\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030" +
    "\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063" +
    "\uff90\001\002\000\062\004\uffaf\005\uffaf\006\uffaf\012\uffaf" +
    "\015\uffaf\016\uffaf\020\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\032\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\001\002\000\004\062\012\001\002\000\006\012\uffa9" +
    "\014\076\001\002\000\024\020\115\037\135\055\136\056" +
    "\132\057\111\060\140\061\117\062\012\063\143\001\002" +
    "\000\004\021\330\001\002\000\040\012\310\015\051\020" +
    "\276\032\267\034\312\035\301\036\262\037\135\055\136" +
    "\056\132\057\111\060\140\061\117\062\012\063\143\001" +
    "\002\000\062\004\uff92\005\uff92\006\uff92\012\uff92\015\uff92" +
    "\016\uff92\020\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030" +
    "\uff92\032\uff92\034\uff92\035\uff92\036\uff92\037\uff92\055\uff92" +
    "\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\001" +
    "\002\000\066\004\uffb3\005\uffb3\006\uffb3\012\uffb3\015\uffb3" +
    "\016\uffb3\020\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062" +
    "\uffb3\063\uffb3\001\002\000\024\020\115\037\135\055\136" +
    "\056\132\057\111\060\140\061\117\062\012\063\143\001" +
    "\002\000\004\021\335\001\002\000\040\012\310\015\051" +
    "\020\276\032\341\034\312\035\345\036\340\037\135\055" +
    "\136\056\132\057\111\060\140\061\117\062\012\063\143" +
    "\001\002\000\004\033\uffa1\001\002\000\004\033\u0105\001" +
    "\002\000\004\020\362\001\002\000\004\020\353\001\002" +
    "\000\004\033\uff9f\001\002\000\062\004\uff95\005\uff95\006" +
    "\uff95\012\uff95\015\uff95\016\uff95\020\uff95\024\uff95\025\uff95" +
    "\026\uff95\027\uff95\030\uff95\032\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95" +
    "\062\uff95\063\uff95\001\002\000\004\033\uffa0\001\002\000" +
    "\004\020\347\001\002\000\064\004\uffa7\005\uffa7\006\uffa7" +
    "\012\uffa7\015\uffa7\016\uffa7\020\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\032\uffa7\033\uffa2\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061" +
    "\uffa7\062\uffa7\063\uffa7\001\002\000\024\020\115\037\135" +
    "\055\136\056\132\057\111\060\140\061\117\062\012\063" +
    "\143\001\002\000\004\021\351\001\002\000\040\012\310" +
    "\015\051\020\276\032\341\034\312\035\345\036\340\037" +
    "\135\055\136\056\132\057\111\060\140\061\117\062\012" +
    "\063\143\001\002\000\004\033\uff91\001\002\000\024\020" +
    "\115\037\135\055\136\056\132\057\111\060\140\061\117" +
    "\062\012\063\143\001\002\000\004\021\355\001\002\000" +
    "\040\012\310\015\051\020\276\032\341\034\312\035\345" +
    "\036\340\037\135\055\136\056\132\057\111\060\140\061" +
    "\117\062\012\063\143\001\002\000\004\033\357\001\002" +
    "\000\040\012\310\015\051\020\276\032\341\034\312\035" +
    "\345\036\340\037\135\055\136\056\132\057\111\060\140" +
    "\061\117\062\012\063\143\001\002\000\004\033\uff93\001" +
    "\002\000\062\004\uff94\005\uff94\006\uff94\012\uff94\015\uff94" +
    "\016\uff94\020\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030" +
    "\uff94\032\uff94\034\uff94\035\uff94\036\uff94\037\uff94\055\uff94" +
    "\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\001" +
    "\002\000\036\004\063\005\061\006\066\012\uff8d\020\276" +
    "\027\367\037\135\055\136\056\132\057\111\060\140\061" +
    "\117\062\012\063\143\001\002\000\004\012\uff8a\001\002" +
    "\000\010\012\uff86\014\uff86\021\uff86\001\002\000\004\012" +
    "\uff8c\001\002\000\004\012\373\001\002\000\010\004\063" +
    "\005\061\006\066\001\002\000\006\012\uff8b\014\371\001" +
    "\002\000\024\020\276\037\135\055\136\056\132\057\111" +
    "\060\140\061\117\062\012\063\143\001\002\000\010\012" +
    "\uff85\014\uff85\021\uff85\001\002\000\026\012\uff55\020\115" +
    "\037\135\055\136\056\132\057\111\060\140\061\117\062" +
    "\012\063\143\001\002\000\004\012\376\001\002\000\004" +
    "\012\uff54\001\002\000\026\020\276\021\uff89\037\135\055" +
    "\136\056\132\057\111\060\140\061\117\062\012\063\143" +
    "\001\002\000\004\021\uff88\001\002\000\004\021\u0102\001" +
    "\002\000\006\014\371\021\uff87\001\002\000\040\012\310" +
    "\015\051\020\276\032\341\034\312\035\345\036\340\037" +
    "\135\055\136\056\132\057\111\060\140\061\117\062\012" +
    "\063\143\001\002\000\004\033\uff8e\001\002\000\062\004" +
    "\uff8f\005\uff8f\006\uff8f\012\uff8f\015\uff8f\016\uff8f\020\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\032\uff8f\034" +
    "\uff8f\035\uff8f\036\uff8f\037\uff8f\055\uff8f\056\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\063\uff8f\001\002\000\040\012" +
    "\310\015\051\020\276\032\267\034\312\035\301\036\262" +
    "\037\135\055\136\056\132\057\111\060\140\061\117\062" +
    "\012\063\143\001\002\000\062\004\uffab\005\uffab\006\uffab" +
    "\012\uffab\015\uffab\016\uffab\020\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\032\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\001\002\000\036\004\063\005\061\006\066" +
    "\012\uff8d\020\276\027\367\037\135\055\136\056\132\057" +
    "\111\060\140\061\117\062\012\063\143\001\002\000\004" +
    "\012\u0109\001\002\000\026\012\uff55\020\115\037\135\055" +
    "\136\056\132\057\111\060\140\061\117\062\012\063\143" +
    "\001\002\000\004\012\u010b\001\002\000\026\020\276\021" +
    "\uff89\037\135\055\136\056\132\057\111\060\140\061\117" +
    "\062\012\063\143\001\002\000\004\021\u010d\001\002\000" +
    "\040\012\310\015\051\020\276\032\267\034\312\035\301" +
    "\036\262\037\135\055\136\056\132\057\111\060\140\061" +
    "\117\062\012\063\143\001\002\000\064\004\uff99\005\uff99" +
    "\006\uff99\012\uff99\015\uff99\016\uff99\020\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\055\uff99\056\uff99\057\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\001\002\000\024\004\uffdb" +
    "\005\uffdb\006\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\001\002\000\020\002\uffe6\012\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\001\002\000\022\002" +
    "\uffe8\012\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\001\002\000\006\011\u0113\012\u0114\001\002\000" +
    "\004\013\u0115\001\002\000\022\002\uffe2\012\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\001\002\000" +
    "\004\012\u0116\001\002\000\022\002\uffe1\012\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\012\003\004\014\007\015\003\016\006\001" +
    "\001\000\014\017\021\020\020\023\016\024\022\025\015" +
    "\001\001\000\002\001\001\000\006\012\010\013\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\u0111\013\012\001\001\000\010\023\u0110\024\022\025" +
    "\015\001\001\000\020\021\033\022\023\026\030\027\036" +
    "\030\032\031\027\032\035\001\001\000\002\001\001\000" +
    "\014\026\u010f\027\036\030\032\031\027\032\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u010e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\040\001\001" +
    "\000\004\033\042\001\001\000\004\140\043\001\001\000" +
    "\002\001\001\000\032\027\055\030\032\031\027\034\054" +
    "\035\052\036\053\037\057\040\056\045\045\046\051\052" +
    "\044\055\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\141\254\001" +
    "\001\000\006\051\251\055\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\027\055\030\032\031\027\036" +
    "\247\037\057\040\056\045\045\046\051\052\044\055\047" +
    "\001\001\000\014\005\070\006\066\007\067\010\061\011" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\243\047\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\074\041" +
    "\073\042\072\043\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\074\042\077\043\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\004\133\012\143\013\012\044\141\053" +
    "\132\107\126\110\125\111\130\116\140\117\115\120\104" +
    "\121\120\122\111\123\113\124\107\125\136\126\122\127" +
    "\123\130\124\131\105\132\117\133\106\134\127\135\103" +
    "\137\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\004\133\012\143\013\012\044\230\053\132" +
    "\054\227\107\126\110\125\111\130\116\140\117\115\120" +
    "\104\121\120\122\111\123\113\124\107\125\136\126\122" +
    "\127\123\130\124\131\105\132\117\133\106\134\127\135" +
    "\103\137\121\001\001\000\002\001\001\000\070\004\133" +
    "\006\222\007\067\010\061\011\064\012\143\013\012\107" +
    "\126\110\125\111\130\116\140\117\115\120\104\121\120" +
    "\122\111\123\113\124\107\125\136\126\122\127\123\130" +
    "\124\131\105\132\117\133\106\134\127\135\103\137\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\155\007\067\010\061\011\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\004\133\012\143\013\012\107\126\110\125\111\130\116" +
    "\140\117\115\120\104\121\120\122\111\123\113\124\107" +
    "\125\136\126\122\127\123\130\124\131\105\132\117\133" +
    "\106\134\127\135\103\137\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\133\012\153\013\012\107" +
    "\126\110\125\111\130\116\152\117\115\120\104\121\120" +
    "\122\154\123\113\124\107\001\001\000\034\004\133\012" +
    "\153\013\012\107\126\110\125\111\130\116\152\117\115" +
    "\120\104\121\120\122\151\123\113\124\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\112\157\113\156\115\161\001\001\000" +
    "\002\001\001\000\006\114\170\115\172\001\001\000\060" +
    "\004\133\012\143\013\012\107\126\110\125\111\130\116" +
    "\140\117\115\120\104\121\120\122\111\123\113\124\107" +
    "\125\136\126\122\127\123\130\124\131\105\132\117\133" +
    "\106\134\127\135\103\137\166\001\001\000\004\053\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\133\012\153\013\012\107\126\110\125\111\130" +
    "\116\152\117\115\120\104\121\120\122\111\123\113\124" +
    "\107\125\136\126\122\127\212\001\001\000\042\004\133" +
    "\012\153\013\012\107\126\110\125\111\130\116\152\117" +
    "\115\120\104\121\120\122\111\123\113\124\107\125\136" +
    "\126\122\127\175\001\001\000\002\001\001\000\040\004" +
    "\133\012\153\013\012\107\126\110\125\111\130\116\152" +
    "\117\115\120\104\121\120\122\111\123\113\124\107\125" +
    "\136\126\211\001\001\000\040\004\133\012\153\013\012" +
    "\107\126\110\125\111\130\116\152\117\115\120\104\121" +
    "\120\122\111\123\113\124\107\125\136\126\210\001\001" +
    "\000\040\004\133\012\153\013\012\107\126\110\125\111" +
    "\130\116\152\117\115\120\104\121\120\122\111\123\113" +
    "\124\107\125\136\126\207\001\001\000\040\004\133\012" +
    "\153\013\012\107\126\110\125\111\130\116\152\117\115" +
    "\120\104\121\120\122\111\123\113\124\107\125\136\126" +
    "\202\001\001\000\002\001\001\000\036\004\133\012\153" +
    "\013\012\107\126\110\125\111\130\116\152\117\115\120" +
    "\104\121\120\122\111\123\113\124\107\125\206\001\001" +
    "\000\036\004\133\012\153\013\012\107\126\110\125\111" +
    "\130\116\152\117\115\120\104\121\120\122\111\123\113" +
    "\124\107\125\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\004\133\012\153\013\012\107" +
    "\126\110\125\111\130\116\152\117\115\120\104\121\120" +
    "\122\111\123\113\124\107\125\136\126\122\127\123\130" +
    "\124\131\214\001\001\000\002\001\001\000\044\004\133" +
    "\012\153\013\012\107\126\110\125\111\130\116\152\117" +
    "\115\120\104\121\120\122\111\123\113\124\107\125\136" +
    "\126\122\127\123\130\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\114\223\115\172\001\001\000\002\001\001\000\034\004" +
    "\133\012\153\013\012\107\126\110\125\111\130\116\152" +
    "\117\115\120\104\121\120\122\225\123\113\124\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\004\133\012\143\013\012\044\236" +
    "\053\132\107\126\110\125\111\130\116\140\117\115\120" +
    "\104\121\120\122\111\123\113\124\107\125\136\126\122" +
    "\127\123\130\124\131\105\132\117\133\106\134\127\135" +
    "\103\137\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\004\133\012\143\013\012\107" +
    "\126\110\125\111\130\116\140\117\115\120\104\121\120" +
    "\122\111\123\113\124\107\125\136\126\122\127\123\130" +
    "\124\131\105\132\117\133\241\134\127\135\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\116\004\133\005\312" +
    "\006\066\007\067\010\061\011\064\012\143\013\012\027" +
    "\036\030\032\031\027\032\276\055\260\056\267\057\306" +
    "\060\302\061\303\062\263\063\270\064\271\066\304\067" +
    "\264\070\305\071\255\072\256\073\310\075\277\077\273" +
    "\100\262\107\126\110\125\111\130\116\140\117\274\120" +
    "\257\121\272\134\265\135\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\004\133\012" +
    "\143\013\012\107\126\110\125\111\130\116\140\117\115" +
    "\120\104\121\120\122\111\123\113\124\107\125\136\126" +
    "\122\127\123\130\124\131\105\132\117\133\106\134\127" +
    "\135\103\137\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\323\006\066\007\067" +
    "\010\061\011\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\112\004\133" +
    "\005\312\006\066\007\067\010\061\011\064\012\143\013" +
    "\012\027\036\030\032\031\027\032\276\055\260\060\322" +
    "\061\303\062\263\063\270\064\271\066\304\067\264\070" +
    "\305\071\255\072\256\073\310\075\277\077\273\100\262" +
    "\107\126\110\125\111\130\116\140\117\274\120\257\121" +
    "\272\134\265\135\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\004\133\012\143\013\012\055\260\064" +
    "\314\066\304\067\264\070\305\071\255\072\256\073\310" +
    "\075\277\077\273\100\262\107\126\110\125\111\130\116" +
    "\140\117\274\120\257\121\272\134\265\135\103\001\001" +
    "\000\012\013\074\041\313\042\072\043\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\004\133\012\143\013\012\107\126\110\125\111\130\116" +
    "\140\117\115\120\104\121\120\122\111\123\113\124\107" +
    "\125\136\126\122\127\123\130\124\131\105\132\117\133" +
    "\106\134\127\135\103\137\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\074\041\324\042\072\043\071\001\001\000\002" +
    "\001\001\000\060\004\133\012\143\013\012\107\126\110" +
    "\125\111\130\116\140\117\115\120\104\121\120\122\111" +
    "\123\113\124\107\125\136\126\122\127\123\130\124\131" +
    "\105\132\117\133\106\134\127\135\103\137\326\001\001" +
    "\000\002\001\001\000\060\004\133\012\143\013\012\055" +
    "\260\064\330\066\304\067\264\070\305\071\255\072\256" +
    "\073\310\075\277\077\273\100\262\107\126\110\125\111" +
    "\130\116\140\117\274\120\257\121\272\134\265\135\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\004" +
    "\133\012\143\013\012\107\126\110\125\111\130\116\140" +
    "\117\115\120\104\121\120\122\111\123\113\124\107\125" +
    "\136\126\122\127\123\130\124\131\105\132\117\133\106" +
    "\134\127\135\103\137\333\001\001\000\002\001\001\000" +
    "\070\004\133\012\143\013\012\055\260\064\342\065\336" +
    "\066\345\067\264\070\305\071\255\072\256\073\310\074" +
    "\335\075\277\076\343\077\273\100\262\101\341\107\126" +
    "\110\125\111\130\116\140\117\274\120\257\121\272\134" +
    "\265\135\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\004\133\012\143\013\012\107\126\110" +
    "\125\111\130\116\140\117\115\120\104\121\120\122\111" +
    "\123\113\124\107\125\136\126\122\127\123\130\124\131" +
    "\105\132\117\133\106\134\127\135\103\137\347\001\001" +
    "\000\002\001\001\000\070\004\133\012\143\013\012\055" +
    "\260\064\330\065\351\066\345\067\264\070\305\071\255" +
    "\072\256\073\310\074\335\075\277\076\343\077\273\100" +
    "\262\101\341\107\126\110\125\111\130\116\140\117\274" +
    "\120\257\121\272\134\265\135\103\001\001\000\002\001" +
    "\001\000\060\004\133\012\143\013\012\107\126\110\125" +
    "\111\130\116\140\117\115\120\104\121\120\122\111\123" +
    "\113\124\107\125\136\126\122\127\123\130\124\131\105" +
    "\132\117\133\106\134\127\135\103\137\353\001\001\000" +
    "\002\001\001\000\070\004\133\012\143\013\012\055\260" +
    "\064\342\065\355\066\345\067\264\070\305\071\255\072" +
    "\256\073\310\074\335\075\277\076\343\077\273\100\262" +
    "\101\341\107\126\110\125\111\130\116\140\117\274\120" +
    "\257\121\272\134\265\135\103\001\001\000\002\001\001" +
    "\000\070\004\133\012\143\013\012\055\260\064\360\065" +
    "\357\066\345\067\264\070\305\071\255\072\256\073\310" +
    "\074\335\075\277\076\343\077\273\100\262\101\341\107" +
    "\126\110\125\111\130\116\140\117\274\120\257\121\272" +
    "\134\265\135\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\004\133\005\312\006\066\007\067\010\061" +
    "\011\064\012\143\013\012\062\362\071\363\102\365\103" +
    "\364\106\367\107\126\110\125\111\130\116\140\117\274" +
    "\120\257\121\272\134\265\135\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\323\006\066\007\067\010\061\011\064\001" +
    "\001\000\002\001\001\000\034\004\133\012\143\013\012" +
    "\071\371\107\126\110\125\111\130\116\140\117\274\120" +
    "\257\121\272\134\265\135\103\001\001\000\002\001\001" +
    "\000\062\004\133\012\143\013\012\107\126\110\125\111" +
    "\130\116\140\117\115\120\104\121\120\122\111\123\113" +
    "\124\107\125\136\126\122\127\123\130\124\131\105\132" +
    "\117\133\106\134\127\135\103\136\373\137\374\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\133\012" +
    "\143\013\012\071\363\104\377\105\376\106\u0100\107\126" +
    "\110\125\111\130\116\140\117\274\120\257\121\272\134" +
    "\265\135\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\004\133\012\143\013\012\055" +
    "\260\064\u0103\065\u0102\066\345\067\264\070\305\071\255" +
    "\072\256\073\310\074\335\075\277\076\343\077\273\100" +
    "\262\101\341\107\126\110\125\111\130\116\140\117\274" +
    "\120\257\121\272\134\265\135\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\004\133\012\143\013\012" +
    "\055\260\064\360\066\304\067\264\070\305\071\255\072" +
    "\256\073\310\075\277\077\273\100\262\107\126\110\125" +
    "\111\130\116\140\117\274\120\257\121\272\134\265\135" +
    "\103\001\001\000\002\001\001\000\056\004\133\005\312" +
    "\006\066\007\067\010\061\011\064\012\143\013\012\062" +
    "\362\071\363\102\u0107\103\364\106\367\107\126\110\125" +
    "\111\130\116\140\117\274\120\257\121\272\134\265\135" +
    "\103\001\001\000\002\001\001\000\062\004\133\012\143" +
    "\013\012\107\126\110\125\111\130\116\140\117\115\120" +
    "\104\121\120\122\111\123\113\124\107\125\136\126\122" +
    "\127\123\130\124\131\105\132\117\133\106\134\127\135" +
    "\103\136\u0109\137\374\001\001\000\002\001\001\000\042" +
    "\004\133\012\143\013\012\071\363\104\u010b\105\376\106" +
    "\u0100\107\126\110\125\111\130\116\140\117\274\120\257" +
    "\121\272\134\265\135\103\001\001\000\002\001\001\000" +
    "\060\004\133\012\143\013\012\055\260\064\u0103\066\304" +
    "\067\264\070\305\071\255\072\256\073\310\075\277\077" +
    "\273\100\262\107\126\110\125\111\130\116\140\117\274" +
    "\120\257\121\272\134\265\135\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
             StringBuilder buffer;
             PrintText output;
             int currentPos;
             int currentLine;
             int col;
             char[] buf;


             public int returnLine()
             {
                return ((ExprLex)this.getScanner()).getLine();
             }
              
             public void report_error(String message, Object info)
             {
                buffer = new StringBuilder(message);
                buffer.append("Output Error: \n");
                output = new PrintText();
                   
                if(info==null)
                {
                   currentPos = ((ExprLex)this.getScanner()).getCurrentPos();
                   currentLine = ((ExprLex)this.getScanner()).getLine();
                   col = ((ExprLex)this.getScanner()).getColumn();
                   buf = ((ExprLex)this.getScanner()).getBuffer();
                   output = ((ExprLex)this.getScanner()).text();
                   buffer.append(output.getString());
                   buffer.append("\n");
                    
                   if(!output.getFlagBrack())
                   {
                     output.findLine(currentPos, currentLine,col,buf);
                       try {
                           //System.out.println(buffer.toString());
                           //System.out.println("Riga n: "+output.getPos()+"\n");
                           Support.writeFileErr(true, buffer.toString()+"\n"+"Riga n: "+output.getPos()+"\n");
                       } catch (IOException ex) {
                           
                       }
                   }
                }else{
                   if(info instanceof Obj)
                   {
                    output = ((ExprLex)this.getScanner()).text();
                    buffer.append(output.getString());
                       try {
                           //System.out.println(buffer.toString());
                           //System.out.println("riga num: "+returnLine());
                           Support.writeFileErr(true, buffer.toString()+"\n"+"riga num: "+returnLine()+"\n");
                       } catch (IOException ex) {
                           
                       }
                   }
                }
                    
             }
              
            public void syntax_error()
            {
               report_error("Errore  lessicale/sintattico \n",null);
            }
            
            public void warning(String message,Obj check) throws IOException
            {
                  buffer = new StringBuilder(message);
                  buffer.append("Output Warning: \n");
                  output = new PrintText();
                  output = ((ExprLex)this.getScanner()).text();
                  buffer.append(output.getString());
                  //System.out.println(buffer.toString());
                  //System.out.println("Riga n: "+returnLine());
                  Support.writeFileErr(true, buffer.toString()+"\n"+"riga num: "+returnLine()+"\n");
                  
            }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



String TRAD = "";
static String RegFP;
boolean flagP1 = true;
boolean flagP2 = true;
static boolean flagWarn = false;
int livP = 0;
static String Err_War = "";
static boolean checkFlag = false;
static boolean FlagExit = false;

int countReg = 0;
static int countRegFP = 0;
static int countRTemp = 0;
int countCl = 1;

ArrayList <String> vTrad = new ArrayList();
HashMap <String,String> TabTrad = new HashMap();

public void structProg(int levP, boolean flag, String trad) throws IOException{

   if(levP == 1){

      if(flag == true){
        Support.writeFile(true,"\n.data\n\n");
        //System.out.println("\n.data\n");
      }
        Support.writeFile(true,trad+"\n");
       //System.out.println(trad);
        flagP1 = false;
   }else if(levP == 2){

      if(flag == true){
          Support.writeFile(true,"\n.code\n\n");
        //System.out.println("\n.code\n");
      
        ListIterator lsT = vTrad.listIterator();
        while(lsT.hasNext()){
            Support.writeFile(true,lsT.next().toString()+"\n");
            //System.out.println(lsT.next());
        }   
      }
    Support.writeFile(true,trad);
    //System.out.println(trad);
    flagP2 = false;
   }else{
    Support.writeFile(false,"\n\nend\n");   
    //System.out.println("\nend\n");
   }   
}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expression ::= assignment_expression 
            {
              Obj RESULT = null;
		int assexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj assex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = assex; 
              CUP$parser$result = new java_cup.runtime.Symbol(93/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expression_opt ::= expression 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = espr; 
              CUP$parser$result = new java_cup.runtime.Symbol(92/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expression_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(92/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // left_hand_side ::= array_access 
            {
              Obj RESULT = null;
		int arraccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int arraccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj arracc = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                      String T = "";
                                      if(arracc.tipo.equals("INTEGER")){
                                         T = "SW"; 
                                      }else if(arracc.tipo.equals("DOUBLE")){
                                         T = "S.D"; 
                                      }else{
                                         parser.report_error("ERROR: tipo non supportato!",arracc);
                                         System.exit(0);
                                      }
                                      
                                      if(TabTrad.containsKey("ARRAY_ACCESS_I")){
                                         
                                         TRAD = T+" "+TabTrad.get("ARRAY_ACCESS_I");
                                         
                                         TabTrad.put("ARRAY_ACCESS_ASS",TRAD);
                                         TabTrad.remove("ARRAY_ACCESS_I");
                                         
                                         arracc.genere = "ARRAY_ACCESS_I";

                                      }else if(TabTrad.containsKey("ARRAY_ACCESS")){
                                        
                                        TRAD = TabTrad.get("ARRAY_ACCESS");
                                        if(arracc.tipo.equals("DOUBLE")){
                                            TRAD = TRAD.replace(TRAD.substring(TRAD.lastIndexOf("\n$f")+1,TRAD.length()),
                                                          T+" "+TRAD.substring(TRAD.lastIndexOf("\n$f")+1,TRAD.length()));
                                        }else{
                                            TRAD = TRAD.replace(TRAD.substring(TRAD.lastIndexOf("\n$t")+1,TRAD.length()),
                                                          T+" "+TRAD.substring(TRAD.lastIndexOf("\n$t")+1,TRAD.length()));
                                        }                                    
                                        
                                        TabTrad.put("ARRAY_ACCESS_ASS",TRAD);
                                        arracc.genere = "ARRAY_ACCESS"; 

                                      } 
                                      
                                      RESULT = new Obj(arracc.testo,arracc.tipo,arracc.genere); 
                                     
              CUP$parser$result = new java_cup.runtime.Symbol(91/*left_hand_side*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // left_hand_side ::= name 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                            Record rec = SymbolTable.checkVScope(nome.testo); 

                            if(checkFlag == true){                                                                                                                                                                    
                                parser.report_error(Err_War,nome);
                                checkFlag = false;
                                System.exit(0);
                            }
                           
                            nome.tipo = rec.getType();
                                                        
                            RESULT = new Obj(nome.testo,nome.tipo,"VARIABILE"); 
                           
              CUP$parser$result = new java_cup.runtime.Symbol(91/*left_hand_side*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // assignment ::= left_hand_side EQ assignment_expression 
            {
              Obj RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj lhs = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int assesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj assespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		                                                                                                                                                                              
                                                                       if(lhs.testo.contains("[") && lhs.testo.contains("]")){
                                                                                               
                                                                         String var = lhs.testo.substring(0,lhs.testo.indexOf("["));
                                                                                                
                                                                         Record rec = SymbolTable.getCurrRec(var);

                                                                         int n1 = lhs.testo.indexOf("[");
                                                                         int n2 = lhs.testo.indexOf("]");
                                                                                                
                                                                         String num = lhs.testo.substring(n1+1,n2);
                                                                                                                                                                                        
                                                                         CheckClass.checkTypeA(lhs.tipo,assespr.tipo,assespr.testo);
                                                                         if(checkFlag == true){                                                                                                                                                                      
                                                                                    parser.report_error(Err_War,lhs);
                                                                                    checkFlag = false;
                                                                                    System.exit(0);
                                                                                }
                                                                         
                                                                                                
                                                                         if(lhs.genere.equals("ARRAY_ACCESS_I")){                                                                                                  
                                                                             int ind = Support.changeStrInt(num);
                                                                             boolean fg = rec.setArrayList(assespr.testo, ind);

                                                                             if(flagWarn == true){                                                                                                                                                                        
                                                                                    parser.warning(Err_War,lhs);
                                                                                    flagWarn = false;
                                                                             }
  
                                                                             if(fg==true){
                                                                                rec.remElem(ind+1);
                                                                             }
                                                                         }

                                                                          String UT;
                                                                          int l;
                                                                          if(lhs.tipo.equals("DOUBLE")){
                                                                             lhs.testo = TabTrad.get("ARRAY_ACCESS_ASS");
                                                                             l = lhs.testo.lastIndexOf(" $f");
                                                                             UT = lhs.testo.substring(l+1,l+4); 
                                                                          }else{
                                                                             lhs.testo = TabTrad.get("ARRAY_ACCESS_ASS");
                                                                             l = lhs.testo.lastIndexOf(" $t");
                                                                             UT = lhs.testo.substring(l+1,l+4); 
                                                                          }                   
                                                                                                                                                 
                                                                         if(flagWarn == true){
                                                                                parser.warning(Err_War,lhs);

                                                                                String APP = Traduzione.funct(assespr.genere,assespr.testo);
                                                                                if(assespr.genere.equals("ESPRESSIONE")){                                                                                                           
                                                                                    assespr.testo = assespr.testo.replace("RIS",UT);                               
                                                                                     int nh = lhs.testo.lastIndexOf("S");
                                                                                     TRAD = lhs.testo.substring(0,nh)+assespr.testo+"\n"+lhs.testo.substring(nh,lhs.testo.length());                                                              
                                                                                }else if (assespr.genere.equals("ARRAY_ACCESS")){                                            
                                                                                    TRAD = lhs.testo.substring(0,l-3)+assespr.testo+"\n"+APP+lhs.testo.substring(l-3,lhs.testo.length()).replace(UT,Traduzione.getRegFP()); 
                                                                                }else{
                                                                                    TRAD = lhs.testo.substring(0,l-3)+"\n"+APP+lhs.testo.substring(l-3,lhs.testo.length()).replace(UT,Traduzione.getRegFP()); 
                                                                                }

                                                                             flagWarn = false;  
                                                                         }else{
                                                                            
                                                                              if(lhs.tipo.equals("INTEGER")){

                                                                                if(assespr.genere.equals("ESPRESSIONE")){
                                                                                                     
                                                                                  assespr.testo = assespr.testo.replace("RIS",UT);
                                                                                  int nh = lhs.testo.lastIndexOf("S");
                                                                                  TRAD = lhs.testo.substring(0,nh)+assespr.testo+"\n"+lhs.testo.substring(nh,lhs.testo.length());
                                                                                                
                                                                                }else if(assespr.genere.equals("VARIABILE")){
                                                                                                     
                                                                                  Record rec2 = SymbolTable.getCurrRec(assespr.testo);
                                                                                  TRAD = lhs.testo.substring(0,l-2)+lhs.testo.substring(l-2,lhs.testo.length()).replace(UT,rec2.getRegister());
                                                                                                
                                                                                }else if(assespr.genere.equals("ARRAY_ACCESS")){
                                                                                                     
                                                                                  int m = assespr.testo.lastIndexOf(" $t");
                                                                                  String MT = assespr.testo.substring(m+1,m+4);
                                                                                  TRAD = lhs.testo.substring(0,l-2)+assespr.testo+"\n"+lhs.testo.substring(l-2,lhs.testo.length()).replace(UT,MT);
                                                                         
                                                                                }else{

                                                                                 TRAD = lhs.testo.replace(UT,assespr.testo);
                                                                                }

                                                                              }else{

                                                                                if(assespr.genere.equals("ESPRESSIONE")){
                                                                                                     
                                                                                  assespr.testo = assespr.testo.replace("RIS",UT);
                                                                                  int nh = lhs.testo.lastIndexOf("S");
                                                                                  TRAD = lhs.testo.substring(0,nh)+assespr.testo+"\n"+lhs.testo.substring(nh,lhs.testo.length());
                                                                                                
                                                                             }else if(assespr.genere.equals("VARIABILE")){
                                                                                                     
                                                                                  Record rec2 = SymbolTable.getCurrRec(assespr.testo);
                                                                                  TRAD = lhs.testo.substring(0,l-2)+lhs.testo.substring(l-2,lhs.testo.length()).replace(UT,rec2.getRegister());
                                                                                                
                                                                             }else if(assespr.genere.equals("ARRAY_ACCESS")){
                                                                                                     
                                                                                  int m = assespr.testo.lastIndexOf(" $f");
                                                                                  String MT = assespr.testo.substring(m+1,m+4);
                                                                                  TRAD = lhs.testo.substring(0,l-2)+assespr.testo+"\n"+lhs.testo.substring(l-2,lhs.testo.length()).replace(UT,MT);
                                                                         
                                                                             }else{

                                                                                 TRAD = lhs.testo.replace(UT,assespr.testo);
                                                                             }

                                                                              }                                                                             

                                                                         }
                                                          
                                                                      }else{
                                                                                                  
                                                                          Record rec = SymbolTable.getCurrRec(lhs.testo);
                                                                       
                                                                          if(rec.getModifier().equals("null")){
                                                                                                    
                                                                            String str = CheckClass.checkTypeA(lhs.tipo,assespr.tipo,assespr.testo);

                                                                            if(checkFlag == true){                                                                                                                                                                       
                                                                                    parser.report_error(Err_War,lhs);
                                                                                    checkFlag = false;
                                                                                    System.exit(0);
                                                                            }

                                                                            if(flagWarn == true){
                                                                                parser.warning(Err_War,lhs);

                                                                                String APP = Traduzione.funct(assespr.genere,assespr.testo);
                                                                                if(assespr.genere.equals("ESPRESSIONE")){                                                                                                           
                                                                                   // T.substring(T.indexOf("RIS")-4, T.indexOf("RIS"));
                                                                                   // TRAD = APP. 
                                                                                   // TRAD = APP.replace("RIS",rec.getRegister());                              
                                                                                                                                                                                                                                        
                                                                                }else if (assespr.genere.equals("ARRAY_ACCESS")){                                            
                                                                                     TRAD = assespr.testo+"\n"+APP+Traduzione.OpEspr(3,rec.getType())+" "+
                                                                                                       rec.getRegister()+", $zero"+", "+Traduzione.getRegFP();
                                                                                }else{
                                                                                     TRAD = APP+Traduzione.OpEspr(3,rec.getType())+" "+rec.getRegister()+
                                                                                                                    ", $zero"+", "+Traduzione.getRegFP();
                                                                                }
                                                                               flagWarn = false;
                                                                            }else{
                                                                                if(lhs.tipo.equals("INTEGER")){

                                                                                     if(assespr.genere.equals("ESPRESSIONE")){                                                                                                           
                                                                                          TRAD = assespr.testo.replace("RIS",rec.getRegister());                              
                                                                                     }else if (assespr.genere.equals("VARIABILE")){
                                                                                          Record rec2 = SymbolTable.getCurrRec(assespr.testo);
                                                                                          TRAD = Traduzione.OpEspr(3,rec.getType())+" "+rec.getRegister()+
                                                                                                                          ", $zero"+", "+rec2.getRegister();
                                                                                     }else if (assespr.genere.equals("ARRAY_ACCESS")){                                                                               
                                                                                          int l = assespr.testo.lastIndexOf(" $t");
                                                                                          String UT = assespr.testo.substring(l+1,l+4);
                                                                                          TRAD = assespr.testo+"\n"+Traduzione.OpEspr(3,rec.getType())+" "+
                                                                                                                          rec.getRegister()+", $zero"+", "+UT;
                                                                                     }else{
                                                                                          rec.setValue(assespr.testo);
                                                                                          TRAD = Traduzione.OpEspr(3,rec.getType())+"I"+" "+rec.getRegister()+
                                                                                                                                  ", $zero"+", "+assespr.testo;
                                                                                     }

                                                                                 }else{

                                                                                     if(assespr.genere.equals("ESPRESSIONE")){                                                                                                           
                                                                                          TRAD = assespr.testo.replace("RIS",rec.getRegister());                              
                                                                                     }else if (assespr.genere.equals("VARIABILE")){
                                                                                          Record rec2 = SymbolTable.getCurrRec(assespr.testo);
                                                                                          TRAD = Traduzione.OpEspr(3,rec.getType())+" "+rec.getRegister()+
                                                                                                                          ", $zero"+", "+rec2.getRegister();
                                                                                     }else if (assespr.genere.equals("ARRAY_ACCESS")){                                                                               
                                                                                          int l = assespr.testo.lastIndexOf(" $f");
                                                                                          String UT = assespr.testo.substring(l+1,l+4);
                                                                                          TRAD = assespr.testo+"\n"+Traduzione.OpEspr(3,rec.getType())+" "+
                                                                                                                          rec.getRegister()+", $zero"+", "+UT;
                                                                                     }else{
                                                                                          rec.setValue(assespr.testo);
                                                                                          TRAD = Traduzione.OpEspr(3,rec.getType())+"I"+" "+rec.getRegister()+
                                                                                                                                  ", $zero"+", "+assespr.testo;
                                                                                     }

                                                                                 }
                                                                            }                          
                                                                            
                                                                         }else{                                                                           
                                                                            parser.report_error("ERROR: non e' possibile assegnare un valore ad una variabile con modificatore final!!!!\n",lhs);
                                                                            System.exit(0);
                                                                         }
                                                                                
                                                                     }                                                                                                                                                                         
                                                                                              
                                                                         RESULT = new Obj(TRAD,lhs.tipo);                                                                                           
                                                                    
              CUP$parser$result = new java_cup.runtime.Symbol(90/*assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // assignment_expression ::= assignment 
            {
              Obj RESULT = null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj ass = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ass; 
              CUP$parser$result = new java_cup.runtime.Symbol(89/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // assignment_expression ::= conditional_or_expression 
            {
              Obj RESULT = null;
		int condorexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int condorexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj condorex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = condorex; 
              CUP$parser$result = new java_cup.runtime.Symbol(89/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // conditional_or_expression ::= conditional_or_expression OROR conditional_and_expression 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(88/*conditional_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // conditional_or_expression ::= conditional_and_expression 
            {
              Obj RESULT = null;
		int condandexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int condandexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj condandex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = condandex; 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*conditional_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // conditional_and_expression ::= conditional_and_expression ANDAND equality_expression 
            {
              Obj RESULT = null;
		int eqexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eqexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj eqex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(87/*conditional_and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // conditional_and_expression ::= equality_expression 
            {
              Obj RESULT = null;
		int eqexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eqexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj eqex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = eqex; 
              CUP$parser$result = new java_cup.runtime.Symbol(87/*conditional_and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // equality_expression ::= equality_expression NOTEQ relational_expression 
            {
              Obj RESULT = null;
		int eqesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eqesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj eqespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                                CheckClass.checkEQNEQ(eqespr.tipo,relespr.tipo);

                                                                                if(checkFlag == true){                                                                                                                                                                     
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;
                                                                                    System.exit(0);
                                                                                }

                                                                                if(eqespr.tipo.equals("INTEGER") && relespr.tipo.equals("INTEGER")){
                                                                                    TRAD = Traduzione.tradEQNEQ(eqespr.genere,relespr.genere,
                                                                                                                     eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,2);
                                                                                }else if(eqespr.tipo.equals("DOUBLE") && relespr.tipo.equals("DOUBLE")){
                                                                                    TRAD = Traduzione.tradEQNEQ(eqespr.genere,relespr.genere,
                                                                                                                     eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,2);
                                                                                }else{
                                                                                    TRAD = Traduzione.tradEQNEQFPI(eqespr.genere,relespr.genere,
                                                                                                 eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,2);
                                                                                }
    
                                                                                 RESULT = new Obj(TRAD,"BOOLEAN");  
                                                                                
              CUP$parser$result = new java_cup.runtime.Symbol(86/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // equality_expression ::= equality_expression EQEQ relational_expression 
            {
              Obj RESULT = null;
		int eqesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eqesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj eqespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                                CheckClass.checkEQNEQ(eqespr.tipo,relespr.tipo); 

                                                                                if(checkFlag == true){                                                                                                                                                                     
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;
                                                                                    System.exit(0);
                                                                                }

                                                                                if(eqespr.tipo.equals("INTEGER") && relespr.tipo.equals("INTEGER")){
                                                                                    TRAD = Traduzione.tradEQNEQ(eqespr.genere,relespr.genere,
                                                                                                                     eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,1);
                                                                                }else if(eqespr.tipo.equals("DOUBLE") && relespr.tipo.equals("DOUBLE")){
                                                                                    TRAD = Traduzione.tradEQNEQ(eqespr.genere,relespr.genere,
                                                                                                                     eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,1);
                                                                                }else{
                                                                                    TRAD = Traduzione.tradEQNEQFPI(eqespr.genere,relespr.genere,
                                                                                                 eqespr.testo,relespr.testo,eqespr.tipo,relespr.tipo,1);
                                                                                }
                                                                                 
                                                                                RESULT = new Obj(TRAD,"BOOLEAN"); 
                                                                              
              CUP$parser$result = new java_cup.runtime.Symbol(86/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // equality_expression ::= relational_expression 
            {
              Obj RESULT = null;
		int relexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj relex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = relex; 
              CUP$parser$result = new java_cup.runtime.Symbol(86/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // relational_expression ::= relational_expression GTEQ additive_expression 
            {
              Obj RESULT = null;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                                CheckClass.checkOpCond(relespr.tipo,addespr.tipo);
                                                                                
                                                                                if(checkFlag == true){                                                                                                                                                                    
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;
                                                                                    System.exit(0);
                                                                                }

                                                                                if(relespr.tipo.equals("INTEGER") && addespr.tipo.equals("INTEGER")){
                                                                                  String RTemp = "$t"+countRTemp;
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,RTemp,4,relespr.tipo,addespr.tipo);
                                                                                  countRTemp++;
                                                                                }else if(relespr.tipo.equals("DOUBLE") && addespr.tipo.equals("DOUBLE")){
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,3,relespr.tipo);          
                                                                                }else{
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                  relespr.testo,addespr.testo,relespr.tipo,addespr.tipo,3); 
                                                                                } 
                                                                                
                                                                                RESULT = new Obj(TRAD,"BOOLEAN"); 
                                                                                
              CUP$parser$result = new java_cup.runtime.Symbol(85/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // relational_expression ::= relational_expression LTEQ additive_expression 
            {
              Obj RESULT = null;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                                                                CheckClass.checkOpCond(relespr.tipo,addespr.tipo);

                                                                                if(checkFlag == true){                                                                                                                                                                   
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;
                                                                                    System.exit(0);
                                                                                }

                                                                                if(relespr.tipo.equals("INTEGER") && addespr.tipo.equals("INTEGER")){
                                                                                  String RTemp = "$t"+countRTemp;
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,RTemp,3,relespr.tipo,addespr.tipo);
                                                                                  countRTemp++;
                                                                                }else if(relespr.tipo.equals("DOUBLE") && addespr.tipo.equals("DOUBLE")){
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,4,relespr.tipo);          
                                                                                }else{
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                  relespr.testo,addespr.testo,relespr.tipo,addespr.tipo,4); 
                                                                                } 
                                                                               
                                                                                RESULT = new Obj(TRAD,"BOOLEAN");   
                                                                                
              CUP$parser$result = new java_cup.runtime.Symbol(85/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // relational_expression ::= relational_expression GT additive_expression 
            {
              Obj RESULT = null;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                                CheckClass.checkOpCond(relespr.tipo,addespr.tipo);
                                                                                
                                                                                if(checkFlag == true){                                                                                                                                                                     
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;
                                                                                    System.exit(0);
                                                                                }

                                                                                if(relespr.tipo.equals("INTEGER") && addespr.tipo.equals("INTEGER")){
                                                                                  String RTemp = "$t"+countRTemp;
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,RTemp,2,relespr.tipo,addespr.tipo);
                                                                                  countRTemp++;
                                                                                }else if(relespr.tipo.equals("DOUBLE") && addespr.tipo.equals("DOUBLE")){
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,1,relespr.tipo);          
                                                                                }else{
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                  relespr.testo,addespr.testo,relespr.tipo,addespr.tipo,1); 
                                                                                } 
                                                                                
                                                                                RESULT = new Obj(TRAD,"BOOLEAN"); 
                                                                              
              CUP$parser$result = new java_cup.runtime.Symbol(85/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // relational_expression ::= relational_expression LT additive_expression 
            {
              Obj RESULT = null;
		int relesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int relesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj relespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		CheckClass.checkOpCond(relespr.tipo,addespr.tipo); 

                                                                               if(checkFlag == true){                                                                                                                                                                    
                                                                                    parser.report_error(Err_War,relespr);
                                                                                    checkFlag = false;
                                                                                    System.exit(0);
                                                                                }

                                                                               if(relespr.tipo.equals("INTEGER") && addespr.tipo.equals("INTEGER")){
                                                                                  String RTemp = "$t"+countRTemp;
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,RTemp,1,relespr.tipo,addespr.tipo);
                                                                                  countRTemp++;
                                                                               }else if(relespr.tipo.equals("DOUBLE") && addespr.tipo.equals("DOUBLE")){
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                             relespr.testo,addespr.testo,2,relespr.tipo);          
                                                                               }else{
                                                                                  TRAD = Traduzione.tradRel(relespr.genere,addespr.genere,
                                                                                                  relespr.testo,addespr.testo,relespr.tipo,addespr.tipo,2); 
                                                                               } 
                                                                               
                                                                               RESULT = new Obj(TRAD,"BOOLEAN");  
                                                                              
              CUP$parser$result = new java_cup.runtime.Symbol(85/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // relational_expression ::= additive_expression 
            {
              Obj RESULT = null;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = addespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(85/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // additive_expression ::= additive_expression MENO multiplicative_expression 
            {
              Obj RESULT = null;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int multesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj multespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 String dfT = CheckClass.checkTypeMD(addespr.tipo,multespr.tipo); 
                                                                                       
                                                                                       if(checkFlag == true){                                                                                                                                                                  
                                                                                         parser.report_error(Err_War,multespr);
                                                                                         checkFlag = false;
                                                                                         System.exit(0);
                                                                                       }

                                                                                       if(flagWarn == true){
                                                                                         Traduzione.castFP(addespr.tipo,addespr.genere,addespr.testo,multespr.genere,multespr.testo);
                                                                                         TRAD = Traduzione.tradEspr(4,addespr.genere, multespr.genere,
                                                                                                             addespr.testo,multespr.testo,dfT);
                                                                                         parser.warning(Err_War,multespr);                                                                                        
                                                                                         flagWarn = false;
                                                                                       }else{
                                                                                         if(dfT.equals("DOUBLE")){
                                                                                            TRAD = Traduzione.tradEspr(addespr.genere,multespr.genere,
                                                                                                                      addespr.testo,multespr.testo,dfT,4);
                                                                                         }else{
                                                                                            TRAD = Traduzione.tradEspr(addespr.genere,multespr.genere,
                                                                                                                       addespr.testo,multespr.testo,4,dfT);
                                                                                         }
                                                                                       }
                                                                                                                                                                              
                                                                                      RESULT = new Obj(TRAD,dfT,"ESPRESSIONE");
                                                                                    
              CUP$parser$result = new java_cup.runtime.Symbol(84/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // additive_expression ::= additive_expression PIU multiplicative_expression 
            {
              Obj RESULT = null;
		int addesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int addesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj addespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int multesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj multespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 String smT = CheckClass.checkTypeMD(addespr.tipo,multespr.tipo); 
                                                                                      
                                                                                      if(checkFlag == true){                                                                                                                                                                   
                                                                                         parser.report_error(Err_War,multespr);
                                                                                         checkFlag = false;
                                                                                         System.exit(0);
                                                                                      }

                                                                                      if(flagWarn == true){
                                                                                         Traduzione.castFP(addespr.tipo,addespr.genere,addespr.testo,multespr.genere,multespr.testo);
                                                                                         TRAD = Traduzione.tradEspr(3,addespr.genere, multespr.genere,
                                                                                                             addespr.testo,multespr.testo,smT);
                                                                                         parser.warning(Err_War,multespr);
                                                                                         flagWarn = false;
                                                                                      }else{
                                                                                         if(smT.equals("DOUBLE")){
                                                                                            TRAD = Traduzione.tradEspr(addespr.genere,multespr.genere,
                                                                                                                      addespr.testo,multespr.testo,smT,3);
                                                                                         }else{
                                                                                            TRAD = Traduzione.tradEspr(addespr.genere,multespr.genere,
                                                                                                                       addespr.testo,multespr.testo,3,smT);
                                                                                         }
                                                                                      }
                                                                                                                                                                 
                                                                                      RESULT = new Obj(TRAD,smT,"ESPRESSIONE");
                                                                                    
              CUP$parser$result = new java_cup.runtime.Symbol(84/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // additive_expression ::= multiplicative_expression 
            {
              Obj RESULT = null;
		int multexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj multex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = multex; 
              CUP$parser$result = new java_cup.runtime.Symbol(84/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // multiplicative_expression ::= multiplicative_expression DIVISO unary_expression 
            {
              Obj RESULT = null;
		int multesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int multesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj multespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int unexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj unex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                                   if(Integer.parseInt(unex.testo) == 0){                                                                                      
                                                                                      parser.report_error("ERROR: non e' possibile effettuare la divisione per 0!\n",multespr);
                                                                                      System.exit(0);
                                                                                   }

                                                                                   String dvT = CheckClass.checkTypeMD(multespr.tipo,unex.tipo); 
                                                                                     
                                                                                   if(checkFlag == true){                                                                                                                                                                      
                                                                                    parser.report_error(Err_War,multespr);
                                                                                    checkFlag = false;
                                                                                    System.exit(0);
                                                                                  }

                                                                                   if(flagWarn == true){
                                                                                     Traduzione.castFP(multespr.tipo,multespr.genere,multespr.testo,unex.genere,unex.testo);
                                                                                     TRAD = Traduzione.tradEspr(2,multespr.genere, unex.genere,
                                                                                                             multespr.testo,unex.testo,dvT);
                                                                                     parser.warning(Err_War,multespr);
                                                                                     flagWarn = false;
                                                                                   }else{
                                                                                     if(dvT.equals("DOUBLE")){
                                                                                        TRAD = Traduzione.tradEspr(multespr.genere, unex.genere,
                                                                                                                      multespr.testo,unex.testo,dvT,2);
                                                                                     }else{
                                                                                        TRAD = Traduzione.tradEspr(multespr.genere, unex.genere,
                                                                                                                      multespr.testo,unex.testo,2,dvT);
                                                                                     }
                                                                                   }
                                                                                                                                                                         
                                                                                   RESULT = new Obj(TRAD,dvT,"ESPRESSIONE");
                                                                                  
                                                                                  
              CUP$parser$result = new java_cup.runtime.Symbol(83/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // multiplicative_expression ::= multiplicative_expression PER unary_expression 
            {
              Obj RESULT = null;
		int multesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int multesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj multespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int unexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj unex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  String mlT = CheckClass.checkTypeMD(multespr.tipo,unex.tipo); 

                                                                                  if(checkFlag == true){                                                                                                                                                                                                                                                         
                                                                                    parser.report_error(Err_War,multespr);
                                                                                    checkFlag = false;
                                                                                    System.exit(0);
                                                                                  }

                                                                                  if(flagWarn == true){
                                                                                     Traduzione.castFP(multespr.tipo,multespr.genere,multespr.testo,unex.genere,unex.testo);
                                                                                     TRAD = Traduzione.tradEspr(1,multespr.genere, unex.genere,
                                                                                                             multespr.testo,unex.testo,mlT);
                                                                                     
                                                                                     parser.warning(Err_War,multespr);
                                                                                     flagWarn = false;
                                                                                  }else{
                                                                                     if(mlT.equals("DOUBLE")){
                                                                                        TRAD = Traduzione.tradEspr(multespr.genere, unex.genere,
                                                                                                                      multespr.testo,unex.testo,mlT,1);
                                                                                     }else{
                                                                                        TRAD = Traduzione.tradEspr(multespr.genere, unex.genere,
                                                                                                                      multespr.testo,unex.testo,1,mlT);
                                                                                     }
                                                                                  }
                                                                                                                               
                                                                                  RESULT = new Obj(TRAD,mlT,"ESPRESSIONE"); 
                                                                                 
              CUP$parser$result = new java_cup.runtime.Symbol(83/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // multiplicative_expression ::= unary_expression 
            {
              Obj RESULT = null;
		int unexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj unex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = unex; 
              CUP$parser$result = new java_cup.runtime.Symbol(83/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // cast_expression ::= TONDA_APERTA primitive_type dims_opt TONDA_CHIUSA unary_expression 
            {
              Obj RESULT = null;
		int primtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Obj primtype = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int unesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj unespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // unary_expression_not_plus_minus ::= cast_expression 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(81/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // unary_expression_not_plus_minus ::= postfix_expression 
            {
              Obj RESULT = null;
		int postexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj postex = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = postex; 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // unary_expression ::= unary_expression_not_plus_minus 
            {
              Obj RESULT = null;
		int uenpmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uenpmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj uenpm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = uenpm; 
              CUP$parser$result = new java_cup.runtime.Symbol(80/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // postdecrement_expression ::= postfix_expression MINUSMINUS 
            {
              Obj RESULT = null;
		int postesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int postesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj postespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                                 if(!postespr.tipo.equals("INTEGER")){                                                    
                                                    parser.report_error("ERROR: il tipo di tale variabile deve essere necessariamente intero!\n",postespr);
                                                    System.exit(0);
                                                 } 
                                                   
                                                Record rec = SymbolTable.getCurrRec(postespr.testo);   
                                                TRAD = "ADDI"+" "+rec.getRegister()+", "+rec.getRegister()+", "+"-1";

                                                RESULT = new Obj(TRAD,postespr.tipo);
                                               
              CUP$parser$result = new java_cup.runtime.Symbol(79/*postdecrement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // postincrement_expression ::= postfix_expression PLUSPLUS 
            {
              Obj RESULT = null;
		int postesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int postesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj postespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                               if(!postespr.tipo.equals("INTEGER")){                                                   
                                                    parser.report_error("ERROR: il tipo di tale variabile deve essere necessariamente intero!\n",postespr);
                                                    System.exit(0);
                                                } 
                                                
                                                Record rec = SymbolTable.getCurrRec(postespr.testo);   
                                                TRAD = "ADDI"+" "+rec.getRegister()+", "+rec.getRegister()+", "+"1";

                                               RESULT = new Obj(TRAD,postespr.tipo);
                                            
              CUP$parser$result = new java_cup.runtime.Symbol(78/*postincrement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // postfix_expression ::= postdecrement_expression 
            {
              Obj RESULT = null;
		int postdecesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postdecesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj postdecespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = postdecespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(77/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // postfix_expression ::= postincrement_expression 
            {
              Obj RESULT = null;
		int postinesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postinesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj postinespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = postinespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(77/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // postfix_expression ::= name 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
                             Record rec = SymbolTable.checkVScope(nome.testo);

                             if(checkFlag == true){                                                                                                                                                                                                      
                                parser.report_error(Err_War,nome);
                                checkFlag = false;
                                System.exit(0);
                             }
  
                             nome.tipo = rec.getType();
                             
                             RESULT = new Obj(nome.testo,nome.tipo,"VARIABILE"); 
                          
              CUP$parser$result = new java_cup.runtime.Symbol(77/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // postfix_expression ::= primary 
            {
              Obj RESULT = null;
		int primleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int primright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj prim = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prim; 
              CUP$parser$result = new java_cup.runtime.Symbol(77/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // array_access ::= name LBRACK expression RBRACK 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                         int I1,I2;
                                                         Record rec = SymbolTable.checkVScope(nome.testo);

                                                         if(checkFlag == true){                                                                                                                                                                                                                                   
                                                              parser.report_error(Err_War,nome);
                                                              checkFlag = false;
                                                              System.exit(0);
                                                         }
   
                                                         nome.tipo = rec.getType();
                                                         
                                                         if(!espr.tipo.equals("INTEGER")){                                                           
                                                            parser.report_error("ERROR: la dimensione del vettore deve essere un numero intero!\n",espr);
                                                            System.exit(0);
                                                         }else{  
                                                             
                                                             if(espr.genere.equals("NUMERO")){
                                                                I1 = Support.changeStrInt(espr.testo);
                                                                I2 = Support.changeStrInt(rec.getValue().toString());
                                                            
                                                             }else{
                                                                    Record recE = SymbolTable.getCurrRec(espr.testo);
                                                                    
                                                                    I1 = Support.changeStrInt(recE.getValue().toString());
                                                                    I2 = Support.changeStrInt(rec.getValue().toString());                                                                    
                                                             }                                            
                                                        
                                                          if(I1 > I2){                                                                                                                             
                                                                  parser.report_error("ERROR: l'indice supera la dimensione massima del vettore!\n",espr);
                                                                  System.exit(0);
                                                                } 
                                                         }
                                                        
                                                         if(espr.genere.equals("NUMERO")){

                                                           if(nome.tipo.equals("DOUBLE")){
                                                              TRAD = "$f"+countRegFP+", "+Support.calcOffset(espr.testo,nome.tipo)+
                                                                                                              "("+rec.getRegister()+")";
                                                              TabTrad.put("ARRAY_ACCESS_I",TRAD);
                                                              countRegFP = countRegFP + 2;
                                                           }else{
                                                              TRAD = "$t"+countRTemp+", "+Support.calcOffset(espr.testo,nome.tipo)+
                                                                                                              "("+rec.getRegister()+")";
                                                              TabTrad.put("ARRAY_ACCESS_I",TRAD);
                                                              countRTemp++;
                                                           } 
                                                                                                                      
                                                          }else if(espr.genere.equals("VARIABILE")){
                                                            Record recE = SymbolTable.getCurrRec(espr.testo);
                                                            
                                                            
                                                            if(nome.tipo.equals("INTEGER")){
                                                              
                                                            int countRTempS = countRTemp+1;
                                                            TRAD = "MULT "+"$t"+countRTempS+", "+recE.getRegister()+", "+4+"\n"+
                                                                   "ADD "+"$t"+countRTempS+", "+"$t"+countRTempS+", "+rec.getRegister()+"\n"+
                                                                   "$t"+countRTemp+", "+"0("+"$t"+countRTempS+")";
                                                            TabTrad.put("ARRAY_ACCESS",TRAD);
                                                            countRTemp = countRTemp+2;
                                                            }else if(nome.tipo.equals("DOUBLE")){
                                                             
                                                            TRAD = "MULT "+"$t"+countRTemp+", "+recE.getRegister()+", "+8+"\n"+
                                                                   "MTC1 "+"$t"+countRTemp+", "+"$f"+countRegFP+"\n"+ 
                                                                   "ADD.D "+"$f"+countRegFP+", "+"$f"+countRegFP+", "+rec.getRegister()+"\n"+
                                                                   "TEMP"+", "+"0("+"$f"+countRegFP+")";
                                                            countRegFP = countRegFP + 2;
                                                            TRAD = TRAD.replace("TEMP","$f"+Integer.toString(countRegFP));
                                                            TabTrad.put("ARRAY_ACCESS",TRAD);
                                                            countRTemp++;
                                                            countRegFP = countRegFP + 2;
                                                            }else{                                                               
                                                              parser.report_error("ERROR: tipo non supportato!\n",espr); 
                                                              System.exit(0);
                                                            }
                                                            
                                                            espr.genere = "";
                                                          }else{                                                              
                                                              parser.report_error("ERROR!",espr);
                                                              System.exit(0);
                                                          }
                                                                                                             
                                                        RESULT = new Obj(nome.testo+"["+espr.testo+"]", nome.tipo,espr.genere);
                                                       
              CUP$parser$result = new java_cup.runtime.Symbol(76/*array_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // dims ::= dims LBRACK RBRACK 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(75/*dims*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // dims ::= LBRACK RBRACK 
            {
              Obj RESULT = null;
		 RESULT = new Obj("["+"]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(75/*dims*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // dims_opt ::= dims 
            {
              Obj RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(74/*dims_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // dims_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(74/*dims_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // dim_expr ::= LBRACK expression RBRACK 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                               if(!espr.tipo.equals("INTEGER")){                                                  
                                                  parser.report_error("ERROR: la dimensione del vettore deve essere un numero intero!\n",espr);
                                                  System.exit(0);
                                               }else{  
                                                   RESULT = new Obj("["+espr.testo+"]",espr.tipo);
                                               }
                                              
              CUP$parser$result = new java_cup.runtime.Symbol(73/*dim_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // dim_exprs ::= dim_expr 
            {
              Obj RESULT = null;
		int desprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int desprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj despr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = despr; 
              CUP$parser$result = new java_cup.runtime.Symbol(72/*dim_exprs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // array_creation_expression ::= NEW primitive_type dims array_initializer 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // array_creation_expression ::= NEW primitive_type dim_exprs dims_opt 
            {
              Obj RESULT = null;
		int primtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int primtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj primtype = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int essdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int essdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj essd = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj("new "+primtype.testo+" "+essd.testo, primtype.tipo); 
              CUP$parser$result = new java_cup.runtime.Symbol(71/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // primary_no_new_array ::= array_access 
            {
              Obj RESULT = null;
		int arraccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int arraccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj arracc = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                      String T = "";
                                      if(arracc.tipo.equals("INTEGER")){
                                         T = "LW"; 
                                      }else if(arracc.tipo.equals("DOUBLE")){
                                         T = "L.D"; 
                                      }else{
                                         parser.report_error("ERROR: tipo non supportato!",arracc);
                                      }
                                      
                                      if(TabTrad.containsKey("ARRAY_ACCESS_I")){
                                         TRAD = T+" "+TabTrad.get("ARRAY_ACCESS_I");
                                         TabTrad.remove("ARRAY_ACCESS_I");
                                      }else if(TabTrad.containsKey("ARRAY_ACCESS")){
                                        
                                        TRAD = TabTrad.get("ARRAY_ACCESS");
                                          
                                        if(arracc.tipo.equals("DOUBLE")){
                                           TRAD = TRAD.replace(TRAD.substring(TRAD.lastIndexOf("\n$f")+1,TRAD.length()),
                                                  T+" "+TRAD.substring(TRAD.lastIndexOf("\n$f")+1,TRAD.length()));  
                                        }else{
                                           TRAD = TRAD.replace(TRAD.substring(TRAD.lastIndexOf("\n$t")+1,TRAD.length()),
                                                  T+" "+TRAD.substring(TRAD.lastIndexOf("\n$t")+1,TRAD.length()));
                                        }                                  
                                                                                
                                      } 
                                      
                                      RESULT = new Obj(TRAD,arracc.tipo,"ARRAY_ACCESS"); 
                             
              CUP$parser$result = new java_cup.runtime.Symbol(70/*primary_no_new_array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // primary_no_new_array ::= TONDA_APERTA expression TONDA_CHIUSA 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj("( "+espr.testo+" )", espr.tipo); 
              CUP$parser$result = new java_cup.runtime.Symbol(70/*primary_no_new_array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // primary_no_new_array ::= literal 
            {
              Obj RESULT = null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj numero = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = numero; 
              CUP$parser$result = new java_cup.runtime.Symbol(70/*primary_no_new_array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // primary ::= array_creation_expression 
            {
              Obj RESULT = null;
		int arrcresprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int arrcresprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj arrcrespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = arrcrespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(69/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // primary ::= primary_no_new_array 
            {
              Obj RESULT = null;
		int pnnaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pnnaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj pnna = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = pnna; 
              CUP$parser$result = new java_cup.runtime.Symbol(69/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // statement_expression_list ::= statement_expression_list VIRGOLA statement_expression 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(68/*statement_expression_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // statement_expression_list ::= statement_expression 
            {
              Obj RESULT = null;
		int stesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj stespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = stespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(68/*statement_expression_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // for_update ::= statement_expression_list 
            {
              Obj RESULT = null;
		int stesprlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stesprlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj stesprl = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = stesprl; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*for_update*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // for_update_opt ::= for_update 
            {
              Obj RESULT = null;
		int forupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int forupright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj forup = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = forup; 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*for_update_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // for_update_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*for_update_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // for_init ::= local_variable_declaration 
            {
              Obj RESULT = null;
		int locvardecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int locvardecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj locvardec = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = locvardec; 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*for_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_init ::= statement_expression_list 
            {
              Obj RESULT = null;
		int stesprlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stesprlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj stesprl = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = stesprl; 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*for_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_init_opt ::= for_init 
            {
              Obj RESULT = null;
		int forinizleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int forinizright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj foriniz = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = foriniz; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*for_init_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_init_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*for_init_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // for_statement_no_short_if ::= FOR TONDA_APERTA for_init_opt PUNTO_E_VIRGOLA expression_opt PUNTO_E_VIRGOLA for_update_opt TONDA_CHIUSA statement_no_short_if 
            {
              Obj RESULT = null;
		int finoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int finoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Obj fino = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fupoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fuporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj fupo = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statmnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                            if(!espr.tipo.equals("BOOLEAN")){                                              
                                              parser.report_error("ERROR: il ciclo FOR accetta esclusivamente il tipo BOOLEAN!",fino);
                                              System.exit(0);
                                            } 

                                            if(espr.testo.contains(".D")){
                                                String esc = "ESCI"+countCl;
                                                espr.testo = espr.testo.concat(", "+esc);
                                                                              
                                                TRAD = fino.testo+"\n"+"CICLO"+countCl+": "+"\t"+espr.testo+"\n\t"+statmnosif.testo+"\n\t"+fupo.testo+"\nj CICLO"+countCl+"\n"+esc+":\n";
                                                countCl++;
                                            }else{
                                               String esc = "ESCI"+countCl;
                                               espr.testo = espr.testo.replaceAll("OFFSET",esc);
                                                                          
                                               TRAD = fino.testo+"\n"+"CICLO"+countCl+": "+"\t"+espr.testo+"\n\t"+statmnosif.testo+"\n\t"+fupo.testo+"\nj CICLO"+countCl+"\n"+esc+":\n";
                                               countCl++;  
                                            }
                                                                           
                                            RESULT = new Obj(TRAD);
                                        
              CUP$parser$result = new java_cup.runtime.Symbol(63/*for_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for_statement ::= FOR TONDA_APERTA for_init_opt PUNTO_E_VIRGOLA expression_opt PUNTO_E_VIRGOLA for_update_opt TONDA_CHIUSA statement 
            {
              Obj RESULT = null;
		int finoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int finoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Obj fino = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fupoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fuporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj fupo = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                            if(!espr.tipo.equals("BOOLEAN")){                                               
                                               parser.report_error("ERROR: il ciclo FOR accetta esclusivamente il tipo BOOLEAN!",fino);
                                               System.exit(0);
                                            } 

                                            if(espr.testo.contains(".D")){
                                                String esc = "ESCI"+countCl;
                                                espr.testo = espr.testo.concat(", "+esc);
                                                                              
                                                TRAD = fino.testo+"\n"+"CICLO"+countCl+": "+"\t"+espr.testo+"\n\t"+statm.testo+"\n\t"+fupo.testo+"\nj CICLO"+countCl+"\n"+esc+":\n";
                                                countCl++;
                                            }else{
                                               String esc = "ESCI"+countCl;
                                               espr.testo = espr.testo.replaceAll("OFFSET",esc);
                                                                          
                                               TRAD = fino.testo+"\n"+"CICLO"+countCl+": "+"\t"+espr.testo+"\n\t"+statm.testo+"\n\t"+fupo.testo+"\nj CICLO"+countCl+"\n"+esc+":\n";
                                               countCl++; 
                                            }
                                                                         
                                            RESULT = new Obj(TRAD);
                                          
              CUP$parser$result = new java_cup.runtime.Symbol(62/*for_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // do_statement ::= DO statement WHILE TONDA_APERTA expression TONDA_CHIUSA PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*do_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // while_statement_no_short_if ::= WHILE TONDA_APERTA expression TONDA_CHIUSA statement_no_short_if 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statmnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                            if(!espr.tipo.equals("BOOLEAN")){                                              
                                               parser.report_error("ERROR: il ciclo WHILE accetta esclusivamente il tipo BOOLEAN!",espr);
                                               System.exit(0);
                                            } 

                                            if(espr.testo.contains(".D")){
                                                String esc = "ESCI"+countCl;
                                                espr.testo = espr.testo.concat(", "+esc);
                                                                              
                                                TRAD = "CICLO"+countCl+": "+"\t"+espr.testo+"\n"+statmnosif.testo+"\nj CICLO"+countCl+"\n"+esc+":\n";
                                                countCl++;
                                            }else{
                                               String esc = "ESCI"+countCl;
                                               espr.testo = espr.testo.replaceAll("OFFSET",esc);
                                                                          
                                               TRAD = "CICLO"+countCl+": "+"\t"+espr.testo+"\n"+statmnosif.testo+"\nj CICLO"+countCl+"\n"+esc+":\n";
                                               countCl++; 
                                            }

                                                                        
                                            RESULT = new Obj(TRAD);
                                          
              CUP$parser$result = new java_cup.runtime.Symbol(60/*while_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // while_statement ::= WHILE TONDA_APERTA expression TONDA_CHIUSA statement 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                            if(!espr.tipo.equals("BOOLEAN")){                                               
                                               parser.report_error("ERROR: il ciclo WHILE accetta esclusivamente il tipo BOOLEAN!\n",espr);
                                               System.exit(0);
                                            } 

                                            if(espr.testo.contains(".D")){
                                                String esc = "ESCI"+countCl;
                                                espr.testo = espr.testo.concat(", "+esc);
                                                                              
                                                TRAD = "CICLO"+countCl+": "+"\t"+espr.testo+"\n"+statm.testo+"\nj CICLO"+countCl+"\n"+esc+":\n";
                                                countCl++;
                                            }else{
                                               String esc = "ESCI"+countCl;
                                               espr.testo = espr.testo.replaceAll("OFFSET",esc);
                                                                          
                                               TRAD = "CICLO"+countCl+": "+"\t"+espr.testo+"\n"+statm.testo+"\nj CICLO"+countCl+"\n"+esc+":\n";
                                               countCl++;
                                            }
                                                                 
                                            RESULT = new Obj(TRAD); 
                                          
              CUP$parser$result = new java_cup.runtime.Symbol(59/*while_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // if_then_else_statement_no_short_if ::= IF TONDA_APERTA expression TONDA_CHIUSA statement_no_short_if ELSE statement_no_short_if 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statnosif1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statnosif1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj statnosif1 = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statnosif2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statnosif2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statnosif2 = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                            if(!espr.tipo.equals("BOOLEAN")){                                               
                                               parser.report_error("ERROR: il blocco di selezione accetta esclusivamente il tipo BOOLEAN!\n",espr);
                                               System.exit(0);
                                            } 

                                            if(espr.testo.contains(".D")){
                                                String el = "ELSE"+countCl;
                                                espr.testo = espr.testo.concat(", "+el);
                                                                              
                                                TRAD = espr.testo+"\n"+statnosif1.testo+"\nj ESCI"+countCl+"\n"+el+": "+statnosif2.testo+"\nESCI:\n";
                                                countCl++;
                                            }else{
                                               String el = "ELSE"+countCl;
                                               espr.testo = espr.testo.replaceAll("OFFSET",el);
 
                                               TRAD = espr.testo+"\n"+statnosif1.testo+"\nj ESCI"+countCl+"\n"+el+": "+statnosif2.testo+"\nESCI:\n";
                                               countCl++;
                                            }

                                            
                                            RESULT = new Obj(TRAD);
                                          
              CUP$parser$result = new java_cup.runtime.Symbol(58/*if_then_else_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // if_then_else_statement ::= IF TONDA_APERTA expression TONDA_CHIUSA statement_no_short_if ELSE statement 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj statnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                            if(!espr.tipo.equals("BOOLEAN")){                                               
                                               parser.report_error("ERROR: il blocco di selezione accetta esclusivamente il tipo BOOLEAN!\n",espr);
                                               System.exit(0);
                                            } 

                                            if(espr.testo.contains(".D")){
                                                String el = "ELSE"+countCl;
                                                espr.testo = espr.testo.concat(", "+el);
                                                                              
                                                TRAD = espr.testo+"\n"+statnosif.testo+"\nj ESCI"+countCl+"\n"+el+": "+
                                                                                     statm.testo+"\nESCI"+countCl+":"+"\n";
                                                countCl++;
                                            }else{
                                               String el = "ELSE"+countCl;
                                               espr.testo = espr.testo.replaceAll("OFFSET",el);
 
                                               TRAD = espr.testo+"\n"+statnosif.testo+"\nj ESCI"+countCl+"\n"+el+": "+
                                                                                    statm.testo+"\nESCI"+countCl+":"+"\n";
                                               countCl++;
                                            }
                                                                                        
                                            RESULT = new Obj(TRAD);
                                          
              CUP$parser$result = new java_cup.runtime.Symbol(57/*if_then_else_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // if_then_statement ::= IF TONDA_APERTA expression TONDA_CHIUSA statement 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj statm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                          if(!espr.tipo.equals("BOOLEAN")){                                                                            
                                                                            parser.report_error("ERROR: il blocco di selezione accetta esclusivamente il tipo BOOLEAN!\n",espr);
                                                                            System.exit(0);
                                                                          } 
                                                                          if(espr.testo.contains(".D")){
                                                                              String esc = "ESCI"+countCl;
                                                                              espr.testo = espr.testo.concat(", "+esc);
                                                                              
                                                                              TRAD = espr.testo+"\n"+statm.testo+"\n"+esc+":\n";
                                                                              countCl++;
                                                                          }else{
                                                                              String esc = "ESCI"+countCl;
                                                                              espr.testo = espr.testo.replaceAll("OFFSET",esc);
                                                                          
                                                                              TRAD = espr.testo+"\n"+statm.testo+"\n"+esc+":\n";
                                                                              countCl++;
                                                                          }
                                                                          RESULT = new Obj(TRAD);   
                                                                        
              CUP$parser$result = new java_cup.runtime.Symbol(56/*if_then_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // statement_expression ::= postdecrement_expression 
            {
              Obj RESULT = null;
		int postdeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj postde = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = postde; 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // statement_expression ::= postincrement_expression 
            {
              Obj RESULT = null;
		int postinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postinright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj postin = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = postin; 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // statement_expression ::= assignment 
            {
              Obj RESULT = null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj ass = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ass; 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression_statement ::= statement_expression PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;
		int statesprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statesprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj statespr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = statespr; 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*expression_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // empty_statement ::= PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;
		 RESULT = new Obj(";"); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*empty_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // statement_without_trailing_substatement ::= do_statement 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(52/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // statement_without_trailing_substatement ::= expression_statement 
            {
              Obj RESULT = null;
		int esprstatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int esprstatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj esprstat = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = esprstat; 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // statement_without_trailing_substatement ::= empty_statement 
            {
              Obj RESULT = null;
		int emstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int emstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj emstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = emstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // statement_without_trailing_substatement ::= block 
            {
              Obj RESULT = null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj bl = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = bl; 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // statement_no_short_if ::= for_statement_no_short_if 
            {
              Obj RESULT = null;
		int fstatmnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fstatmnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj fstatmnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = fstatmnosif; 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // statement_no_short_if ::= while_statement_no_short_if 
            {
              Obj RESULT = null;
		int whstatmnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int whstatmnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj whstatmnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = whstatmnosif; 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // statement_no_short_if ::= if_then_else_statement_no_short_if 
            {
              Obj RESULT = null;
		int ifTEstatnosifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ifTEstatnosifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj ifTEstatnosif = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ifTEstatnosif; 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // statement_no_short_if ::= statement_without_trailing_substatement 
            {
              Obj RESULT = null;
		int swtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int swtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj swts = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = swts; 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // statement ::= for_statement 
            {
              Obj RESULT = null;
		int fstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj fstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = fstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statement ::= while_statement 
            {
              Obj RESULT = null;
		int whstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int whstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj whstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = whstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statement ::= if_then_else_statement 
            {
              Obj RESULT = null;
		int ifTEstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ifTEstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj ifTEstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ifTEstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement ::= if_then_statement 
            {
              Obj RESULT = null;
		int ifTstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ifTstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj ifTstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ifTstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statement ::= statement_without_trailing_substatement 
            {
              Obj RESULT = null;
		int swtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int swtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj swts = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = swts; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // section_two ::= statement 
            {
              Obj RESULT = null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj stat = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                 livP = 2; 
                                 RESULT = stat;
                               
              CUP$parser$result = new java_cup.runtime.Symbol(49/*section_two*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // local_variable_declaration ::= FINAL type variable_declarators 
            {
              Obj RESULT = null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj tipo = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj vard = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		                                                           
                                                      CheckClass.checkTypeA(tipo.tipo,vard.tipo,vard.testo);

                                                      if(checkFlag == true){                                                                                                                                                                   
                                                         parser.report_error(Err_War,vard);
                                                         checkFlag = false;
                                                         System.exit(0);
                                                      }

                                                      vard.testo = Support.getVar(vard.testo);
                                                      Record rec = SymbolTable.getCurrRec(vard.testo);
                                                      rec.setType(vard.tipo);
                                                      rec.setModifier("final");    
                                                                                                                       
                                                      RESULT = new Obj("final"+" "+tipo.testo+" "+vard.testo);                                                                                                                               
                                                     
              CUP$parser$result = new java_cup.runtime.Symbol(48/*local_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // local_variable_declaration ::= type variable_declarators 
            {
              Obj RESULT = null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj tipo = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj vard = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                        String Rg;
                                                        String TR;
                                                        if(vard.tipo.equals("IDENTIFICATORE")){
                                                          
                                                          vard.tipo=tipo.tipo;                                                                                                                    
                                                          Record rec = SymbolTable.getCurrRec(vard.testo);
                                                          rec.setType(vard.tipo);

                                                          if(vard.tipo.equals("DOUBLE")){
                                                            Rg = "$f"+countRegFP;
                                                            TR = "MOVE.D"+" "+vard.testo+","+" "+Rg;
                                                            countRegFP = countRegFP + 2;
                                                          }else{
                                                            Rg = "$s"+countReg;
                                                            TR = "MOVE"+" "+vard.testo+","+" "+Rg;
                                                            countReg++;
                                                          }
                                                          
                                                          rec.setRegister(Rg);                                
                                                          vTrad.add(TR);
                                                          
                                                        }else{
                                                         
                                                          vard.tipo = CheckClass.checkTypeA(tipo.tipo,vard.tipo,vard.testo);

                                                          if(checkFlag == true){                                                                                                                                                                    
                                                                parser.report_error(Err_War,vard);
                                                                checkFlag = false;
                                                                System.exit(0);
                                                          }
                                                          
                                                          flagWarn = false;
                                                          String VAR = Support.getVar(vard.testo);
                                                          Record rec = SymbolTable.getCurrRec(VAR);
                                                          rec.setType(vard.tipo);
                                                          
                                                          if(vard.testo.contains("[]")){
                                                             
                                                             Rg = "$s"+countReg;
                                                             rec.setRegDim(Rg);
                                                             TR = "MOVE"+" "+"dim"+","+" "+Rg;
                                                             vTrad.add(TR);
                                                             countReg++;
                                                             
                                                             if(vard.tipo.equals("DOUBLE")){
                                                               Rg = "$f"+countRegFP;
                                                               TR = "MOVE.D"+" "+VAR+","+" "+Rg;
                                                               countRegFP = countRegFP + 2;
                                                             }else{
                                                               Rg = "$s"+countReg;
                                                               TR = "MOVE"+" "+VAR+","+" "+Rg;
                                                               countReg++;
                                                             }
                                                             
                                                             rec.setRegister(Rg);                                                             
                                                             vTrad.add(TR);                                                             

                                                          }else{
                                                            
                                                             if(vard.tipo.equals("DOUBLE")){
                                                               Rg = "$f"+countRegFP;
                                                               TR = "MOVE.D"+" "+VAR+","+" "+Rg;
                                                               countRegFP = countRegFP + 2;
                                                             }else{
                                                               Rg = "$s"+countReg;
                                                               TR = "MOVE"+" "+VAR+","+" "+Rg;
                                                               countReg++;
                                                             }

                                                            rec.setRegister(Rg);
                                                            vTrad.add(TR);                                                         

                                                          }
                                                        }
                                                                                                              
                                                       TRAD = Traduzione.tradDecl(tipo.tipo, vard.testo);
                                                       
                                                       RESULT = new Obj(TRAD); 
                                                     
              CUP$parser$result = new java_cup.runtime.Symbol(48/*local_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // local_variable_declaration_statement ::= local_variable_declaration PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;
		int lvdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj lvd = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                                                 livP = 1;                                                                 
                                                                 RESULT = lvd; 
                                                                
              CUP$parser$result = new java_cup.runtime.Symbol(47/*local_variable_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // block_statement ::= class_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*block_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // block_statement ::= section_two 
            {
              Obj RESULT = null;
		int sectwoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sectworight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj sectwo = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = sectwo; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*block_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // block_statement ::= local_variable_declaration_statement 
            {
              Obj RESULT = null;
		int lvdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lvdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj lvds = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                            structProg(livP,flagP1,lvds.testo);
                                                            RESULT = new Obj("");
                                                          
              CUP$parser$result = new java_cup.runtime.Symbol(46/*block_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // block_statements ::= block_statements block_statement 
            {
              Obj RESULT = null;
		int blstatmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blstatmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj blstatms = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj blstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(blstatms.testo+"\n"+blstatm.testo); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*block_statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // block_statements ::= block_statement 
            {
              Obj RESULT = null;
		int blstatmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blstatmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj blstatm = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = blstatm; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*block_statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // block_statements_opt ::= block_statements 
            {
              Obj RESULT = null;
		int blstatmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blstatmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj blstatms = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = blstatms; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*block_statements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // block_statements_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*block_statements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // block ::= LBRACE NT$1 block_statements_opt RBRACE 
            {
              Obj RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blstatmsoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blstatmsoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj blstatmso = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = blstatmso;
                                                                                       UtilParser.delScope(); 
                                                                                     
              CUP$parser$result = new java_cup.runtime.Symbol(43/*block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$1 ::= 
            {
              Object RESULT = null;
 UtilParser.newScope(); 
              CUP$parser$result = new java_cup.runtime.Symbol(95/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variable_initializers ::= variable_initializers VIRGOLA variable_initializer 
            {
              Obj RESULT = null;
		int varinitsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varinitsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj varinits = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj varinit = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                                                                      if(varinits.tipo.equals(varinit.tipo)){
                                                                                         varinits.tipo=varinits.tipo;
                                                                                      }else{
                                                                                         varinits.tipo="DOUBLE";
                                                                                      }
                                                                                                                                                                            
                                                                                      RESULT = new Obj(varinits.testo+", "+varinit.testo,varinits.tipo); 
                                                                                     
              CUP$parser$result = new java_cup.runtime.Symbol(42/*variable_initializers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // variable_initializers ::= variable_initializer 
            {
              Obj RESULT = null;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj varinit = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = varinit; 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*variable_initializers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // array_initializer ::= LBRACE RBRACE 
            {
              Obj RESULT = null;
		 RESULT = new Obj("{"+"}"); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*array_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // array_initializer ::= LBRACE VIRGOLA RBRACE 
            {
              Obj RESULT = null;
		 RESULT = new Obj("{"+" , "+"}"); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*array_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // array_initializer ::= LBRACE variable_initializers RBRACE 
            {
              Obj RESULT = null;
		int varinitsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varinitsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj varinits = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj(varinits.testo,varinits.tipo); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*array_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // array_initializer ::= LBRACE variable_initializers VIRGOLA RBRACE 
            {
              Obj RESULT = null;
		int varinitsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varinitsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj varinits = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Obj(varinits.testo+", "); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*array_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // method_body ::= PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;
		int pevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(pev.toString()); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*method_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // method_body ::= block 
            {
              Obj RESULT = null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj bl = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 structProg(livP,flagP2,bl.testo); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*method_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // formal_parameter_list_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*formal_parameter_list_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // method_declarator ::= simple_name TONDA_APERTA formal_parameter_list_opt TONDA_CHIUSA 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fparloptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fparloptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj fparlopt = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj(nome.testo+"("+fparlopt.testo+")");                                                                                                                                                                                                  
                                                                                               
              CUP$parser$result = new java_cup.runtime.Symbol(37/*method_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // method_header ::= modifiers_opt VOID method_declarator 
            {
              Obj RESULT = null;
		int modoptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int modoptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj modopt = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int methdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int methdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj methdecl = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(modopt.testo+" "+"void"+" "+methdecl.testo); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*method_header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // method_declaration ::= method_header method_body 
            {
              Obj RESULT = null;
		int metheadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int metheadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj methead = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int methbodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int methbodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj methbod = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*method_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable_initializer ::= array_initializer 
            {
              Obj RESULT = null;
		int arrinitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int arrinitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj arrinit = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = arrinit; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*variable_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_initializer ::= expression 
            {
              Obj RESULT = null;
		int esprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int esprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj espr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = espr; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*variable_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_declarator_id ::= variable_declarator_id LBRACK RBRACK 
            {
              Obj RESULT = null;
		int vardidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vardidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj vardid = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Obj(vardid.testo+"["+"]","ARRAY"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*variable_declarator_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable_declarator_id ::= simple_name 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                   SymbolTable.addTb(nome.testo);
                                   
                                    if(checkFlag == true){                                                                                                                                                                        
                                        parser.report_error(Err_War,nome);
                                        checkFlag = false;  
                                        System.exit(0);                                        
                                    }
                                                
                                   RESULT = nome; 
                                  
              CUP$parser$result = new java_cup.runtime.Symbol(33/*variable_declarator_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variable_declarator ::= variable_declarator_id EQ variable_initializer 
            {
              Obj RESULT = null;
		int vdileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj vdi = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj vi = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                                                        if(vdi.tipo.equals("ARRAY")){
                                                                          ProdParser.declArr(vdi.testo, vi.testo);
                                                                        }else{
                                                                          Record rec = SymbolTable.getCurrRec(vdi.testo);
                                                                          rec.setValue(vi.testo); 
                                                                        }
                                                                        
                                                                        RESULT = new Obj(vdi.testo+" = "+vi.testo, vi.tipo);                           
                                                                       
              CUP$parser$result = new java_cup.runtime.Symbol(32/*variable_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variable_declarator ::= variable_declarator_id 
            {
              Obj RESULT = null;
		int vdileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vdiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj vdi = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                             if(vdi.tipo.equals("ARRAY")){
                                               vdi.testo = vdi.testo.replace("[]", "");
                                               Record rec = SymbolTable.getCurrRec(vdi.testo);
                                               rec.setValue("null");
                                             }else{
                                                Record rec = SymbolTable.getCurrRec(vdi.testo);
                                                rec.setValue("null"); 
                                             }

                                             RESULT = vdi; 
                                            
              CUP$parser$result = new java_cup.runtime.Symbol(32/*variable_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable_declarators ::= variable_declarators VIRGOLA variable_declarator 
            {
              Obj RESULT = null;
		int vardsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vardsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj vards = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj vard = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(vards.testo+", "+vard.testo); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*variable_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable_declarators ::= variable_declarator 
            {
              Obj RESULT = null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj vard = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(vard.testo,vard.tipo); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*variable_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // field_declaration ::= modifiers_opt type variable_declarators PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*field_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // class_member_declaration ::= PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*class_member_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // class_member_declaration ::= method_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*class_member_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // class_member_declaration ::= field_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*class_member_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // class_body_declaration ::= block 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*class_body_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // class_body_declaration ::= constructor_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*class_body_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // class_body_declaration ::= class_member_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*class_body_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // class_body_declarations ::= class_body_declarations class_body_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*class_body_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // class_body_declarations ::= class_body_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*class_body_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // class_body_declarations_opt ::= class_body_declarations 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*class_body_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // class_body_declarations_opt ::= 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*class_body_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // class_body ::= LBRACE NT$0 class_body_declarations_opt RBRACE 
            {
              Obj RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                                                                          UtilParser.delScope();
                                                                                          livP=3; 
                                                                                          structProg(livP,flagP2,"");
                                                                                        
              CUP$parser$result = new java_cup.runtime.Symbol(25/*class_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$0 ::= 
            {
              Object RESULT = null;
 UtilParser.newScope(); 
              CUP$parser$result = new java_cup.runtime.Symbol(94/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // class_declaration ::= modifiers_opt CLASS simple_name class_body 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*class_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // modifier ::= FINAL 
            {
              Obj RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(f.toString(),"FINAL"); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // modifier ::= STATIC 
            {
              Obj RESULT = null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(stat.toString(),"STATIC"); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // modifier ::= PRIVATE 
            {
              Obj RESULT = null;
		int privleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int privright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object priv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(priv.toString(),"PRIVATE"); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // modifier ::= PUBLIC 
            {
              Obj RESULT = null;
		int publeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pubright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pub = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(pub.toString(),"PUBLIC"); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // modifiers ::= modifiers modifier 
            {
              Obj RESULT = null;
		int modsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int modsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj mods = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj mod = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(mods.testo+" "+mod.testo); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*modifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // modifiers ::= modifier 
            {
              Obj RESULT = null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj mod = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = mod; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*modifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // modifiers_opt ::= modifiers 
            {
              Obj RESULT = null;
		int mod_optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mod_optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj mod_opt = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
                                   ProdParser.mods(mod_opt.testo);  
                                    
                                    if(checkFlag == true){                                       
                                       parser.report_error(Err_War, mod_opt);  
                                       checkFlag = false;
                                    }

                                    RESULT = mod_opt; 
                                   
              CUP$parser$result = new java_cup.runtime.Symbol(21/*modifiers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // modifiers_opt ::= 
            {
              Obj RESULT = null;
		 RESULT = new Obj(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*modifiers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_declaration ::= PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_declaration ::= class_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_import_on_demand_declaration ::= IMPORT name PUNTO PER PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*type_import_on_demand_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // single_type_import_declaration ::= IMPORT name PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*single_type_import_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // import_declaration ::= type_import_on_demand_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*import_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // import_declaration ::= single_type_import_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*import_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // package_declaration ::= PACKAGE name PUNTO_E_VIRGOLA 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*package_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_declarations ::= type_declarations type_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_declarations ::= type_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // import_declarations ::= import_declarations import_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*import_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // import_declarations ::= import_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*import_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_declarations_opt ::= 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*type_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_declarations_opt ::= type_declarations 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*type_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // import_declarations_opt ::= 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*import_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // import_declarations_opt ::= import_declarations 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*import_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // package_declaration_opt ::= 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*package_declaration_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // package_declaration_opt ::= package_declaration 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*package_declaration_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compilation_unit ::= package_declaration_opt import_declarations_opt type_declarations_opt 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*compilation_unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_name ::= IDENTIFICATORE 
            {
              Obj RESULT = null;
		int indleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.String ind = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(ind.toString(),"IDENTIFICATORE"); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*simple_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // name ::= simple_name 
            {
              Obj RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj nome = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = nome; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // floating_point_type ::= DOUBLE 
            {
              Obj RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(d.toString(),"DOUBLE"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*floating_point_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // integral_type ::= INT 
            {
              Obj RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(i.toString(),"INTEGER"); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*integral_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numeric_type ::= floating_point_type 
            {
              Obj RESULT = null;
		int tipo_decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tipo_decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj tipo_dec = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tipo_dec; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*numeric_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // numeric_type ::= integral_type 
            {
              Obj RESULT = null;
		int tipo_interoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tipo_interoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj tipo_intero = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tipo_intero; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*numeric_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primitive_type ::= BOOLEAN 
            {
              Obj RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(b.toString(),"BOOLEAN"); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // primitive_type ::= numeric_type 
            {
              Obj RESULT = null;
		int tipo_numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tipo_numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj tipo_num = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tipo_num; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= primitive_type 
            {
              Obj RESULT = null;
		int tipo_primleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tipo_primright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Obj tipo_prim = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tipo_prim; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literal ::= NULL_LITERAL 
            {
              Obj RESULT = null;
		 RESULT = new Obj("null",""); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal ::= STRING_LITERAL 
            {
              Obj RESULT = null;
		int strlitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int strlitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.String strlit = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(strlit.replace("\"","\\\""),"STRING"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal ::= CHARACTER_LITERAL 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literal ::= BOOLEAN_LITERAL 
            {
              Obj RESULT = null;
		int boolitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int boolitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.Boolean boolit = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(boolit?"true":"false", "BOOLEAN"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literal ::= FLOATING_POINT_LITERAL 
            {
              Obj RESULT = null;
		int fplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.Number fpl = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(Double.toString((Double)fpl),"DOUBLE", "NUMERO"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literal ::= INTEGER_LITERAL 
            {
              Obj RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.Number il = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Obj(Integer.toString((Integer)il),"INTEGER", "NUMERO"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= compilation_unit 
            {
              Obj RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*goal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj start_val = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

